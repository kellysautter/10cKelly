	TITLE	C:\10C\a\oe\KZHSQLXB.C
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_08DFNL@ABSOLUTE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06LHNJ@ACTION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03CICP@ADD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03MJMD@ALL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08HG@ALLOCATE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@NNIC@ALPHANUMERIC?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05BBIN@ALTER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LACO@AND?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03ENCN@ANY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03JPOO@ARE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02EPAG@AS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03HGDG@ASC?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09HNNJ@ASSERTION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02BKOD@AT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@MMGM@AUTHORIZATION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@DFOG@AUTOINCREMENT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03JAGK@AVG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05JBBL@BEGIN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07FEKN@BETWEEN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06ICJB@BINARY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03IODA@BIT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HLBB@BOOLEAN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NOIB@BOTH?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05CPDG@BREAK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MIPA@BROWSE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04OLDH@BULK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02HFGP@BY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EHOP@BYTE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HJNK@CASCADE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08GIOF@CASCADED?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LCDH@CASE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LBNA@CAST?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CPI@CATALOG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MLPN@CHAR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09MNBH@CHARACTER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@LGJP@CHARACTER_LENGTH?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@OBEF@CHAR_LENGTH?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05JHFD@CHECK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CINA@CHECKPOINT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05PHOA@CLOSE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09GMHN@CLUSTERED?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08DMIM@COALESCE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HABJ@COLLATE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09JEOK@COLLATION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06LGEH@COLUMN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06NAIG@COMMIT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09BMPB@COMMITTED?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07FDPF@COMPUTE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07ODJF@CONFIRM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07DKLG@CONNECT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@ICLB@CONNECTION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@LNCA@CONSTRAINT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@GMLE@CONSTRAINTS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08HDIP@CONTINUE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@BOLK@CONTROLROW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07DJAE@CONVERT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@MOMH@CORRESPONDING?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05BNPO@COUNT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CCFH@COUNTER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06JBCM@CREATE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05BLP@CROSS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08CHBF@CURRENCY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HGLC@CURRENT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@NEAE@CURRENT_DATE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@NIMH@CURRENT_TIME?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@GGBA@CURRENT_TIMESTAMP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@KBKG@CURRENT_USER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MDJJ@CURSOR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08PKHN@DATABASE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CJNM@DATE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08MIJC@DATETIME?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03IDGA@DAY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OPFP@DBAREA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CLGJ@DBCC?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@JGIO@DEALLOCATE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05DAPA@DEBUG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CJJP@DECLARE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07FBHA@DEFAULT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@POBB@DEFERRABLE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08IEEN@DEFERRED?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FMHL@DELETE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PPKB@DESC?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FBJG@DESCRIBE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@GKAF@DESCRIPTOR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@OKKK@DIAGNOSTICS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08GADM@DISALLOW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@OGBA@DISCONNECT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04HDPG@DISK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08EGKJ@DISTINCT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EMHJ@DISTINCTROW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@ONJI@DISTRIBUTED?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06EIOP@DOMAIN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06CGGE@DOUBLE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LDDE@DROP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05JGEC@DUMMY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CAAA@DUMP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04OHCC@ELSE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03PIHE@END?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08GNOH@END_EXEC?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LKIC@EQV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06BKPA@ERRLVL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09EIBF@ERROREXIT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MJIP@ESCAPE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06GDHH@EXCEPT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09EEOO@EXCEPTION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GMDG@EXEC?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07DNBH@EXECUTE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MBBB@EXISTS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04HPFN@EXIT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@ILPO@EXPIREDATE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08EDIC@EXTERNAL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07IODP@EXTRACT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05LLOB@FALSE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05KBKM@FETCH?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CMDA@FILE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@NPIO@FILLFACTOR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MPDO@FIRST?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05JDEL@FLOAT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FFP@FLOAT4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06PLLL@FLOAT8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IPNK@FLOPPY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03EOOH@FOR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07ECFK@FOREIGN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EJD@FROM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CLJK@FULL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03HLIC@GET?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@PODI@GETDEFAULT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06EKIF@GLOBAL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04DLHO@GOTO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05DLPA@GRANT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05JGM@GROUP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04BGHA@GUID?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06GNBD@HAVING?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JHAN@HOLDLOCK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PJ@HOUR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08MFJF@IDENTITY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EOA@IDENTITYCOL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@JADB@IDENTITY_INSERT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CMNP@IEEEDOUBLE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FEGJ@IEEESINGLE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02FDOJ@IF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HLND@IGNORE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09LEPP@IMMEDIATE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03BIEI@IMP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02HFB@IN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05HKPP@INDEX?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09BAOC@INITIALLY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05EPPB@INNER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05IHIC@INPUT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@PDHJ@INSENSITIVE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06CCAI@INSERT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03IJOL@INT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07KMGD@INTEGER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08PEKL@INTEGER1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08LBC@INTEGER2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09GIDA@INTERSECT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08JNLE@INTERVAL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JMBE@INTO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02PKFC@IS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09JCKC@ISOLATION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JIJO@JOIN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03PHBO@KEY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EIJF@KILL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GBPO@LAST?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HHCE@LEADING?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PAN@LEFT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05JJEC@LEVEL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CNFB@LIKE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MJFP@LINENO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PDLA@LOAD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05JIPK@LOCAL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07OAKI@LOGICAL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08KCOH@LOGICAL1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NIAI@LONG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@GKBM@LONGBINARY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08HLJO@LONGTEXT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NFKB@MATCH?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03OLFE@MAX?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KGIF@MEMO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03IAC@MIN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IOKL@MINUTE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@GNDP@MIRROREXIT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03HOGL@MOD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05EBDH@MONEY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05DOND@MONTH?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05KDIJ@NAMES?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08CHPD@NATIONAL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07BGPN@NATURAL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05DFM@NCHAR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04ONKL@NEXT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07NAJC@NEXTLOG?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02MMJD@NO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07IMID@NOCHECK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@NJNJ@NONCLUSTERED?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03CBCA@NOT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04DFCK@NOTE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04BAK@NULL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06HGII@NULLIF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MDMK@NUMBER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07FIAN@NUMERIC?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@PBNP@OCTET_LENGTH?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02CEBG@OF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03CMJG@OFF?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07FMHE@OFFSETS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09GMOF@OLEOBJECT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02HAKO@ON?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EJJC@ONCE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MKAH@ONLY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04MIME@OPEN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IFCC@OPTION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02CHDK@OR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FBEP@ORDER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05IKJL@OUTER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06BMBF@OUTPUT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04HDCH@OVER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08PGNB@OVERLAPS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@GPH@OWNERACCESS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03BHFD@PAD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@PEIP@PARAMETERS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MOBO@PARTIAL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MGCH@PERCENT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04ICKI@PERM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09JLAF@PERMANENT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CDKK@PIPE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MALJ@PIVOT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04OOOE@PLAN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08BGJK@POSITION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09LJHE@PRECISION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07OCNH@PREPARE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07JPNB@PRESEVE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07PLFH@PRIMARY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MJOK@PRINT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05CADC@PRIOR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@IFKE@PRIVILEGES?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CFJE@PROC?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09HPKL@PROCEDURE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@CNCJ@PROCESSEXIT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06JPM@PUBLIC?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09EHBK@RAISERROR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GHHF@READ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08IEGM@READTEXT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04DDMN@REAL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@CLEO@RECONFIGURE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@DHND@REFERENCES?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NDFO@RELATIVE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@DEIL@REPEATABLE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@GBCL@REPLICATION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08BEHK@RESTRICT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09NACH@RETAINDAY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06PJJM@RETURN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06MEJM@REVOKE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05JCNK@RIGHT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08EMFJ@ROLLBACK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08MGKJ@ROWCOUNT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LCCO@ROWS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04BFNM@RULE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04KLBG@SAVE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06NIIF@SCHEMA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06JLNB@SCROLL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FCJA@SECOND?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OGAC@SELECT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@CCJF@SERIALIZABLE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CGDO@SESSION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@JGA@SESSION_USER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03BCLC@SET?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07EDEP@SETUSER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05HFLA@SHORT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08DPKF@SHUTDOWN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06FONC@SINGLE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NEFN@SIZE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08DMN@SMALLINT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04DDNG@SOME?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05JCH@SPACE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08DHID@SQLSTATE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@JMMG@STATISTICS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05KHBF@STDEV?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06OCBH@STDEVP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06JDFN@STRING?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03CPEE@SUM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@JBHB@SYSTEM_USER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05DLJE@TABLE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07DAKP@TABLEID?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CGFH@TAPE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04FEEL@TEMP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09EAGL@TEMPORARY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NILO@TEXT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FIJO@TEXTSIZE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GJFM@THEN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CFBP@TIME?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09KEAG@TIMESTAMP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@OCJA@TIMEZONE_HOUR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@OAII@TIMEZONE_MINUTE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02DODL@TO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03JOIO@TOP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NJGC@TRAILING?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CGAE@TRAN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@JACB@TRANSACTION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09ECBO@TRANSFORM?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09HNKP@TRANSLATE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@LOEK@TRANSLATION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07GNLP@TRIGGER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LNAG@TRUE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FCAH@TRUNCATE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CODK@TSEQUAL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@PJEA@UNCOMMITTED?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05LNOP@UNION?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06LNBM@UNIQUE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CNPM@UNKNOWN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06NDPG@UPDATE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@DPMH@UPDATETEXT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05PMKE@USAGE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03OAHE@USE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04FMHO@USER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05JKMB@USING?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MOEL@VALUE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06KGMH@VALUES?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03KNCG@VAR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09OLDK@VARBINARY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07NGFA@VARCHAR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04OIBN@VARP?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MMOJ@VARYING?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04CGLB@VIEW?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06IEGE@VOLUME?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07KCD@WAITFOR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GKK@WHEN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MCFK@WHERE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05LCLH@WHILE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NHMN@WITH?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LDPM@WORK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FIFP@WRITE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09IKOB@WRITETEXT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03BDEP@XOR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04HEBB@YEAR?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NAPJ@YESNO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04HOL@ZONE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01A@?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FAJB@?$DL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@FNLO@DROP?5INDEX?5?$CFs?5ON?5?$CFs?$CFs?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08IAKB@TZTEDBLO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EALC@DBMS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@BCDD@TE_DBMS_Source?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08DKGC@DBH_Data?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PCJP@Y?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@KJKI@TimestampAsString?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JENC@ODBC?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@GNCH@MaxColumnNameLength?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04EFNI@Name?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@PJGE@TE_FieldDataRel?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FNON@DataType?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04DOMO@?$CF?9?$CKs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06CAAP@Length?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FENM@?5varchar?$CI?5?$CFld?5?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CPOG@?5longblob?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09IJHK@?5datetime?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04OGMO@?5int?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07CLFL@?5double?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09DKHG@?5longtext?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@ODFA@DataOrRelfieldOrSet?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@NJGJ@?5INTEGER?5PRIMARY?5KEY?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08KJLB@?5INTEGER?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@HOC@?5varchar?$CI?536?5?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@OLJF@?5varchar?$CI?530?5?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@NCMM@TE_TablRec?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CK@EKKO@Invalid?5DataType?5?8?$CFs?8?5for?5attrib@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@KEK@SQL?5DDL?5Generator?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09LPMC@SQL_NULLS?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08IDDA@NOT?5NULL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08FGIB@NULL?5?5?5?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@HJOL@DefaultOwner?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@CNMG@SQL_TableOwner?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PJCK@?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@KOPE@MaxTableNameLength?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04DKMG@Desc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02BOOO@?$CK?1?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02FCCF@?1?$CK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CE@EPOC@?$CFs?5Index?5for?5Relationship?5?9?5?8?$CFs?8@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04BBDM@ZKey?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@OGL@?$CFs_?$CFs_?$CFld0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@IFEM@B_AEIOUYBCDFGHJKLMNPQRSTVWXZ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PAOO@B?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@BFOD@CREATE?5INDEX?5?$CFs?$CFs?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@IBEH@?5?5?5?5?5?5?5ON?5?$CFs?$CFs?5?$CI?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FCOA@?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@JBMN@?$CF?$CKs?5?$CFs?5?$CJ?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CNO@ER_Entity?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@GKMP@?$CFs?5Main?5key?5for?5Entity?5?9?5?$CFs?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09CEBI@IndexName?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@LKEB@TE_TablRecKey?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@EGMP@TE_FieldDataRelKey?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@EFNH@U?$CFs_?$CFs_?$CFld0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02DILL@?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@HCMD@CREATE?5UNIQUE?5INDEX?5?$CFs?$CFs?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@OGBL@?$CF?$CKs?5?$CFs?0?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@PCJM@?$CFs?5Entity?5?9?5?$CFs?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@HMHF@CREATE?5TABLE?5?$CFs?$CFs?5?$CI?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04BAFE@?$CF?$CKs?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GPPE@?0?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NLEE@?5?$CJ?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01OAK@N?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PMIC@?4ddl?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@MOMC@?$CFs?5CREATE?5DATABASE?5?$CFs?5?$CFs?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@IABD@?$CFs?5Indexes?5for?5Entity?5?9?5?$CFs?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05FCKF@?$CFs_?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07PHBB@B_AEIOU?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04LGDF@?$CF02d?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@DHGH@DROP?5TABLE?5IF?5EXISTS?5?$CFs?$CFs?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@OLHP@GRANT?5ALL?5ON?5?$CFs?$CFs?5TO?5PUBLIC?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05EGAJ@File?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@MMCL@?5is?5created?5successfully?$CB?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@PJOD@Couldn?8t?5create?5file?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@PLHO@Generate?5DDL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@NKCB@Executable?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@JHOI@RetrieveSchema?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DF@MNGA@Couldn?8t?5find?5?8BuildSyncDDL?8?5in?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@DNAH@Physical?5Data?5Model?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07LDCE@TE00422?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06NGI@_alter?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@EBOB@?$CFs?5Alter?5script?5for?5?$CFs?5?9?9?5?$CFs?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FFM@MatchFound?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PJM@D?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@LFLL@?$CFs?5Entity?5?$CFs?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BE@FPJB@ALTER?5TABLE?5?$CFs?5ADD?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@MKDI@DROP?5TABLE?5?$CFs?5?$CFs?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CD@OHJM@ALTER?5TABLE?5?$CFs?$CFs?5DROP?5COLUMN?5?$CFs?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CB@MGNG@ALTER?5TABLE?5?$CFs?$CF?9?$CKs?5ALTER?5COLUMN?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BAI@KIFF@WARNING?3?5The?5data?5type?5for?5the?5c@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HFPH@DDL?5Generationg?5Warning?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FJ@KCOE@?$CFs?5WARNING?9?9Following?5index?5may?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@INLJ@DB_DataTypes?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PDAJ@S?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@CCA@InternalName?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06PINC@String?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@NAC@ExternalName?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FLCE@L?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07HDOI@Integer?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PBLD@M?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07DBJI@Decimal?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KGOM@T?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09KMOL@Timestamp?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FIAI@X?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@BADB@TimeStampEx?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04OMLL@Date?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FLOP@I?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04OAHI@Time?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FKLC@F?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09GOGB@FixedChar?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@IMGI@Blob?5?$CIlongblob?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PDMC@V?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@NGGL@Text?5?$CIlongtext?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PFH@A?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@NNJD@SERIAL?5?$CIautoincrement?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01MHL@U?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JPF@UUID?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01KEJN@O?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07KEJK@Boolean?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06CDGA@Domain?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@CMME@GeneratedKey?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LBCJ@Lth?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@IKDH@ER_Attribute?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@FPPC@MaxStringLth?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CD@CCFO@?$CITE?$CJ?5Invalid?5Physical?5Data?5type?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@EEGE@Invalid?5Physical?5Data?5type?4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09PLDP@Zeidon?5TE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02IALC@z_?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@CEEE@TranslateNamesToLowerUnderscore?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02IKBN@B_?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02IPGJ@Bc?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@PPLE@DATARECORD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@PNOD@CHILDENTITY?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09JEIA@DATAFIELD?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07MPNE@FLDTYPE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@CDIB@XVAATT_TOK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06BLIJ@ATTRIB?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@NHDL@LOD_EntityParent?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@FMLJ@TE_DBMS_SourceForEntity?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@GNEF@SQL_JoinWithParent?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@KKLH@POD_Entity?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@FFFI@ER_RelLinkRec?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07NHPD@CardMax?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09PPA@ERENT_TOK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09DPNM@ERREL_TOK?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@DPMI@LOD_EntityChild?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@NFHJ@ER_EntityRec?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08DKCM@TZDBHODO?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@KPGG@TimestampPrecision?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06PIJH@OBJECT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	??_C@_06FMHL@DELETE?$AA@			; `string'
PUBLIC	??_C@_04PPKB@DESC?$AA@				; `string'
PUBLIC	??_C@_08FBJG@DESCRIBE?$AA@			; `string'
PUBLIC	??_C@_0L@GKAF@DESCRIPTOR?$AA@			; `string'
PUBLIC	??_C@_0M@OKKK@DIAGNOSTICS?$AA@			; `string'
PUBLIC	??_C@_08GADM@DISALLOW?$AA@			; `string'
PUBLIC	??_C@_0L@OGBA@DISCONNECT?$AA@			; `string'
PUBLIC	??_C@_04HDPG@DISK?$AA@				; `string'
PUBLIC	??_C@_08EGKJ@DISTINCT?$AA@			; `string'
PUBLIC	??_C@_0M@EMHJ@DISTINCTROW?$AA@			; `string'
PUBLIC	??_C@_0M@ONJI@DISTRIBUTED?$AA@			; `string'
PUBLIC	??_C@_06EIOP@DOMAIN?$AA@			; `string'
PUBLIC	??_C@_06CGGE@DOUBLE?$AA@			; `string'
PUBLIC	??_C@_04LDDE@DROP?$AA@				; `string'
PUBLIC	??_C@_05JGEC@DUMMY?$AA@				; `string'
PUBLIC	??_C@_04CAAA@DUMP?$AA@				; `string'
PUBLIC	??_C@_04OHCC@ELSE?$AA@				; `string'
PUBLIC	??_C@_03PIHE@END?$AA@				; `string'
PUBLIC	??_C@_08GNOH@END_EXEC?$AA@			; `string'
PUBLIC	??_C@_03LKIC@EQV?$AA@				; `string'
PUBLIC	??_C@_06BKPA@ERRLVL?$AA@			; `string'
PUBLIC	??_C@_09EIBF@ERROREXIT?$AA@			; `string'
PUBLIC	??_C@_06MJIP@ESCAPE?$AA@			; `string'
PUBLIC	??_C@_06GDHH@EXCEPT?$AA@			; `string'
PUBLIC	??_C@_09EEOO@EXCEPTION?$AA@			; `string'
PUBLIC	??_C@_04GMDG@EXEC?$AA@				; `string'
PUBLIC	??_C@_07DNBH@EXECUTE?$AA@			; `string'
PUBLIC	??_C@_06MBBB@EXISTS?$AA@			; `string'
PUBLIC	??_C@_04HPFN@EXIT?$AA@				; `string'
PUBLIC	??_C@_0L@ILPO@EXPIREDATE?$AA@			; `string'
PUBLIC	??_C@_08EDIC@EXTERNAL?$AA@			; `string'
PUBLIC	??_C@_07IODP@EXTRACT?$AA@			; `string'
PUBLIC	??_C@_05LLOB@FALSE?$AA@				; `string'
PUBLIC	??_C@_05KBKM@FETCH?$AA@				; `string'
PUBLIC	??_C@_04CMDA@FILE?$AA@				; `string'
PUBLIC	??_C@_0L@NPIO@FILLFACTOR?$AA@			; `string'
PUBLIC	??_C@_05MPDO@FIRST?$AA@				; `string'
PUBLIC	??_C@_05JDEL@FLOAT?$AA@				; `string'
PUBLIC	??_C@_06FFP@FLOAT4?$AA@				; `string'
PUBLIC	??_C@_06PLLL@FLOAT8?$AA@			; `string'
PUBLIC	??_C@_06IPNK@FLOPPY?$AA@			; `string'
PUBLIC	??_C@_03EOOH@FOR?$AA@				; `string'
PUBLIC	??_C@_07ECFK@FOREIGN?$AA@			; `string'
PUBLIC	??_C@_04EJD@FROM?$AA@				; `string'
PUBLIC	??_C@_04CLJK@FULL?$AA@				; `string'
PUBLIC	??_C@_03HLIC@GET?$AA@				; `string'
PUBLIC	??_C@_0L@PODI@GETDEFAULT?$AA@			; `string'
PUBLIC	??_C@_06EKIF@GLOBAL?$AA@			; `string'
PUBLIC	??_C@_04DLHO@GOTO?$AA@				; `string'
PUBLIC	??_C@_05DLPA@GRANT?$AA@				; `string'
PUBLIC	??_C@_05JGM@GROUP?$AA@				; `string'
PUBLIC	??_C@_04BGHA@GUID?$AA@				; `string'
PUBLIC	??_C@_06GNBD@HAVING?$AA@			; `string'
PUBLIC	??_C@_08JHAN@HOLDLOCK?$AA@			; `string'
PUBLIC	??_C@_04PJ@HOUR?$AA@				; `string'
PUBLIC	??_C@_08MFJF@IDENTITY?$AA@			; `string'
PUBLIC	??_C@_0M@EOA@IDENTITYCOL?$AA@			; `string'
PUBLIC	??_C@_0BA@JADB@IDENTITY_INSERT?$AA@		; `string'
PUBLIC	??_C@_0L@CMNP@IEEEDOUBLE?$AA@			; `string'
PUBLIC	??_C@_0L@FEGJ@IEEESINGLE?$AA@			; `string'
PUBLIC	??_C@_02FDOJ@IF?$AA@				; `string'
PUBLIC	??_C@_06HLND@IGNORE?$AA@			; `string'
PUBLIC	??_C@_09LEPP@IMMEDIATE?$AA@			; `string'
PUBLIC	??_C@_03BIEI@IMP?$AA@				; `string'
PUBLIC	??_C@_02HFB@IN?$AA@				; `string'
PUBLIC	??_C@_05HKPP@INDEX?$AA@				; `string'
PUBLIC	??_C@_09BAOC@INITIALLY?$AA@			; `string'
PUBLIC	??_C@_05EPPB@INNER?$AA@				; `string'
PUBLIC	??_C@_05IHIC@INPUT?$AA@				; `string'
PUBLIC	??_C@_0M@PDHJ@INSENSITIVE?$AA@			; `string'
PUBLIC	??_C@_06CCAI@INSERT?$AA@			; `string'
PUBLIC	??_C@_03IJOL@INT?$AA@				; `string'
PUBLIC	??_C@_07KMGD@INTEGER?$AA@			; `string'
PUBLIC	??_C@_08PEKL@INTEGER1?$AA@			; `string'
PUBLIC	??_C@_08LBC@INTEGER2?$AA@			; `string'
PUBLIC	??_C@_09GIDA@INTERSECT?$AA@			; `string'
PUBLIC	??_C@_08JNLE@INTERVAL?$AA@			; `string'
PUBLIC	??_C@_04JMBE@INTO?$AA@				; `string'
PUBLIC	??_C@_02PKFC@IS?$AA@				; `string'
PUBLIC	??_C@_09JCKC@ISOLATION?$AA@			; `string'
PUBLIC	??_C@_04JIJO@JOIN?$AA@				; `string'
PUBLIC	??_C@_03PHBO@KEY?$AA@				; `string'
PUBLIC	??_C@_04EIJF@KILL?$AA@				; `string'
PUBLIC	??_C@_04GBPO@LAST?$AA@				; `string'
PUBLIC	??_C@_07HHCE@LEADING?$AA@			; `string'
PUBLIC	??_C@_04PAN@LEFT?$AA@				; `string'
PUBLIC	??_C@_05JJEC@LEVEL?$AA@				; `string'
PUBLIC	??_C@_04CNFB@LIKE?$AA@				; `string'
PUBLIC	??_C@_06MJFP@LINENO?$AA@			; `string'
PUBLIC	??_C@_04PDLA@LOAD?$AA@				; `string'
PUBLIC	??_C@_05JIPK@LOCAL?$AA@				; `string'
PUBLIC	??_C@_07OAKI@LOGICAL?$AA@			; `string'
PUBLIC	??_C@_08KCOH@LOGICAL1?$AA@			; `string'
PUBLIC	??_C@_04NIAI@LONG?$AA@				; `string'
PUBLIC	??_C@_0L@GKBM@LONGBINARY?$AA@			; `string'
PUBLIC	??_C@_08HLJO@LONGTEXT?$AA@			; `string'
PUBLIC	??_C@_05NFKB@MATCH?$AA@				; `string'
PUBLIC	??_C@_03OLFE@MAX?$AA@				; `string'
PUBLIC	??_C@_04KGIF@MEMO?$AA@				; `string'
PUBLIC	??_C@_03IAC@MIN?$AA@				; `string'
PUBLIC	??_C@_06IOKL@MINUTE?$AA@			; `string'
PUBLIC	??_C@_0L@GNDP@MIRROREXIT?$AA@			; `string'
PUBLIC	??_C@_03HOGL@MOD?$AA@				; `string'
PUBLIC	??_C@_05EBDH@MONEY?$AA@				; `string'
PUBLIC	??_C@_05DOND@MONTH?$AA@				; `string'
PUBLIC	??_C@_05KDIJ@NAMES?$AA@				; `string'
PUBLIC	??_C@_08CHPD@NATIONAL?$AA@			; `string'
PUBLIC	??_C@_07BGPN@NATURAL?$AA@			; `string'
PUBLIC	??_C@_05DFM@NCHAR?$AA@				; `string'
PUBLIC	??_C@_04ONKL@NEXT?$AA@				; `string'
PUBLIC	??_C@_07NAJC@NEXTLOG?$AA@			; `string'
PUBLIC	??_C@_02MMJD@NO?$AA@				; `string'
PUBLIC	??_C@_07IMID@NOCHECK?$AA@			; `string'
PUBLIC	??_C@_0N@NJNJ@NONCLUSTERED?$AA@			; `string'
PUBLIC	??_C@_03CBCA@NOT?$AA@				; `string'
PUBLIC	??_C@_04DFCK@NOTE?$AA@				; `string'
PUBLIC	??_C@_04BAK@NULL?$AA@				; `string'
PUBLIC	??_C@_06HGII@NULLIF?$AA@			; `string'
PUBLIC	??_C@_06MDMK@NUMBER?$AA@			; `string'
PUBLIC	??_C@_07FIAN@NUMERIC?$AA@			; `string'
PUBLIC	??_C@_0N@PBNP@OCTET_LENGTH?$AA@			; `string'
PUBLIC	??_C@_02CEBG@OF?$AA@				; `string'
PUBLIC	??_C@_03CMJG@OFF?$AA@				; `string'
PUBLIC	??_C@_07FMHE@OFFSETS?$AA@			; `string'
PUBLIC	??_C@_09GMOF@OLEOBJECT?$AA@			; `string'
PUBLIC	??_C@_02HAKO@ON?$AA@				; `string'
PUBLIC	??_C@_04EJJC@ONCE?$AA@				; `string'
PUBLIC	??_C@_04MKAH@ONLY?$AA@				; `string'
PUBLIC	??_C@_04MIME@OPEN?$AA@				; `string'
PUBLIC	??_C@_06IFCC@OPTION?$AA@			; `string'
PUBLIC	??_C@_02CHDK@OR?$AA@				; `string'
PUBLIC	??_C@_05FBEP@ORDER?$AA@				; `string'
PUBLIC	??_C@_05IKJL@OUTER?$AA@				; `string'
PUBLIC	??_C@_06BMBF@OUTPUT?$AA@			; `string'
PUBLIC	??_C@_04HDCH@OVER?$AA@				; `string'
PUBLIC	??_C@_08PGNB@OVERLAPS?$AA@			; `string'
PUBLIC	??_C@_0M@GPH@OWNERACCESS?$AA@			; `string'
PUBLIC	??_C@_03BHFD@PAD?$AA@				; `string'
PUBLIC	??_C@_0L@PEIP@PARAMETERS?$AA@			; `string'
PUBLIC	??_C@_07MOBO@PARTIAL?$AA@			; `string'
PUBLIC	??_C@_07MGCH@PERCENT?$AA@			; `string'
PUBLIC	??_C@_04ICKI@PERM?$AA@				; `string'
PUBLIC	??_C@_09JLAF@PERMANENT?$AA@			; `string'
PUBLIC	??_C@_04CDKK@PIPE?$AA@				; `string'
PUBLIC	??_C@_05MALJ@PIVOT?$AA@				; `string'
PUBLIC	??_C@_04OOOE@PLAN?$AA@				; `string'
PUBLIC	??_C@_08BGJK@POSITION?$AA@			; `string'
PUBLIC	??_C@_09LJHE@PRECISION?$AA@			; `string'
PUBLIC	??_C@_07OCNH@PREPARE?$AA@			; `string'
PUBLIC	??_C@_07JPNB@PRESEVE?$AA@			; `string'
PUBLIC	??_C@_07PLFH@PRIMARY?$AA@			; `string'
PUBLIC	??_C@_05MJOK@PRINT?$AA@				; `string'
PUBLIC	??_C@_05CADC@PRIOR?$AA@				; `string'
PUBLIC	??_C@_0L@IFKE@PRIVILEGES?$AA@			; `string'
PUBLIC	??_C@_04CFJE@PROC?$AA@				; `string'
PUBLIC	??_C@_09HPKL@PROCEDURE?$AA@			; `string'
PUBLIC	??_C@_0M@CNCJ@PROCESSEXIT?$AA@			; `string'
PUBLIC	??_C@_06JPM@PUBLIC?$AA@				; `string'
PUBLIC	??_C@_09EHBK@RAISERROR?$AA@			; `string'
PUBLIC	??_C@_04GHHF@READ?$AA@				; `string'
PUBLIC	??_C@_08IEGM@READTEXT?$AA@			; `string'
PUBLIC	??_C@_04DDMN@REAL?$AA@				; `string'
PUBLIC	??_C@_0M@CLEO@RECONFIGURE?$AA@			; `string'
PUBLIC	??_C@_0L@DHND@REFERENCES?$AA@			; `string'
PUBLIC	??_C@_08NDFO@RELATIVE?$AA@			; `string'
PUBLIC	??_C@_0L@DEIL@REPEATABLE?$AA@			; `string'
PUBLIC	??_C@_0M@GBCL@REPLICATION?$AA@			; `string'
PUBLIC	??_C@_08BEHK@RESTRICT?$AA@			; `string'
PUBLIC	??_C@_09NACH@RETAINDAY?$AA@			; `string'
PUBLIC	??_C@_06PJJM@RETURN?$AA@			; `string'
PUBLIC	??_C@_06MEJM@REVOKE?$AA@			; `string'
PUBLIC	??_C@_05JCNK@RIGHT?$AA@				; `string'
PUBLIC	??_C@_08EMFJ@ROLLBACK?$AA@			; `string'
PUBLIC	??_C@_08MGKJ@ROWCOUNT?$AA@			; `string'
PUBLIC	??_C@_04LCCO@ROWS?$AA@				; `string'
PUBLIC	??_C@_04BFNM@RULE?$AA@				; `string'
PUBLIC	??_C@_04KLBG@SAVE?$AA@				; `string'
PUBLIC	??_C@_06NIIF@SCHEMA?$AA@			; `string'
PUBLIC	??_C@_06JLNB@SCROLL?$AA@			; `string'
PUBLIC	??_C@_06FCJA@SECOND?$AA@			; `string'
PUBLIC	??_C@_06OGAC@SELECT?$AA@			; `string'
PUBLIC	??_C@_0N@CCJF@SERIALIZABLE?$AA@			; `string'
PUBLIC	??_C@_07CGDO@SESSION?$AA@			; `string'
PUBLIC	??_C@_0N@JGA@SESSION_USER?$AA@			; `string'
PUBLIC	??_C@_03BCLC@SET?$AA@				; `string'
PUBLIC	??_C@_07EDEP@SETUSER?$AA@			; `string'
PUBLIC	??_C@_05HFLA@SHORT?$AA@				; `string'
PUBLIC	??_C@_08DPKF@SHUTDOWN?$AA@			; `string'
PUBLIC	??_C@_06FONC@SINGLE?$AA@			; `string'
PUBLIC	??_C@_04NEFN@SIZE?$AA@				; `string'
PUBLIC	??_C@_08DMN@SMALLINT?$AA@			; `string'
PUBLIC	??_C@_04DDNG@SOME?$AA@				; `string'
PUBLIC	??_C@_05JCH@SPACE?$AA@				; `string'
PUBLIC	??_C@_08DHID@SQLSTATE?$AA@			; `string'
PUBLIC	??_C@_0L@JMMG@STATISTICS?$AA@			; `string'
PUBLIC	??_C@_05KHBF@STDEV?$AA@				; `string'
PUBLIC	??_C@_06OCBH@STDEVP?$AA@			; `string'
PUBLIC	??_C@_06JDFN@STRING?$AA@			; `string'
PUBLIC	??_C@_03CPEE@SUM?$AA@				; `string'
PUBLIC	??_C@_0M@JBHB@SYSTEM_USER?$AA@			; `string'
PUBLIC	??_C@_05DLJE@TABLE?$AA@				; `string'
PUBLIC	??_C@_07DAKP@TABLEID?$AA@			; `string'
PUBLIC	??_C@_04CGFH@TAPE?$AA@				; `string'
PUBLIC	??_C@_04FEEL@TEMP?$AA@				; `string'
PUBLIC	??_C@_09EAGL@TEMPORARY?$AA@			; `string'
PUBLIC	??_C@_04NILO@TEXT?$AA@				; `string'
PUBLIC	??_C@_08FIJO@TEXTSIZE?$AA@			; `string'
PUBLIC	??_C@_04GJFM@THEN?$AA@				; `string'
PUBLIC	??_C@_04CFBP@TIME?$AA@				; `string'
PUBLIC	??_C@_09KEAG@TIMESTAMP?$AA@			; `string'
PUBLIC	??_C@_0O@OCJA@TIMEZONE_HOUR?$AA@		; `string'
PUBLIC	??_C@_0BA@OAII@TIMEZONE_MINUTE?$AA@		; `string'
PUBLIC	??_C@_02DODL@TO?$AA@				; `string'
PUBLIC	??_C@_03JOIO@TOP?$AA@				; `string'
PUBLIC	??_C@_08NJGC@TRAILING?$AA@			; `string'
PUBLIC	??_C@_04CGAE@TRAN?$AA@				; `string'
PUBLIC	??_C@_0M@JACB@TRANSACTION?$AA@			; `string'
PUBLIC	??_C@_09ECBO@TRANSFORM?$AA@			; `string'
PUBLIC	??_C@_09HNKP@TRANSLATE?$AA@			; `string'
PUBLIC	??_C@_0M@LOEK@TRANSLATION?$AA@			; `string'
PUBLIC	??_C@_07GNLP@TRIGGER?$AA@			; `string'
PUBLIC	??_C@_04LNAG@TRUE?$AA@				; `string'
PUBLIC	??_C@_08FCAH@TRUNCATE?$AA@			; `string'
PUBLIC	??_C@_07CODK@TSEQUAL?$AA@			; `string'
PUBLIC	??_C@_0M@PJEA@UNCOMMITTED?$AA@			; `string'
PUBLIC	??_C@_05LNOP@UNION?$AA@				; `string'
PUBLIC	??_C@_06LNBM@UNIQUE?$AA@			; `string'
PUBLIC	??_C@_07CNPM@UNKNOWN?$AA@			; `string'
PUBLIC	??_C@_06NDPG@UPDATE?$AA@			; `string'
PUBLIC	??_C@_0L@DPMH@UPDATETEXT?$AA@			; `string'
PUBLIC	??_C@_05PMKE@USAGE?$AA@				; `string'
PUBLIC	??_C@_03OAHE@USE?$AA@				; `string'
PUBLIC	??_C@_04FMHO@USER?$AA@				; `string'
PUBLIC	??_C@_05JKMB@USING?$AA@				; `string'
PUBLIC	??_C@_05MOEL@VALUE?$AA@				; `string'
PUBLIC	??_C@_06KGMH@VALUES?$AA@			; `string'
PUBLIC	??_C@_03KNCG@VAR?$AA@				; `string'
PUBLIC	??_C@_09OLDK@VARBINARY?$AA@			; `string'
PUBLIC	??_C@_07NGFA@VARCHAR?$AA@			; `string'
PUBLIC	??_C@_04OIBN@VARP?$AA@				; `string'
PUBLIC	??_C@_07MMOJ@VARYING?$AA@			; `string'
PUBLIC	??_C@_04CGLB@VIEW?$AA@				; `string'
PUBLIC	??_C@_06IEGE@VOLUME?$AA@			; `string'
PUBLIC	??_C@_07KCD@WAITFOR?$AA@			; `string'
PUBLIC	??_C@_04GKK@WHEN?$AA@				; `string'
PUBLIC	??_C@_05MCFK@WHERE?$AA@				; `string'
PUBLIC	??_C@_05LCLH@WHILE?$AA@				; `string'
PUBLIC	??_C@_04NHMN@WITH?$AA@				; `string'
PUBLIC	??_C@_04LDPM@WORK?$AA@				; `string'
PUBLIC	??_C@_05FIFP@WRITE?$AA@				; `string'
PUBLIC	??_C@_09IKOB@WRITETEXT?$AA@			; `string'
PUBLIC	??_C@_03BDEP@XOR?$AA@				; `string'
PUBLIC	??_C@_04HEBB@YEAR?$AA@				; `string'
PUBLIC	??_C@_05NAPJ@YESNO?$AA@				; `string'
PUBLIC	??_C@_04HOL@ZONE?$AA@				; `string'
PUBLIC	??_C@_01A@?$AA?$AA@				; `string'
PUBLIC	_szReservedName
PUBLIC	??_C@_08DFNL@ABSOLUTE?$AA@			; `string'
PUBLIC	??_C@_06LHNJ@ACTION?$AA@			; `string'
PUBLIC	??_C@_03CICP@ADD?$AA@				; `string'
PUBLIC	??_C@_03MJMD@ALL?$AA@				; `string'
PUBLIC	??_C@_08HG@ALLOCATE?$AA@			; `string'
PUBLIC	??_C@_0N@NNIC@ALPHANUMERIC?$AA@			; `string'
PUBLIC	??_C@_05BBIN@ALTER?$AA@				; `string'
PUBLIC	??_C@_03LACO@AND?$AA@				; `string'
PUBLIC	??_C@_03ENCN@ANY?$AA@				; `string'
PUBLIC	??_C@_03JPOO@ARE?$AA@				; `string'
PUBLIC	??_C@_02EPAG@AS?$AA@				; `string'
PUBLIC	??_C@_03HGDG@ASC?$AA@				; `string'
PUBLIC	??_C@_09HNNJ@ASSERTION?$AA@			; `string'
PUBLIC	??_C@_02BKOD@AT?$AA@				; `string'
PUBLIC	??_C@_0O@MMGM@AUTHORIZATION?$AA@		; `string'
PUBLIC	??_C@_0O@DFOG@AUTOINCREMENT?$AA@		; `string'
PUBLIC	??_C@_03JAGK@AVG?$AA@				; `string'
PUBLIC	??_C@_05JBBL@BEGIN?$AA@				; `string'
PUBLIC	??_C@_07FEKN@BETWEEN?$AA@			; `string'
PUBLIC	??_C@_06ICJB@BINARY?$AA@			; `string'
PUBLIC	??_C@_03IODA@BIT?$AA@				; `string'
PUBLIC	??_C@_07HLBB@BOOLEAN?$AA@			; `string'
PUBLIC	??_C@_04NOIB@BOTH?$AA@				; `string'
PUBLIC	??_C@_05CPDG@BREAK?$AA@				; `string'
PUBLIC	??_C@_06MIPA@BROWSE?$AA@			; `string'
PUBLIC	??_C@_04OLDH@BULK?$AA@				; `string'
PUBLIC	??_C@_02HFGP@BY?$AA@				; `string'
PUBLIC	??_C@_04EHOP@BYTE?$AA@				; `string'
PUBLIC	??_C@_07HJNK@CASCADE?$AA@			; `string'
PUBLIC	??_C@_08GIOF@CASCADED?$AA@			; `string'
PUBLIC	??_C@_04LCDH@CASE?$AA@				; `string'
PUBLIC	??_C@_04LBNA@CAST?$AA@				; `string'
PUBLIC	??_C@_07CPI@CATALOG?$AA@			; `string'
PUBLIC	??_C@_04MLPN@CHAR?$AA@				; `string'
PUBLIC	??_C@_09MNBH@CHARACTER?$AA@			; `string'
PUBLIC	??_C@_0BB@LGJP@CHARACTER_LENGTH?$AA@		; `string'
PUBLIC	??_C@_0M@OBEF@CHAR_LENGTH?$AA@			; `string'
PUBLIC	??_C@_05JHFD@CHECK?$AA@				; `string'
PUBLIC	??_C@_0L@CINA@CHECKPOINT?$AA@			; `string'
PUBLIC	??_C@_05PHOA@CLOSE?$AA@				; `string'
PUBLIC	??_C@_09GMHN@CLUSTERED?$AA@			; `string'
PUBLIC	??_C@_08DMIM@COALESCE?$AA@			; `string'
PUBLIC	??_C@_07HABJ@COLLATE?$AA@			; `string'
PUBLIC	??_C@_09JEOK@COLLATION?$AA@			; `string'
PUBLIC	??_C@_06LGEH@COLUMN?$AA@			; `string'
PUBLIC	??_C@_06NAIG@COMMIT?$AA@			; `string'
PUBLIC	??_C@_09BMPB@COMMITTED?$AA@			; `string'
PUBLIC	??_C@_07FDPF@COMPUTE?$AA@			; `string'
PUBLIC	??_C@_07ODJF@CONFIRM?$AA@			; `string'
PUBLIC	??_C@_07DKLG@CONNECT?$AA@			; `string'
PUBLIC	??_C@_0L@ICLB@CONNECTION?$AA@			; `string'
PUBLIC	??_C@_0L@LNCA@CONSTRAINT?$AA@			; `string'
PUBLIC	??_C@_0M@GMLE@CONSTRAINTS?$AA@			; `string'
PUBLIC	??_C@_08HDIP@CONTINUE?$AA@			; `string'
PUBLIC	??_C@_0L@BOLK@CONTROLROW?$AA@			; `string'
PUBLIC	??_C@_07DJAE@CONVERT?$AA@			; `string'
PUBLIC	??_C@_0O@MOMH@CORRESPONDING?$AA@		; `string'
PUBLIC	??_C@_05BNPO@COUNT?$AA@				; `string'
PUBLIC	??_C@_07CCFH@COUNTER?$AA@			; `string'
PUBLIC	??_C@_06JBCM@CREATE?$AA@			; `string'
PUBLIC	??_C@_05BLP@CROSS?$AA@				; `string'
PUBLIC	??_C@_08CHBF@CURRENCY?$AA@			; `string'
PUBLIC	??_C@_07HGLC@CURRENT?$AA@			; `string'
PUBLIC	??_C@_0N@NEAE@CURRENT_DATE?$AA@			; `string'
PUBLIC	??_C@_0N@NIMH@CURRENT_TIME?$AA@			; `string'
PUBLIC	??_C@_0BC@GGBA@CURRENT_TIMESTAMP?$AA@		; `string'
PUBLIC	??_C@_0N@KBKG@CURRENT_USER?$AA@			; `string'
PUBLIC	??_C@_06MDJJ@CURSOR?$AA@			; `string'
PUBLIC	??_C@_08PKHN@DATABASE?$AA@			; `string'
PUBLIC	??_C@_04CJNM@DATE?$AA@				; `string'
PUBLIC	??_C@_08MIJC@DATETIME?$AA@			; `string'
PUBLIC	??_C@_03IDGA@DAY?$AA@				; `string'
PUBLIC	??_C@_06OPFP@DBAREA?$AA@			; `string'
PUBLIC	??_C@_04CLGJ@DBCC?$AA@				; `string'
PUBLIC	??_C@_0L@JGIO@DEALLOCATE?$AA@			; `string'
PUBLIC	??_C@_05DAPA@DEBUG?$AA@				; `string'
PUBLIC	??_C@_07CJJP@DECLARE?$AA@			; `string'
PUBLIC	??_C@_07FBHA@DEFAULT?$AA@			; `string'
PUBLIC	??_C@_0L@POBB@DEFERRABLE?$AA@			; `string'
PUBLIC	??_C@_08IEEN@DEFERRED?$AA@			; `string'
;	COMDAT ??_C@_01A@?$AA?$AA@
_BSS	SEGMENT
??_C@_01A@?$AA?$AA@ DB 02H DUP (?)			; `string'
_BSS	ENDS
_DATA	SEGMENT
_szReservedName DD FLAT:??_C@_08DFNL@ABSOLUTE?$AA@
	DD	FLAT:??_C@_06LHNJ@ACTION?$AA@
	DD	FLAT:??_C@_03CICP@ADD?$AA@
	DD	FLAT:??_C@_03MJMD@ALL?$AA@
	DD	FLAT:??_C@_08HG@ALLOCATE?$AA@
	DD	FLAT:??_C@_0N@NNIC@ALPHANUMERIC?$AA@
	DD	FLAT:??_C@_05BBIN@ALTER?$AA@
	DD	FLAT:??_C@_03LACO@AND?$AA@
	DD	FLAT:??_C@_03ENCN@ANY?$AA@
	DD	FLAT:??_C@_03JPOO@ARE?$AA@
	DD	FLAT:??_C@_02EPAG@AS?$AA@
	DD	FLAT:??_C@_03HGDG@ASC?$AA@
	DD	FLAT:??_C@_09HNNJ@ASSERTION?$AA@
	DD	FLAT:??_C@_02BKOD@AT?$AA@
	DD	FLAT:??_C@_0O@MMGM@AUTHORIZATION?$AA@
	DD	FLAT:??_C@_0O@DFOG@AUTOINCREMENT?$AA@
	DD	FLAT:??_C@_03JAGK@AVG?$AA@
	DD	FLAT:??_C@_05JBBL@BEGIN?$AA@
	DD	FLAT:??_C@_07FEKN@BETWEEN?$AA@
	DD	FLAT:??_C@_06ICJB@BINARY?$AA@
	DD	FLAT:??_C@_03IODA@BIT?$AA@
	DD	FLAT:??_C@_07HLBB@BOOLEAN?$AA@
	DD	FLAT:??_C@_04NOIB@BOTH?$AA@
	DD	FLAT:??_C@_05CPDG@BREAK?$AA@
	DD	FLAT:??_C@_06MIPA@BROWSE?$AA@
	DD	FLAT:??_C@_04OLDH@BULK?$AA@
	DD	FLAT:??_C@_02HFGP@BY?$AA@
	DD	FLAT:??_C@_04EHOP@BYTE?$AA@
	DD	FLAT:??_C@_07HJNK@CASCADE?$AA@
	DD	FLAT:??_C@_08GIOF@CASCADED?$AA@
	DD	FLAT:??_C@_04LCDH@CASE?$AA@
	DD	FLAT:??_C@_04LBNA@CAST?$AA@
	DD	FLAT:??_C@_07CPI@CATALOG?$AA@
	DD	FLAT:??_C@_04MLPN@CHAR?$AA@
	DD	FLAT:??_C@_09MNBH@CHARACTER?$AA@
	DD	FLAT:??_C@_0BB@LGJP@CHARACTER_LENGTH?$AA@
	DD	FLAT:??_C@_0M@OBEF@CHAR_LENGTH?$AA@
	DD	FLAT:??_C@_05JHFD@CHECK?$AA@
	DD	FLAT:??_C@_0L@CINA@CHECKPOINT?$AA@
	DD	FLAT:??_C@_05PHOA@CLOSE?$AA@
	DD	FLAT:??_C@_09GMHN@CLUSTERED?$AA@
	DD	FLAT:??_C@_08DMIM@COALESCE?$AA@
	DD	FLAT:??_C@_07HABJ@COLLATE?$AA@
	DD	FLAT:??_C@_09JEOK@COLLATION?$AA@
	DD	FLAT:??_C@_06LGEH@COLUMN?$AA@
	DD	FLAT:??_C@_06NAIG@COMMIT?$AA@
	DD	FLAT:??_C@_09BMPB@COMMITTED?$AA@
	DD	FLAT:??_C@_07FDPF@COMPUTE?$AA@
	DD	FLAT:??_C@_07ODJF@CONFIRM?$AA@
	DD	FLAT:??_C@_07DKLG@CONNECT?$AA@
	DD	FLAT:??_C@_0L@ICLB@CONNECTION?$AA@
	DD	FLAT:??_C@_0L@LNCA@CONSTRAINT?$AA@
	DD	FLAT:??_C@_0M@GMLE@CONSTRAINTS?$AA@
	DD	FLAT:??_C@_08HDIP@CONTINUE?$AA@
	DD	FLAT:??_C@_0L@BOLK@CONTROLROW?$AA@
	DD	FLAT:??_C@_07DJAE@CONVERT?$AA@
	DD	FLAT:??_C@_0O@MOMH@CORRESPONDING?$AA@
	DD	FLAT:??_C@_05BNPO@COUNT?$AA@
	DD	FLAT:??_C@_07CCFH@COUNTER?$AA@
	DD	FLAT:??_C@_06JBCM@CREATE?$AA@
	DD	FLAT:??_C@_05BLP@CROSS?$AA@
	DD	FLAT:??_C@_08CHBF@CURRENCY?$AA@
	DD	FLAT:??_C@_07HGLC@CURRENT?$AA@
	DD	FLAT:??_C@_0N@NEAE@CURRENT_DATE?$AA@
	DD	FLAT:??_C@_0N@NIMH@CURRENT_TIME?$AA@
	DD	FLAT:??_C@_0BC@GGBA@CURRENT_TIMESTAMP?$AA@
	DD	FLAT:??_C@_0N@KBKG@CURRENT_USER?$AA@
	DD	FLAT:??_C@_06MDJJ@CURSOR?$AA@
	DD	FLAT:??_C@_08PKHN@DATABASE?$AA@
	DD	FLAT:??_C@_04CJNM@DATE?$AA@
	DD	FLAT:??_C@_08MIJC@DATETIME?$AA@
	DD	FLAT:??_C@_03IDGA@DAY?$AA@
	DD	FLAT:??_C@_06OPFP@DBAREA?$AA@
	DD	FLAT:??_C@_04CLGJ@DBCC?$AA@
	DD	FLAT:??_C@_0L@JGIO@DEALLOCATE?$AA@
	DD	FLAT:??_C@_05DAPA@DEBUG?$AA@
	DD	FLAT:??_C@_07CJJP@DECLARE?$AA@
	DD	FLAT:??_C@_07FBHA@DEFAULT?$AA@
	DD	FLAT:??_C@_0L@POBB@DEFERRABLE?$AA@
	DD	FLAT:??_C@_08IEEN@DEFERRED?$AA@
	DD	FLAT:??_C@_06FMHL@DELETE?$AA@
	DD	FLAT:??_C@_04PPKB@DESC?$AA@
	DD	FLAT:??_C@_08FBJG@DESCRIBE?$AA@
	DD	FLAT:??_C@_0L@GKAF@DESCRIPTOR?$AA@
	DD	FLAT:??_C@_0M@OKKK@DIAGNOSTICS?$AA@
	DD	FLAT:??_C@_08GADM@DISALLOW?$AA@
	DD	FLAT:??_C@_0L@OGBA@DISCONNECT?$AA@
	DD	FLAT:??_C@_04HDPG@DISK?$AA@
	DD	FLAT:??_C@_08EGKJ@DISTINCT?$AA@
	DD	FLAT:??_C@_0M@EMHJ@DISTINCTROW?$AA@
	DD	FLAT:??_C@_0M@ONJI@DISTRIBUTED?$AA@
	DD	FLAT:??_C@_06EIOP@DOMAIN?$AA@
	DD	FLAT:??_C@_06CGGE@DOUBLE?$AA@
	DD	FLAT:??_C@_04LDDE@DROP?$AA@
	DD	FLAT:??_C@_05JGEC@DUMMY?$AA@
	DD	FLAT:??_C@_04CAAA@DUMP?$AA@
	DD	FLAT:??_C@_04OHCC@ELSE?$AA@
	DD	FLAT:??_C@_03PIHE@END?$AA@
	DD	FLAT:??_C@_08GNOH@END_EXEC?$AA@
	DD	FLAT:??_C@_03LKIC@EQV?$AA@
	DD	FLAT:??_C@_06BKPA@ERRLVL?$AA@
	DD	FLAT:??_C@_09EIBF@ERROREXIT?$AA@
	DD	FLAT:??_C@_06MJIP@ESCAPE?$AA@
	DD	FLAT:??_C@_06GDHH@EXCEPT?$AA@
	DD	FLAT:??_C@_09EEOO@EXCEPTION?$AA@
	DD	FLAT:??_C@_04GMDG@EXEC?$AA@
	DD	FLAT:??_C@_07DNBH@EXECUTE?$AA@
	DD	FLAT:??_C@_06MBBB@EXISTS?$AA@
	DD	FLAT:??_C@_04HPFN@EXIT?$AA@
	DD	FLAT:??_C@_0L@ILPO@EXPIREDATE?$AA@
	DD	FLAT:??_C@_08EDIC@EXTERNAL?$AA@
	DD	FLAT:??_C@_07IODP@EXTRACT?$AA@
	DD	FLAT:??_C@_05LLOB@FALSE?$AA@
	DD	FLAT:??_C@_05KBKM@FETCH?$AA@
	DD	FLAT:??_C@_04CMDA@FILE?$AA@
	DD	FLAT:??_C@_0L@NPIO@FILLFACTOR?$AA@
	DD	FLAT:??_C@_05MPDO@FIRST?$AA@
	DD	FLAT:??_C@_05JDEL@FLOAT?$AA@
	DD	FLAT:??_C@_06FFP@FLOAT4?$AA@
	DD	FLAT:??_C@_06PLLL@FLOAT8?$AA@
	DD	FLAT:??_C@_06IPNK@FLOPPY?$AA@
	DD	FLAT:??_C@_03EOOH@FOR?$AA@
	DD	FLAT:??_C@_07ECFK@FOREIGN?$AA@
	DD	FLAT:??_C@_04EJD@FROM?$AA@
	DD	FLAT:??_C@_04CLJK@FULL?$AA@
	DD	FLAT:??_C@_03HLIC@GET?$AA@
	DD	FLAT:??_C@_0L@PODI@GETDEFAULT?$AA@
	DD	FLAT:??_C@_06EKIF@GLOBAL?$AA@
	DD	FLAT:??_C@_04DLHO@GOTO?$AA@
	DD	FLAT:??_C@_05DLPA@GRANT?$AA@
	DD	FLAT:??_C@_05JGM@GROUP?$AA@
	DD	FLAT:??_C@_04BGHA@GUID?$AA@
	DD	FLAT:??_C@_06GNBD@HAVING?$AA@
	DD	FLAT:??_C@_08JHAN@HOLDLOCK?$AA@
	DD	FLAT:??_C@_04PJ@HOUR?$AA@
	DD	FLAT:??_C@_08MFJF@IDENTITY?$AA@
	DD	FLAT:??_C@_0M@EOA@IDENTITYCOL?$AA@
	DD	FLAT:??_C@_0BA@JADB@IDENTITY_INSERT?$AA@
	DD	FLAT:??_C@_0L@CMNP@IEEEDOUBLE?$AA@
	DD	FLAT:??_C@_0L@FEGJ@IEEESINGLE?$AA@
	DD	FLAT:??_C@_02FDOJ@IF?$AA@
	DD	FLAT:??_C@_06HLND@IGNORE?$AA@
	DD	FLAT:??_C@_09LEPP@IMMEDIATE?$AA@
	DD	FLAT:??_C@_03BIEI@IMP?$AA@
	DD	FLAT:??_C@_02HFB@IN?$AA@
	DD	FLAT:??_C@_05HKPP@INDEX?$AA@
	DD	FLAT:??_C@_09BAOC@INITIALLY?$AA@
	DD	FLAT:??_C@_05EPPB@INNER?$AA@
	DD	FLAT:??_C@_05IHIC@INPUT?$AA@
	DD	FLAT:??_C@_0M@PDHJ@INSENSITIVE?$AA@
	DD	FLAT:??_C@_06CCAI@INSERT?$AA@
	DD	FLAT:??_C@_03IJOL@INT?$AA@
	DD	FLAT:??_C@_07KMGD@INTEGER?$AA@
	DD	FLAT:??_C@_08PEKL@INTEGER1?$AA@
	DD	FLAT:??_C@_08LBC@INTEGER2?$AA@
	DD	FLAT:??_C@_09GIDA@INTERSECT?$AA@
	DD	FLAT:??_C@_08JNLE@INTERVAL?$AA@
	DD	FLAT:??_C@_04JMBE@INTO?$AA@
	DD	FLAT:??_C@_02PKFC@IS?$AA@
	DD	FLAT:??_C@_09JCKC@ISOLATION?$AA@
	DD	FLAT:??_C@_04JIJO@JOIN?$AA@
	DD	FLAT:??_C@_03PHBO@KEY?$AA@
	DD	FLAT:??_C@_04EIJF@KILL?$AA@
	DD	FLAT:??_C@_04GBPO@LAST?$AA@
	DD	FLAT:??_C@_07HHCE@LEADING?$AA@
	DD	FLAT:??_C@_04PAN@LEFT?$AA@
	DD	FLAT:??_C@_05JJEC@LEVEL?$AA@
	DD	FLAT:??_C@_04CNFB@LIKE?$AA@
	DD	FLAT:??_C@_06MJFP@LINENO?$AA@
	DD	FLAT:??_C@_04PDLA@LOAD?$AA@
	DD	FLAT:??_C@_05JIPK@LOCAL?$AA@
	DD	FLAT:??_C@_07OAKI@LOGICAL?$AA@
	DD	FLAT:??_C@_08KCOH@LOGICAL1?$AA@
	DD	FLAT:??_C@_04NIAI@LONG?$AA@
	DD	FLAT:??_C@_0L@GKBM@LONGBINARY?$AA@
	DD	FLAT:??_C@_08HLJO@LONGTEXT?$AA@
	DD	FLAT:??_C@_05NFKB@MATCH?$AA@
	DD	FLAT:??_C@_03OLFE@MAX?$AA@
	DD	FLAT:??_C@_04KGIF@MEMO?$AA@
	DD	FLAT:??_C@_03IAC@MIN?$AA@
	DD	FLAT:??_C@_06IOKL@MINUTE?$AA@
	DD	FLAT:??_C@_0L@GNDP@MIRROREXIT?$AA@
	DD	FLAT:??_C@_03HOGL@MOD?$AA@
	DD	FLAT:??_C@_05EBDH@MONEY?$AA@
	DD	FLAT:??_C@_05DOND@MONTH?$AA@
	DD	FLAT:??_C@_05KDIJ@NAMES?$AA@
	DD	FLAT:??_C@_08CHPD@NATIONAL?$AA@
	DD	FLAT:??_C@_07BGPN@NATURAL?$AA@
	DD	FLAT:??_C@_05DFM@NCHAR?$AA@
	DD	FLAT:??_C@_04ONKL@NEXT?$AA@
	DD	FLAT:??_C@_07NAJC@NEXTLOG?$AA@
	DD	FLAT:??_C@_02MMJD@NO?$AA@
	DD	FLAT:??_C@_07IMID@NOCHECK?$AA@
	DD	FLAT:??_C@_0N@NJNJ@NONCLUSTERED?$AA@
	DD	FLAT:??_C@_03CBCA@NOT?$AA@
	DD	FLAT:??_C@_04DFCK@NOTE?$AA@
	DD	FLAT:??_C@_04BAK@NULL?$AA@
	DD	FLAT:??_C@_06HGII@NULLIF?$AA@
	DD	FLAT:??_C@_06MDMK@NUMBER?$AA@
	DD	FLAT:??_C@_07FIAN@NUMERIC?$AA@
	DD	FLAT:??_C@_0N@PBNP@OCTET_LENGTH?$AA@
	DD	FLAT:??_C@_02CEBG@OF?$AA@
	DD	FLAT:??_C@_03CMJG@OFF?$AA@
	DD	FLAT:??_C@_07FMHE@OFFSETS?$AA@
	DD	FLAT:??_C@_09GMOF@OLEOBJECT?$AA@
	DD	FLAT:??_C@_02HAKO@ON?$AA@
	DD	FLAT:??_C@_04EJJC@ONCE?$AA@
	DD	FLAT:??_C@_04MKAH@ONLY?$AA@
	DD	FLAT:??_C@_04MIME@OPEN?$AA@
	DD	FLAT:??_C@_06IFCC@OPTION?$AA@
	DD	FLAT:??_C@_02CHDK@OR?$AA@
	DD	FLAT:??_C@_05FBEP@ORDER?$AA@
	DD	FLAT:??_C@_05IKJL@OUTER?$AA@
	DD	FLAT:??_C@_06BMBF@OUTPUT?$AA@
	DD	FLAT:??_C@_04HDCH@OVER?$AA@
	DD	FLAT:??_C@_08PGNB@OVERLAPS?$AA@
	DD	FLAT:??_C@_0M@GPH@OWNERACCESS?$AA@
	DD	FLAT:??_C@_03BHFD@PAD?$AA@
	DD	FLAT:??_C@_0L@PEIP@PARAMETERS?$AA@
	DD	FLAT:??_C@_07MOBO@PARTIAL?$AA@
	DD	FLAT:??_C@_07MGCH@PERCENT?$AA@
	DD	FLAT:??_C@_04ICKI@PERM?$AA@
	DD	FLAT:??_C@_09JLAF@PERMANENT?$AA@
	DD	FLAT:??_C@_04CDKK@PIPE?$AA@
	DD	FLAT:??_C@_05MALJ@PIVOT?$AA@
	DD	FLAT:??_C@_04OOOE@PLAN?$AA@
	DD	FLAT:??_C@_08BGJK@POSITION?$AA@
	DD	FLAT:??_C@_09LJHE@PRECISION?$AA@
	DD	FLAT:??_C@_07OCNH@PREPARE?$AA@
	DD	FLAT:??_C@_07JPNB@PRESEVE?$AA@
	DD	FLAT:??_C@_07PLFH@PRIMARY?$AA@
	DD	FLAT:??_C@_05MJOK@PRINT?$AA@
	DD	FLAT:??_C@_05CADC@PRIOR?$AA@
	DD	FLAT:??_C@_0L@IFKE@PRIVILEGES?$AA@
	DD	FLAT:??_C@_04CFJE@PROC?$AA@
	DD	FLAT:??_C@_09HPKL@PROCEDURE?$AA@
	DD	FLAT:??_C@_0M@CNCJ@PROCESSEXIT?$AA@
	DD	FLAT:??_C@_06JPM@PUBLIC?$AA@
	DD	FLAT:??_C@_09EHBK@RAISERROR?$AA@
	DD	FLAT:??_C@_04GHHF@READ?$AA@
	DD	FLAT:??_C@_08IEGM@READTEXT?$AA@
	DD	FLAT:??_C@_04DDMN@REAL?$AA@
	DD	FLAT:??_C@_0M@CLEO@RECONFIGURE?$AA@
	DD	FLAT:??_C@_0L@DHND@REFERENCES?$AA@
	DD	FLAT:??_C@_08NDFO@RELATIVE?$AA@
	DD	FLAT:??_C@_0L@DEIL@REPEATABLE?$AA@
	DD	FLAT:??_C@_0M@GBCL@REPLICATION?$AA@
	DD	FLAT:??_C@_08BEHK@RESTRICT?$AA@
	DD	FLAT:??_C@_09NACH@RETAINDAY?$AA@
	DD	FLAT:??_C@_06PJJM@RETURN?$AA@
	DD	FLAT:??_C@_06MEJM@REVOKE?$AA@
	DD	FLAT:??_C@_05JCNK@RIGHT?$AA@
	DD	FLAT:??_C@_08EMFJ@ROLLBACK?$AA@
	DD	FLAT:??_C@_08MGKJ@ROWCOUNT?$AA@
	DD	FLAT:??_C@_04LCCO@ROWS?$AA@
	DD	FLAT:??_C@_04BFNM@RULE?$AA@
	DD	FLAT:??_C@_04KLBG@SAVE?$AA@
	DD	FLAT:??_C@_06NIIF@SCHEMA?$AA@
	DD	FLAT:??_C@_06JLNB@SCROLL?$AA@
	DD	FLAT:??_C@_06FCJA@SECOND?$AA@
	DD	FLAT:??_C@_06OGAC@SELECT?$AA@
	DD	FLAT:??_C@_0N@CCJF@SERIALIZABLE?$AA@
	DD	FLAT:??_C@_07CGDO@SESSION?$AA@
	DD	FLAT:??_C@_0N@JGA@SESSION_USER?$AA@
	DD	FLAT:??_C@_03BCLC@SET?$AA@
	DD	FLAT:??_C@_07EDEP@SETUSER?$AA@
	DD	FLAT:??_C@_05HFLA@SHORT?$AA@
	DD	FLAT:??_C@_08DPKF@SHUTDOWN?$AA@
	DD	FLAT:??_C@_06FONC@SINGLE?$AA@
	DD	FLAT:??_C@_04NEFN@SIZE?$AA@
	DD	FLAT:??_C@_08DMN@SMALLINT?$AA@
	DD	FLAT:??_C@_04DDNG@SOME?$AA@
	DD	FLAT:??_C@_05JCH@SPACE?$AA@
	DD	FLAT:??_C@_08DHID@SQLSTATE?$AA@
	DD	FLAT:??_C@_0L@JMMG@STATISTICS?$AA@
	DD	FLAT:??_C@_05KHBF@STDEV?$AA@
	DD	FLAT:??_C@_06OCBH@STDEVP?$AA@
	DD	FLAT:??_C@_06JDFN@STRING?$AA@
	DD	FLAT:??_C@_03CPEE@SUM?$AA@
	DD	FLAT:??_C@_0M@JBHB@SYSTEM_USER?$AA@
	DD	FLAT:??_C@_05DLJE@TABLE?$AA@
	DD	FLAT:??_C@_07DAKP@TABLEID?$AA@
	DD	FLAT:??_C@_04CGFH@TAPE?$AA@
	DD	FLAT:??_C@_04FEEL@TEMP?$AA@
	DD	FLAT:??_C@_09EAGL@TEMPORARY?$AA@
	DD	FLAT:??_C@_04NILO@TEXT?$AA@
	DD	FLAT:??_C@_08FIJO@TEXTSIZE?$AA@
	DD	FLAT:??_C@_04GJFM@THEN?$AA@
	DD	FLAT:??_C@_04CFBP@TIME?$AA@
	DD	FLAT:??_C@_09KEAG@TIMESTAMP?$AA@
	DD	FLAT:??_C@_0O@OCJA@TIMEZONE_HOUR?$AA@
	DD	FLAT:??_C@_0BA@OAII@TIMEZONE_MINUTE?$AA@
	DD	FLAT:??_C@_02DODL@TO?$AA@
	DD	FLAT:??_C@_03JOIO@TOP?$AA@
	DD	FLAT:??_C@_08NJGC@TRAILING?$AA@
	DD	FLAT:??_C@_04CGAE@TRAN?$AA@
	DD	FLAT:??_C@_0M@JACB@TRANSACTION?$AA@
	DD	FLAT:??_C@_09ECBO@TRANSFORM?$AA@
	DD	FLAT:??_C@_09HNKP@TRANSLATE?$AA@
	DD	FLAT:??_C@_0M@LOEK@TRANSLATION?$AA@
	DD	FLAT:??_C@_07GNLP@TRIGGER?$AA@
	DD	FLAT:??_C@_04LNAG@TRUE?$AA@
	DD	FLAT:??_C@_08FCAH@TRUNCATE?$AA@
	DD	FLAT:??_C@_07CODK@TSEQUAL?$AA@
	DD	FLAT:??_C@_0M@PJEA@UNCOMMITTED?$AA@
	DD	FLAT:??_C@_05LNOP@UNION?$AA@
	DD	FLAT:??_C@_06LNBM@UNIQUE?$AA@
	DD	FLAT:??_C@_07CNPM@UNKNOWN?$AA@
	DD	FLAT:??_C@_06NDPG@UPDATE?$AA@
	DD	FLAT:??_C@_0L@DPMH@UPDATETEXT?$AA@
	DD	FLAT:??_C@_05PMKE@USAGE?$AA@
	DD	FLAT:??_C@_03OAHE@USE?$AA@
	DD	FLAT:??_C@_04FMHO@USER?$AA@
	DD	FLAT:??_C@_05JKMB@USING?$AA@
	DD	FLAT:??_C@_05MOEL@VALUE?$AA@
	DD	FLAT:??_C@_06KGMH@VALUES?$AA@
	DD	FLAT:??_C@_03KNCG@VAR?$AA@
	DD	FLAT:??_C@_09OLDK@VARBINARY?$AA@
	DD	FLAT:??_C@_07NGFA@VARCHAR?$AA@
	DD	FLAT:??_C@_04OIBN@VARP?$AA@
	DD	FLAT:??_C@_07MMOJ@VARYING?$AA@
	DD	FLAT:??_C@_04CGLB@VIEW?$AA@
	DD	FLAT:??_C@_06IEGE@VOLUME?$AA@
	DD	FLAT:??_C@_07KCD@WAITFOR?$AA@
	DD	FLAT:??_C@_04GKK@WHEN?$AA@
	DD	FLAT:??_C@_05MCFK@WHERE?$AA@
	DD	FLAT:??_C@_05LCLH@WHILE?$AA@
	DD	FLAT:??_C@_04NHMN@WITH?$AA@
	DD	FLAT:??_C@_04LDPM@WORK?$AA@
	DD	FLAT:??_C@_05FIFP@WRITE?$AA@
	DD	FLAT:??_C@_09IKOB@WRITETEXT?$AA@
	DD	FLAT:??_C@_03BDEP@XOR?$AA@
	DD	FLAT:??_C@_04HEBB@YEAR?$AA@
	DD	FLAT:??_C@_05NAPJ@YESNO?$AA@
	DD	FLAT:??_C@_04HOL@ZONE?$AA@
	DD	FLAT:??_C@_01A@?$AA?$AA@
_DATA	ENDS
;	COMDAT ??_C@_08DFNL@ABSOLUTE?$AA@
_DATA	SEGMENT
??_C@_08DFNL@ABSOLUTE?$AA@ DB 'ABSOLUTE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06LHNJ@ACTION?$AA@
_DATA	SEGMENT
??_C@_06LHNJ@ACTION?$AA@ DB 'ACTION', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03CICP@ADD?$AA@
_DATA	SEGMENT
??_C@_03CICP@ADD?$AA@ DB 'ADD', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03MJMD@ALL?$AA@
_DATA	SEGMENT
??_C@_03MJMD@ALL?$AA@ DB 'ALL', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08HG@ALLOCATE?$AA@
_DATA	SEGMENT
??_C@_08HG@ALLOCATE?$AA@ DB 'ALLOCATE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@NNIC@ALPHANUMERIC?$AA@
_DATA	SEGMENT
??_C@_0N@NNIC@ALPHANUMERIC?$AA@ DB 'ALPHANUMERIC', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05BBIN@ALTER?$AA@
_DATA	SEGMENT
??_C@_05BBIN@ALTER?$AA@ DB 'ALTER', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03LACO@AND?$AA@
_DATA	SEGMENT
??_C@_03LACO@AND?$AA@ DB 'AND', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03ENCN@ANY?$AA@
_DATA	SEGMENT
??_C@_03ENCN@ANY?$AA@ DB 'ANY', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03JPOO@ARE?$AA@
_DATA	SEGMENT
??_C@_03JPOO@ARE?$AA@ DB 'ARE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02EPAG@AS?$AA@
_DATA	SEGMENT
??_C@_02EPAG@AS?$AA@ DB 'AS', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03HGDG@ASC?$AA@
_DATA	SEGMENT
??_C@_03HGDG@ASC?$AA@ DB 'ASC', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09HNNJ@ASSERTION?$AA@
_DATA	SEGMENT
??_C@_09HNNJ@ASSERTION?$AA@ DB 'ASSERTION', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_02BKOD@AT?$AA@
_DATA	SEGMENT
??_C@_02BKOD@AT?$AA@ DB 'AT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@MMGM@AUTHORIZATION?$AA@
_DATA	SEGMENT
??_C@_0O@MMGM@AUTHORIZATION?$AA@ DB 'AUTHORIZATION', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@DFOG@AUTOINCREMENT?$AA@
_DATA	SEGMENT
??_C@_0O@DFOG@AUTOINCREMENT?$AA@ DB 'AUTOINCREMENT', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_03JAGK@AVG?$AA@
_DATA	SEGMENT
??_C@_03JAGK@AVG?$AA@ DB 'AVG', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05JBBL@BEGIN?$AA@
_DATA	SEGMENT
??_C@_05JBBL@BEGIN?$AA@ DB 'BEGIN', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07FEKN@BETWEEN?$AA@
_DATA	SEGMENT
??_C@_07FEKN@BETWEEN?$AA@ DB 'BETWEEN', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06ICJB@BINARY?$AA@
_DATA	SEGMENT
??_C@_06ICJB@BINARY?$AA@ DB 'BINARY', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03IODA@BIT?$AA@
_DATA	SEGMENT
??_C@_03IODA@BIT?$AA@ DB 'BIT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07HLBB@BOOLEAN?$AA@
_DATA	SEGMENT
??_C@_07HLBB@BOOLEAN?$AA@ DB 'BOOLEAN', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04NOIB@BOTH?$AA@
_DATA	SEGMENT
??_C@_04NOIB@BOTH?$AA@ DB 'BOTH', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05CPDG@BREAK?$AA@
_DATA	SEGMENT
??_C@_05CPDG@BREAK?$AA@ DB 'BREAK', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06MIPA@BROWSE?$AA@
_DATA	SEGMENT
??_C@_06MIPA@BROWSE?$AA@ DB 'BROWSE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04OLDH@BULK?$AA@
_DATA	SEGMENT
??_C@_04OLDH@BULK?$AA@ DB 'BULK', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02HFGP@BY?$AA@
_DATA	SEGMENT
??_C@_02HFGP@BY?$AA@ DB 'BY', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04EHOP@BYTE?$AA@
_DATA	SEGMENT
??_C@_04EHOP@BYTE?$AA@ DB 'BYTE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07HJNK@CASCADE?$AA@
_DATA	SEGMENT
??_C@_07HJNK@CASCADE?$AA@ DB 'CASCADE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08GIOF@CASCADED?$AA@
_DATA	SEGMENT
??_C@_08GIOF@CASCADED?$AA@ DB 'CASCADED', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04LCDH@CASE?$AA@
_DATA	SEGMENT
??_C@_04LCDH@CASE?$AA@ DB 'CASE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04LBNA@CAST?$AA@
_DATA	SEGMENT
??_C@_04LBNA@CAST?$AA@ DB 'CAST', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07CPI@CATALOG?$AA@
_DATA	SEGMENT
??_C@_07CPI@CATALOG?$AA@ DB 'CATALOG', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04MLPN@CHAR?$AA@
_DATA	SEGMENT
??_C@_04MLPN@CHAR?$AA@ DB 'CHAR', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09MNBH@CHARACTER?$AA@
_DATA	SEGMENT
??_C@_09MNBH@CHARACTER?$AA@ DB 'CHARACTER', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@LGJP@CHARACTER_LENGTH?$AA@
_DATA	SEGMENT
??_C@_0BB@LGJP@CHARACTER_LENGTH?$AA@ DB 'CHARACTER_LENGTH', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@OBEF@CHAR_LENGTH?$AA@
_DATA	SEGMENT
??_C@_0M@OBEF@CHAR_LENGTH?$AA@ DB 'CHAR_LENGTH', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05JHFD@CHECK?$AA@
_DATA	SEGMENT
??_C@_05JHFD@CHECK?$AA@ DB 'CHECK', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@CINA@CHECKPOINT?$AA@
_DATA	SEGMENT
??_C@_0L@CINA@CHECKPOINT?$AA@ DB 'CHECKPOINT', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05PHOA@CLOSE?$AA@
_DATA	SEGMENT
??_C@_05PHOA@CLOSE?$AA@ DB 'CLOSE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09GMHN@CLUSTERED?$AA@
_DATA	SEGMENT
??_C@_09GMHN@CLUSTERED?$AA@ DB 'CLUSTERED', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08DMIM@COALESCE?$AA@
_DATA	SEGMENT
??_C@_08DMIM@COALESCE?$AA@ DB 'COALESCE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07HABJ@COLLATE?$AA@
_DATA	SEGMENT
??_C@_07HABJ@COLLATE?$AA@ DB 'COLLATE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09JEOK@COLLATION?$AA@
_DATA	SEGMENT
??_C@_09JEOK@COLLATION?$AA@ DB 'COLLATION', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06LGEH@COLUMN?$AA@
_DATA	SEGMENT
??_C@_06LGEH@COLUMN?$AA@ DB 'COLUMN', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06NAIG@COMMIT?$AA@
_DATA	SEGMENT
??_C@_06NAIG@COMMIT?$AA@ DB 'COMMIT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09BMPB@COMMITTED?$AA@
_DATA	SEGMENT
??_C@_09BMPB@COMMITTED?$AA@ DB 'COMMITTED', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07FDPF@COMPUTE?$AA@
_DATA	SEGMENT
??_C@_07FDPF@COMPUTE?$AA@ DB 'COMPUTE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07ODJF@CONFIRM?$AA@
_DATA	SEGMENT
??_C@_07ODJF@CONFIRM?$AA@ DB 'CONFIRM', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07DKLG@CONNECT?$AA@
_DATA	SEGMENT
??_C@_07DKLG@CONNECT?$AA@ DB 'CONNECT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@ICLB@CONNECTION?$AA@
_DATA	SEGMENT
??_C@_0L@ICLB@CONNECTION?$AA@ DB 'CONNECTION', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@LNCA@CONSTRAINT?$AA@
_DATA	SEGMENT
??_C@_0L@LNCA@CONSTRAINT?$AA@ DB 'CONSTRAINT', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@GMLE@CONSTRAINTS?$AA@
_DATA	SEGMENT
??_C@_0M@GMLE@CONSTRAINTS?$AA@ DB 'CONSTRAINTS', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08HDIP@CONTINUE?$AA@
_DATA	SEGMENT
??_C@_08HDIP@CONTINUE?$AA@ DB 'CONTINUE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@BOLK@CONTROLROW?$AA@
_DATA	SEGMENT
??_C@_0L@BOLK@CONTROLROW?$AA@ DB 'CONTROLROW', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_07DJAE@CONVERT?$AA@
_DATA	SEGMENT
??_C@_07DJAE@CONVERT?$AA@ DB 'CONVERT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@MOMH@CORRESPONDING?$AA@
_DATA	SEGMENT
??_C@_0O@MOMH@CORRESPONDING?$AA@ DB 'CORRESPONDING', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_05BNPO@COUNT?$AA@
_DATA	SEGMENT
??_C@_05BNPO@COUNT?$AA@ DB 'COUNT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07CCFH@COUNTER?$AA@
_DATA	SEGMENT
??_C@_07CCFH@COUNTER?$AA@ DB 'COUNTER', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06JBCM@CREATE?$AA@
_DATA	SEGMENT
??_C@_06JBCM@CREATE?$AA@ DB 'CREATE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05BLP@CROSS?$AA@
_DATA	SEGMENT
??_C@_05BLP@CROSS?$AA@ DB 'CROSS', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08CHBF@CURRENCY?$AA@
_DATA	SEGMENT
??_C@_08CHBF@CURRENCY?$AA@ DB 'CURRENCY', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07HGLC@CURRENT?$AA@
_DATA	SEGMENT
??_C@_07HGLC@CURRENT?$AA@ DB 'CURRENT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@NEAE@CURRENT_DATE?$AA@
_DATA	SEGMENT
??_C@_0N@NEAE@CURRENT_DATE?$AA@ DB 'CURRENT_DATE', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@NIMH@CURRENT_TIME?$AA@
_DATA	SEGMENT
??_C@_0N@NIMH@CURRENT_TIME?$AA@ DB 'CURRENT_TIME', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@GGBA@CURRENT_TIMESTAMP?$AA@
_DATA	SEGMENT
??_C@_0BC@GGBA@CURRENT_TIMESTAMP?$AA@ DB 'CURRENT_TIMESTAMP', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@KBKG@CURRENT_USER?$AA@
_DATA	SEGMENT
??_C@_0N@KBKG@CURRENT_USER?$AA@ DB 'CURRENT_USER', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_06MDJJ@CURSOR?$AA@
_DATA	SEGMENT
??_C@_06MDJJ@CURSOR?$AA@ DB 'CURSOR', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08PKHN@DATABASE?$AA@
_DATA	SEGMENT
??_C@_08PKHN@DATABASE?$AA@ DB 'DATABASE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CJNM@DATE?$AA@
_DATA	SEGMENT
??_C@_04CJNM@DATE?$AA@ DB 'DATE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08MIJC@DATETIME?$AA@
_DATA	SEGMENT
??_C@_08MIJC@DATETIME?$AA@ DB 'DATETIME', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03IDGA@DAY?$AA@
_DATA	SEGMENT
??_C@_03IDGA@DAY?$AA@ DB 'DAY', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06OPFP@DBAREA?$AA@
_DATA	SEGMENT
??_C@_06OPFP@DBAREA?$AA@ DB 'DBAREA', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CLGJ@DBCC?$AA@
_DATA	SEGMENT
??_C@_04CLGJ@DBCC?$AA@ DB 'DBCC', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@JGIO@DEALLOCATE?$AA@
_DATA	SEGMENT
??_C@_0L@JGIO@DEALLOCATE?$AA@ DB 'DEALLOCATE', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05DAPA@DEBUG?$AA@
_DATA	SEGMENT
??_C@_05DAPA@DEBUG?$AA@ DB 'DEBUG', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07CJJP@DECLARE?$AA@
_DATA	SEGMENT
??_C@_07CJJP@DECLARE?$AA@ DB 'DECLARE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07FBHA@DEFAULT?$AA@
_DATA	SEGMENT
??_C@_07FBHA@DEFAULT?$AA@ DB 'DEFAULT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@POBB@DEFERRABLE?$AA@
_DATA	SEGMENT
??_C@_0L@POBB@DEFERRABLE?$AA@ DB 'DEFERRABLE', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08IEEN@DEFERRED?$AA@
_DATA	SEGMENT
??_C@_08IEEN@DEFERRED?$AA@ DB 'DEFERRED', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06FMHL@DELETE?$AA@
_DATA	SEGMENT
??_C@_06FMHL@DELETE?$AA@ DB 'DELETE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04PPKB@DESC?$AA@
_DATA	SEGMENT
??_C@_04PPKB@DESC?$AA@ DB 'DESC', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08FBJG@DESCRIBE?$AA@
_DATA	SEGMENT
??_C@_08FBJG@DESCRIBE?$AA@ DB 'DESCRIBE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@GKAF@DESCRIPTOR?$AA@
_DATA	SEGMENT
??_C@_0L@GKAF@DESCRIPTOR?$AA@ DB 'DESCRIPTOR', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@OKKK@DIAGNOSTICS?$AA@
_DATA	SEGMENT
??_C@_0M@OKKK@DIAGNOSTICS?$AA@ DB 'DIAGNOSTICS', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08GADM@DISALLOW?$AA@
_DATA	SEGMENT
??_C@_08GADM@DISALLOW?$AA@ DB 'DISALLOW', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@OGBA@DISCONNECT?$AA@
_DATA	SEGMENT
??_C@_0L@OGBA@DISCONNECT?$AA@ DB 'DISCONNECT', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_04HDPG@DISK?$AA@
_DATA	SEGMENT
??_C@_04HDPG@DISK?$AA@ DB 'DISK', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08EGKJ@DISTINCT?$AA@
_DATA	SEGMENT
??_C@_08EGKJ@DISTINCT?$AA@ DB 'DISTINCT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@EMHJ@DISTINCTROW?$AA@
_DATA	SEGMENT
??_C@_0M@EMHJ@DISTINCTROW?$AA@ DB 'DISTINCTROW', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@ONJI@DISTRIBUTED?$AA@
_DATA	SEGMENT
??_C@_0M@ONJI@DISTRIBUTED?$AA@ DB 'DISTRIBUTED', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_06EIOP@DOMAIN?$AA@
_DATA	SEGMENT
??_C@_06EIOP@DOMAIN?$AA@ DB 'DOMAIN', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06CGGE@DOUBLE?$AA@
_DATA	SEGMENT
??_C@_06CGGE@DOUBLE?$AA@ DB 'DOUBLE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04LDDE@DROP?$AA@
_DATA	SEGMENT
??_C@_04LDDE@DROP?$AA@ DB 'DROP', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05JGEC@DUMMY?$AA@
_DATA	SEGMENT
??_C@_05JGEC@DUMMY?$AA@ DB 'DUMMY', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CAAA@DUMP?$AA@
_DATA	SEGMENT
??_C@_04CAAA@DUMP?$AA@ DB 'DUMP', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04OHCC@ELSE?$AA@
_DATA	SEGMENT
??_C@_04OHCC@ELSE?$AA@ DB 'ELSE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03PIHE@END?$AA@
_DATA	SEGMENT
??_C@_03PIHE@END?$AA@ DB 'END', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08GNOH@END_EXEC?$AA@
_DATA	SEGMENT
??_C@_08GNOH@END_EXEC?$AA@ DB 'END_EXEC', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03LKIC@EQV?$AA@
_DATA	SEGMENT
??_C@_03LKIC@EQV?$AA@ DB 'EQV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06BKPA@ERRLVL?$AA@
_DATA	SEGMENT
??_C@_06BKPA@ERRLVL?$AA@ DB 'ERRLVL', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09EIBF@ERROREXIT?$AA@
_DATA	SEGMENT
??_C@_09EIBF@ERROREXIT?$AA@ DB 'ERROREXIT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06MJIP@ESCAPE?$AA@
_DATA	SEGMENT
??_C@_06MJIP@ESCAPE?$AA@ DB 'ESCAPE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06GDHH@EXCEPT?$AA@
_DATA	SEGMENT
??_C@_06GDHH@EXCEPT?$AA@ DB 'EXCEPT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09EEOO@EXCEPTION?$AA@
_DATA	SEGMENT
??_C@_09EEOO@EXCEPTION?$AA@ DB 'EXCEPTION', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04GMDG@EXEC?$AA@
_DATA	SEGMENT
??_C@_04GMDG@EXEC?$AA@ DB 'EXEC', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07DNBH@EXECUTE?$AA@
_DATA	SEGMENT
??_C@_07DNBH@EXECUTE?$AA@ DB 'EXECUTE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06MBBB@EXISTS?$AA@
_DATA	SEGMENT
??_C@_06MBBB@EXISTS?$AA@ DB 'EXISTS', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04HPFN@EXIT?$AA@
_DATA	SEGMENT
??_C@_04HPFN@EXIT?$AA@ DB 'EXIT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@ILPO@EXPIREDATE?$AA@
_DATA	SEGMENT
??_C@_0L@ILPO@EXPIREDATE?$AA@ DB 'EXPIREDATE', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08EDIC@EXTERNAL?$AA@
_DATA	SEGMENT
??_C@_08EDIC@EXTERNAL?$AA@ DB 'EXTERNAL', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07IODP@EXTRACT?$AA@
_DATA	SEGMENT
??_C@_07IODP@EXTRACT?$AA@ DB 'EXTRACT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05LLOB@FALSE?$AA@
_DATA	SEGMENT
??_C@_05LLOB@FALSE?$AA@ DB 'FALSE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05KBKM@FETCH?$AA@
_DATA	SEGMENT
??_C@_05KBKM@FETCH?$AA@ DB 'FETCH', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CMDA@FILE?$AA@
_DATA	SEGMENT
??_C@_04CMDA@FILE?$AA@ DB 'FILE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@NPIO@FILLFACTOR?$AA@
_DATA	SEGMENT
??_C@_0L@NPIO@FILLFACTOR?$AA@ DB 'FILLFACTOR', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MPDO@FIRST?$AA@
_DATA	SEGMENT
??_C@_05MPDO@FIRST?$AA@ DB 'FIRST', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05JDEL@FLOAT?$AA@
_DATA	SEGMENT
??_C@_05JDEL@FLOAT?$AA@ DB 'FLOAT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06FFP@FLOAT4?$AA@
_DATA	SEGMENT
??_C@_06FFP@FLOAT4?$AA@ DB 'FLOAT4', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06PLLL@FLOAT8?$AA@
_DATA	SEGMENT
??_C@_06PLLL@FLOAT8?$AA@ DB 'FLOAT8', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06IPNK@FLOPPY?$AA@
_DATA	SEGMENT
??_C@_06IPNK@FLOPPY?$AA@ DB 'FLOPPY', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03EOOH@FOR?$AA@
_DATA	SEGMENT
??_C@_03EOOH@FOR?$AA@ DB 'FOR', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07ECFK@FOREIGN?$AA@
_DATA	SEGMENT
??_C@_07ECFK@FOREIGN?$AA@ DB 'FOREIGN', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04EJD@FROM?$AA@
_DATA	SEGMENT
??_C@_04EJD@FROM?$AA@ DB 'FROM', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CLJK@FULL?$AA@
_DATA	SEGMENT
??_C@_04CLJK@FULL?$AA@ DB 'FULL', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03HLIC@GET?$AA@
_DATA	SEGMENT
??_C@_03HLIC@GET?$AA@ DB 'GET', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@PODI@GETDEFAULT?$AA@
_DATA	SEGMENT
??_C@_0L@PODI@GETDEFAULT?$AA@ DB 'GETDEFAULT', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_06EKIF@GLOBAL?$AA@
_DATA	SEGMENT
??_C@_06EKIF@GLOBAL?$AA@ DB 'GLOBAL', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04DLHO@GOTO?$AA@
_DATA	SEGMENT
??_C@_04DLHO@GOTO?$AA@ DB 'GOTO', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05DLPA@GRANT?$AA@
_DATA	SEGMENT
??_C@_05DLPA@GRANT?$AA@ DB 'GRANT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05JGM@GROUP?$AA@
_DATA	SEGMENT
??_C@_05JGM@GROUP?$AA@ DB 'GROUP', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04BGHA@GUID?$AA@
_DATA	SEGMENT
??_C@_04BGHA@GUID?$AA@ DB 'GUID', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06GNBD@HAVING?$AA@
_DATA	SEGMENT
??_C@_06GNBD@HAVING?$AA@ DB 'HAVING', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08JHAN@HOLDLOCK?$AA@
_DATA	SEGMENT
??_C@_08JHAN@HOLDLOCK?$AA@ DB 'HOLDLOCK', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04PJ@HOUR?$AA@
_DATA	SEGMENT
??_C@_04PJ@HOUR?$AA@ DB 'HOUR', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08MFJF@IDENTITY?$AA@
_DATA	SEGMENT
??_C@_08MFJF@IDENTITY?$AA@ DB 'IDENTITY', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@EOA@IDENTITYCOL?$AA@
_DATA	SEGMENT
??_C@_0M@EOA@IDENTITYCOL?$AA@ DB 'IDENTITYCOL', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@JADB@IDENTITY_INSERT?$AA@
_DATA	SEGMENT
??_C@_0BA@JADB@IDENTITY_INSERT?$AA@ DB 'IDENTITY_INSERT', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@CMNP@IEEEDOUBLE?$AA@
_DATA	SEGMENT
??_C@_0L@CMNP@IEEEDOUBLE?$AA@ DB 'IEEEDOUBLE', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@FEGJ@IEEESINGLE?$AA@
_DATA	SEGMENT
??_C@_0L@FEGJ@IEEESINGLE?$AA@ DB 'IEEESINGLE', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_02FDOJ@IF?$AA@
_DATA	SEGMENT
??_C@_02FDOJ@IF?$AA@ DB 'IF', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06HLND@IGNORE?$AA@
_DATA	SEGMENT
??_C@_06HLND@IGNORE?$AA@ DB 'IGNORE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09LEPP@IMMEDIATE?$AA@
_DATA	SEGMENT
??_C@_09LEPP@IMMEDIATE?$AA@ DB 'IMMEDIATE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03BIEI@IMP?$AA@
_DATA	SEGMENT
??_C@_03BIEI@IMP?$AA@ DB 'IMP', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02HFB@IN?$AA@
_DATA	SEGMENT
??_C@_02HFB@IN?$AA@ DB 'IN', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05HKPP@INDEX?$AA@
_DATA	SEGMENT
??_C@_05HKPP@INDEX?$AA@ DB 'INDEX', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09BAOC@INITIALLY?$AA@
_DATA	SEGMENT
??_C@_09BAOC@INITIALLY?$AA@ DB 'INITIALLY', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05EPPB@INNER?$AA@
_DATA	SEGMENT
??_C@_05EPPB@INNER?$AA@ DB 'INNER', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05IHIC@INPUT?$AA@
_DATA	SEGMENT
??_C@_05IHIC@INPUT?$AA@ DB 'INPUT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@PDHJ@INSENSITIVE?$AA@
_DATA	SEGMENT
??_C@_0M@PDHJ@INSENSITIVE?$AA@ DB 'INSENSITIVE', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_06CCAI@INSERT?$AA@
_DATA	SEGMENT
??_C@_06CCAI@INSERT?$AA@ DB 'INSERT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03IJOL@INT?$AA@
_DATA	SEGMENT
??_C@_03IJOL@INT?$AA@ DB 'INT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07KMGD@INTEGER?$AA@
_DATA	SEGMENT
??_C@_07KMGD@INTEGER?$AA@ DB 'INTEGER', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08PEKL@INTEGER1?$AA@
_DATA	SEGMENT
??_C@_08PEKL@INTEGER1?$AA@ DB 'INTEGER1', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08LBC@INTEGER2?$AA@
_DATA	SEGMENT
??_C@_08LBC@INTEGER2?$AA@ DB 'INTEGER2', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09GIDA@INTERSECT?$AA@
_DATA	SEGMENT
??_C@_09GIDA@INTERSECT?$AA@ DB 'INTERSECT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08JNLE@INTERVAL?$AA@
_DATA	SEGMENT
??_C@_08JNLE@INTERVAL?$AA@ DB 'INTERVAL', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04JMBE@INTO?$AA@
_DATA	SEGMENT
??_C@_04JMBE@INTO?$AA@ DB 'INTO', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02PKFC@IS?$AA@
_DATA	SEGMENT
??_C@_02PKFC@IS?$AA@ DB 'IS', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09JCKC@ISOLATION?$AA@
_DATA	SEGMENT
??_C@_09JCKC@ISOLATION?$AA@ DB 'ISOLATION', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04JIJO@JOIN?$AA@
_DATA	SEGMENT
??_C@_04JIJO@JOIN?$AA@ DB 'JOIN', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03PHBO@KEY?$AA@
_DATA	SEGMENT
??_C@_03PHBO@KEY?$AA@ DB 'KEY', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04EIJF@KILL?$AA@
_DATA	SEGMENT
??_C@_04EIJF@KILL?$AA@ DB 'KILL', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04GBPO@LAST?$AA@
_DATA	SEGMENT
??_C@_04GBPO@LAST?$AA@ DB 'LAST', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07HHCE@LEADING?$AA@
_DATA	SEGMENT
??_C@_07HHCE@LEADING?$AA@ DB 'LEADING', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04PAN@LEFT?$AA@
_DATA	SEGMENT
??_C@_04PAN@LEFT?$AA@ DB 'LEFT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05JJEC@LEVEL?$AA@
_DATA	SEGMENT
??_C@_05JJEC@LEVEL?$AA@ DB 'LEVEL', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CNFB@LIKE?$AA@
_DATA	SEGMENT
??_C@_04CNFB@LIKE?$AA@ DB 'LIKE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06MJFP@LINENO?$AA@
_DATA	SEGMENT
??_C@_06MJFP@LINENO?$AA@ DB 'LINENO', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04PDLA@LOAD?$AA@
_DATA	SEGMENT
??_C@_04PDLA@LOAD?$AA@ DB 'LOAD', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05JIPK@LOCAL?$AA@
_DATA	SEGMENT
??_C@_05JIPK@LOCAL?$AA@ DB 'LOCAL', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07OAKI@LOGICAL?$AA@
_DATA	SEGMENT
??_C@_07OAKI@LOGICAL?$AA@ DB 'LOGICAL', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08KCOH@LOGICAL1?$AA@
_DATA	SEGMENT
??_C@_08KCOH@LOGICAL1?$AA@ DB 'LOGICAL1', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04NIAI@LONG?$AA@
_DATA	SEGMENT
??_C@_04NIAI@LONG?$AA@ DB 'LONG', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@GKBM@LONGBINARY?$AA@
_DATA	SEGMENT
??_C@_0L@GKBM@LONGBINARY?$AA@ DB 'LONGBINARY', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08HLJO@LONGTEXT?$AA@
_DATA	SEGMENT
??_C@_08HLJO@LONGTEXT?$AA@ DB 'LONGTEXT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05NFKB@MATCH?$AA@
_DATA	SEGMENT
??_C@_05NFKB@MATCH?$AA@ DB 'MATCH', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03OLFE@MAX?$AA@
_DATA	SEGMENT
??_C@_03OLFE@MAX?$AA@ DB 'MAX', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04KGIF@MEMO?$AA@
_DATA	SEGMENT
??_C@_04KGIF@MEMO?$AA@ DB 'MEMO', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03IAC@MIN?$AA@
_DATA	SEGMENT
??_C@_03IAC@MIN?$AA@ DB 'MIN', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06IOKL@MINUTE?$AA@
_DATA	SEGMENT
??_C@_06IOKL@MINUTE?$AA@ DB 'MINUTE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@GNDP@MIRROREXIT?$AA@
_DATA	SEGMENT
??_C@_0L@GNDP@MIRROREXIT?$AA@ DB 'MIRROREXIT', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_03HOGL@MOD?$AA@
_DATA	SEGMENT
??_C@_03HOGL@MOD?$AA@ DB 'MOD', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05EBDH@MONEY?$AA@
_DATA	SEGMENT
??_C@_05EBDH@MONEY?$AA@ DB 'MONEY', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05DOND@MONTH?$AA@
_DATA	SEGMENT
??_C@_05DOND@MONTH?$AA@ DB 'MONTH', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05KDIJ@NAMES?$AA@
_DATA	SEGMENT
??_C@_05KDIJ@NAMES?$AA@ DB 'NAMES', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08CHPD@NATIONAL?$AA@
_DATA	SEGMENT
??_C@_08CHPD@NATIONAL?$AA@ DB 'NATIONAL', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07BGPN@NATURAL?$AA@
_DATA	SEGMENT
??_C@_07BGPN@NATURAL?$AA@ DB 'NATURAL', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05DFM@NCHAR?$AA@
_DATA	SEGMENT
??_C@_05DFM@NCHAR?$AA@ DB 'NCHAR', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04ONKL@NEXT?$AA@
_DATA	SEGMENT
??_C@_04ONKL@NEXT?$AA@ DB 'NEXT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07NAJC@NEXTLOG?$AA@
_DATA	SEGMENT
??_C@_07NAJC@NEXTLOG?$AA@ DB 'NEXTLOG', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_02MMJD@NO?$AA@
_DATA	SEGMENT
??_C@_02MMJD@NO?$AA@ DB 'NO', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07IMID@NOCHECK?$AA@
_DATA	SEGMENT
??_C@_07IMID@NOCHECK?$AA@ DB 'NOCHECK', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@NJNJ@NONCLUSTERED?$AA@
_DATA	SEGMENT
??_C@_0N@NJNJ@NONCLUSTERED?$AA@ DB 'NONCLUSTERED', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_03CBCA@NOT?$AA@
_DATA	SEGMENT
??_C@_03CBCA@NOT?$AA@ DB 'NOT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04DFCK@NOTE?$AA@
_DATA	SEGMENT
??_C@_04DFCK@NOTE?$AA@ DB 'NOTE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04BAK@NULL?$AA@
_DATA	SEGMENT
??_C@_04BAK@NULL?$AA@ DB 'NULL', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06HGII@NULLIF?$AA@
_DATA	SEGMENT
??_C@_06HGII@NULLIF?$AA@ DB 'NULLIF', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06MDMK@NUMBER?$AA@
_DATA	SEGMENT
??_C@_06MDMK@NUMBER?$AA@ DB 'NUMBER', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07FIAN@NUMERIC?$AA@
_DATA	SEGMENT
??_C@_07FIAN@NUMERIC?$AA@ DB 'NUMERIC', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@PBNP@OCTET_LENGTH?$AA@
_DATA	SEGMENT
??_C@_0N@PBNP@OCTET_LENGTH?$AA@ DB 'OCTET_LENGTH', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_02CEBG@OF?$AA@
_DATA	SEGMENT
??_C@_02CEBG@OF?$AA@ DB 'OF', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03CMJG@OFF?$AA@
_DATA	SEGMENT
??_C@_03CMJG@OFF?$AA@ DB 'OFF', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07FMHE@OFFSETS?$AA@
_DATA	SEGMENT
??_C@_07FMHE@OFFSETS?$AA@ DB 'OFFSETS', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09GMOF@OLEOBJECT?$AA@
_DATA	SEGMENT
??_C@_09GMOF@OLEOBJECT?$AA@ DB 'OLEOBJECT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_02HAKO@ON?$AA@
_DATA	SEGMENT
??_C@_02HAKO@ON?$AA@ DB 'ON', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04EJJC@ONCE?$AA@
_DATA	SEGMENT
??_C@_04EJJC@ONCE?$AA@ DB 'ONCE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04MKAH@ONLY?$AA@
_DATA	SEGMENT
??_C@_04MKAH@ONLY?$AA@ DB 'ONLY', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04MIME@OPEN?$AA@
_DATA	SEGMENT
??_C@_04MIME@OPEN?$AA@ DB 'OPEN', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06IFCC@OPTION?$AA@
_DATA	SEGMENT
??_C@_06IFCC@OPTION?$AA@ DB 'OPTION', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_02CHDK@OR?$AA@
_DATA	SEGMENT
??_C@_02CHDK@OR?$AA@ DB 'OR', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05FBEP@ORDER?$AA@
_DATA	SEGMENT
??_C@_05FBEP@ORDER?$AA@ DB 'ORDER', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05IKJL@OUTER?$AA@
_DATA	SEGMENT
??_C@_05IKJL@OUTER?$AA@ DB 'OUTER', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06BMBF@OUTPUT?$AA@
_DATA	SEGMENT
??_C@_06BMBF@OUTPUT?$AA@ DB 'OUTPUT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04HDCH@OVER?$AA@
_DATA	SEGMENT
??_C@_04HDCH@OVER?$AA@ DB 'OVER', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08PGNB@OVERLAPS?$AA@
_DATA	SEGMENT
??_C@_08PGNB@OVERLAPS?$AA@ DB 'OVERLAPS', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@GPH@OWNERACCESS?$AA@
_DATA	SEGMENT
??_C@_0M@GPH@OWNERACCESS?$AA@ DB 'OWNERACCESS', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_03BHFD@PAD?$AA@
_DATA	SEGMENT
??_C@_03BHFD@PAD?$AA@ DB 'PAD', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@PEIP@PARAMETERS?$AA@
_DATA	SEGMENT
??_C@_0L@PEIP@PARAMETERS?$AA@ DB 'PARAMETERS', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_07MOBO@PARTIAL?$AA@
_DATA	SEGMENT
??_C@_07MOBO@PARTIAL?$AA@ DB 'PARTIAL', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07MGCH@PERCENT?$AA@
_DATA	SEGMENT
??_C@_07MGCH@PERCENT?$AA@ DB 'PERCENT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04ICKI@PERM?$AA@
_DATA	SEGMENT
??_C@_04ICKI@PERM?$AA@ DB 'PERM', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09JLAF@PERMANENT?$AA@
_DATA	SEGMENT
??_C@_09JLAF@PERMANENT?$AA@ DB 'PERMANENT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CDKK@PIPE?$AA@
_DATA	SEGMENT
??_C@_04CDKK@PIPE?$AA@ DB 'PIPE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MALJ@PIVOT?$AA@
_DATA	SEGMENT
??_C@_05MALJ@PIVOT?$AA@ DB 'PIVOT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04OOOE@PLAN?$AA@
_DATA	SEGMENT
??_C@_04OOOE@PLAN?$AA@ DB 'PLAN', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08BGJK@POSITION?$AA@
_DATA	SEGMENT
??_C@_08BGJK@POSITION?$AA@ DB 'POSITION', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09LJHE@PRECISION?$AA@
_DATA	SEGMENT
??_C@_09LJHE@PRECISION?$AA@ DB 'PRECISION', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07OCNH@PREPARE?$AA@
_DATA	SEGMENT
??_C@_07OCNH@PREPARE?$AA@ DB 'PREPARE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07JPNB@PRESEVE?$AA@
_DATA	SEGMENT
??_C@_07JPNB@PRESEVE?$AA@ DB 'PRESEVE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07PLFH@PRIMARY?$AA@
_DATA	SEGMENT
??_C@_07PLFH@PRIMARY?$AA@ DB 'PRIMARY', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MJOK@PRINT?$AA@
_DATA	SEGMENT
??_C@_05MJOK@PRINT?$AA@ DB 'PRINT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05CADC@PRIOR?$AA@
_DATA	SEGMENT
??_C@_05CADC@PRIOR?$AA@ DB 'PRIOR', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@IFKE@PRIVILEGES?$AA@
_DATA	SEGMENT
??_C@_0L@IFKE@PRIVILEGES?$AA@ DB 'PRIVILEGES', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CFJE@PROC?$AA@
_DATA	SEGMENT
??_C@_04CFJE@PROC?$AA@ DB 'PROC', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09HPKL@PROCEDURE?$AA@
_DATA	SEGMENT
??_C@_09HPKL@PROCEDURE?$AA@ DB 'PROCEDURE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@CNCJ@PROCESSEXIT?$AA@
_DATA	SEGMENT
??_C@_0M@CNCJ@PROCESSEXIT?$AA@ DB 'PROCESSEXIT', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_06JPM@PUBLIC?$AA@
_DATA	SEGMENT
??_C@_06JPM@PUBLIC?$AA@ DB 'PUBLIC', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09EHBK@RAISERROR?$AA@
_DATA	SEGMENT
??_C@_09EHBK@RAISERROR?$AA@ DB 'RAISERROR', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04GHHF@READ?$AA@
_DATA	SEGMENT
??_C@_04GHHF@READ?$AA@ DB 'READ', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08IEGM@READTEXT?$AA@
_DATA	SEGMENT
??_C@_08IEGM@READTEXT?$AA@ DB 'READTEXT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04DDMN@REAL?$AA@
_DATA	SEGMENT
??_C@_04DDMN@REAL?$AA@ DB 'REAL', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@CLEO@RECONFIGURE?$AA@
_DATA	SEGMENT
??_C@_0M@CLEO@RECONFIGURE?$AA@ DB 'RECONFIGURE', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@DHND@REFERENCES?$AA@
_DATA	SEGMENT
??_C@_0L@DHND@REFERENCES?$AA@ DB 'REFERENCES', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08NDFO@RELATIVE?$AA@
_DATA	SEGMENT
??_C@_08NDFO@RELATIVE?$AA@ DB 'RELATIVE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@DEIL@REPEATABLE?$AA@
_DATA	SEGMENT
??_C@_0L@DEIL@REPEATABLE?$AA@ DB 'REPEATABLE', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@GBCL@REPLICATION?$AA@
_DATA	SEGMENT
??_C@_0M@GBCL@REPLICATION?$AA@ DB 'REPLICATION', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_08BEHK@RESTRICT?$AA@
_DATA	SEGMENT
??_C@_08BEHK@RESTRICT?$AA@ DB 'RESTRICT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09NACH@RETAINDAY?$AA@
_DATA	SEGMENT
??_C@_09NACH@RETAINDAY?$AA@ DB 'RETAINDAY', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06PJJM@RETURN?$AA@
_DATA	SEGMENT
??_C@_06PJJM@RETURN?$AA@ DB 'RETURN', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06MEJM@REVOKE?$AA@
_DATA	SEGMENT
??_C@_06MEJM@REVOKE?$AA@ DB 'REVOKE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05JCNK@RIGHT?$AA@
_DATA	SEGMENT
??_C@_05JCNK@RIGHT?$AA@ DB 'RIGHT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08EMFJ@ROLLBACK?$AA@
_DATA	SEGMENT
??_C@_08EMFJ@ROLLBACK?$AA@ DB 'ROLLBACK', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08MGKJ@ROWCOUNT?$AA@
_DATA	SEGMENT
??_C@_08MGKJ@ROWCOUNT?$AA@ DB 'ROWCOUNT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04LCCO@ROWS?$AA@
_DATA	SEGMENT
??_C@_04LCCO@ROWS?$AA@ DB 'ROWS', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04BFNM@RULE?$AA@
_DATA	SEGMENT
??_C@_04BFNM@RULE?$AA@ DB 'RULE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04KLBG@SAVE?$AA@
_DATA	SEGMENT
??_C@_04KLBG@SAVE?$AA@ DB 'SAVE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06NIIF@SCHEMA?$AA@
_DATA	SEGMENT
??_C@_06NIIF@SCHEMA?$AA@ DB 'SCHEMA', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06JLNB@SCROLL?$AA@
_DATA	SEGMENT
??_C@_06JLNB@SCROLL?$AA@ DB 'SCROLL', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06FCJA@SECOND?$AA@
_DATA	SEGMENT
??_C@_06FCJA@SECOND?$AA@ DB 'SECOND', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06OGAC@SELECT?$AA@
_DATA	SEGMENT
??_C@_06OGAC@SELECT?$AA@ DB 'SELECT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@CCJF@SERIALIZABLE?$AA@
_DATA	SEGMENT
??_C@_0N@CCJF@SERIALIZABLE?$AA@ DB 'SERIALIZABLE', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_07CGDO@SESSION?$AA@
_DATA	SEGMENT
??_C@_07CGDO@SESSION?$AA@ DB 'SESSION', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@JGA@SESSION_USER?$AA@
_DATA	SEGMENT
??_C@_0N@JGA@SESSION_USER?$AA@ DB 'SESSION_USER', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_03BCLC@SET?$AA@
_DATA	SEGMENT
??_C@_03BCLC@SET?$AA@ DB 'SET', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07EDEP@SETUSER?$AA@
_DATA	SEGMENT
??_C@_07EDEP@SETUSER?$AA@ DB 'SETUSER', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05HFLA@SHORT?$AA@
_DATA	SEGMENT
??_C@_05HFLA@SHORT?$AA@ DB 'SHORT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08DPKF@SHUTDOWN?$AA@
_DATA	SEGMENT
??_C@_08DPKF@SHUTDOWN?$AA@ DB 'SHUTDOWN', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06FONC@SINGLE?$AA@
_DATA	SEGMENT
??_C@_06FONC@SINGLE?$AA@ DB 'SINGLE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04NEFN@SIZE?$AA@
_DATA	SEGMENT
??_C@_04NEFN@SIZE?$AA@ DB 'SIZE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08DMN@SMALLINT?$AA@
_DATA	SEGMENT
??_C@_08DMN@SMALLINT?$AA@ DB 'SMALLINT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04DDNG@SOME?$AA@
_DATA	SEGMENT
??_C@_04DDNG@SOME?$AA@ DB 'SOME', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05JCH@SPACE?$AA@
_DATA	SEGMENT
??_C@_05JCH@SPACE?$AA@ DB 'SPACE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08DHID@SQLSTATE?$AA@
_DATA	SEGMENT
??_C@_08DHID@SQLSTATE?$AA@ DB 'SQLSTATE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@JMMG@STATISTICS?$AA@
_DATA	SEGMENT
??_C@_0L@JMMG@STATISTICS?$AA@ DB 'STATISTICS', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05KHBF@STDEV?$AA@
_DATA	SEGMENT
??_C@_05KHBF@STDEV?$AA@ DB 'STDEV', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06OCBH@STDEVP?$AA@
_DATA	SEGMENT
??_C@_06OCBH@STDEVP?$AA@ DB 'STDEVP', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06JDFN@STRING?$AA@
_DATA	SEGMENT
??_C@_06JDFN@STRING?$AA@ DB 'STRING', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03CPEE@SUM?$AA@
_DATA	SEGMENT
??_C@_03CPEE@SUM?$AA@ DB 'SUM', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@JBHB@SYSTEM_USER?$AA@
_DATA	SEGMENT
??_C@_0M@JBHB@SYSTEM_USER?$AA@ DB 'SYSTEM_USER', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05DLJE@TABLE?$AA@
_DATA	SEGMENT
??_C@_05DLJE@TABLE?$AA@ DB 'TABLE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07DAKP@TABLEID?$AA@
_DATA	SEGMENT
??_C@_07DAKP@TABLEID?$AA@ DB 'TABLEID', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CGFH@TAPE?$AA@
_DATA	SEGMENT
??_C@_04CGFH@TAPE?$AA@ DB 'TAPE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04FEEL@TEMP?$AA@
_DATA	SEGMENT
??_C@_04FEEL@TEMP?$AA@ DB 'TEMP', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09EAGL@TEMPORARY?$AA@
_DATA	SEGMENT
??_C@_09EAGL@TEMPORARY?$AA@ DB 'TEMPORARY', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04NILO@TEXT?$AA@
_DATA	SEGMENT
??_C@_04NILO@TEXT?$AA@ DB 'TEXT', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08FIJO@TEXTSIZE?$AA@
_DATA	SEGMENT
??_C@_08FIJO@TEXTSIZE?$AA@ DB 'TEXTSIZE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04GJFM@THEN?$AA@
_DATA	SEGMENT
??_C@_04GJFM@THEN?$AA@ DB 'THEN', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CFBP@TIME?$AA@
_DATA	SEGMENT
??_C@_04CFBP@TIME?$AA@ DB 'TIME', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09KEAG@TIMESTAMP?$AA@
_DATA	SEGMENT
??_C@_09KEAG@TIMESTAMP?$AA@ DB 'TIMESTAMP', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@OCJA@TIMEZONE_HOUR?$AA@
_DATA	SEGMENT
??_C@_0O@OCJA@TIMEZONE_HOUR?$AA@ DB 'TIMEZONE_HOUR', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@OAII@TIMEZONE_MINUTE?$AA@
_DATA	SEGMENT
??_C@_0BA@OAII@TIMEZONE_MINUTE?$AA@ DB 'TIMEZONE_MINUTE', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_02DODL@TO?$AA@
_DATA	SEGMENT
??_C@_02DODL@TO?$AA@ DB 'TO', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03JOIO@TOP?$AA@
_DATA	SEGMENT
??_C@_03JOIO@TOP?$AA@ DB 'TOP', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08NJGC@TRAILING?$AA@
_DATA	SEGMENT
??_C@_08NJGC@TRAILING?$AA@ DB 'TRAILING', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CGAE@TRAN?$AA@
_DATA	SEGMENT
??_C@_04CGAE@TRAN?$AA@ DB 'TRAN', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@JACB@TRANSACTION?$AA@
_DATA	SEGMENT
??_C@_0M@JACB@TRANSACTION?$AA@ DB 'TRANSACTION', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09ECBO@TRANSFORM?$AA@
_DATA	SEGMENT
??_C@_09ECBO@TRANSFORM?$AA@ DB 'TRANSFORM', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09HNKP@TRANSLATE?$AA@
_DATA	SEGMENT
??_C@_09HNKP@TRANSLATE?$AA@ DB 'TRANSLATE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@LOEK@TRANSLATION?$AA@
_DATA	SEGMENT
??_C@_0M@LOEK@TRANSLATION?$AA@ DB 'TRANSLATION', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_07GNLP@TRIGGER?$AA@
_DATA	SEGMENT
??_C@_07GNLP@TRIGGER?$AA@ DB 'TRIGGER', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04LNAG@TRUE?$AA@
_DATA	SEGMENT
??_C@_04LNAG@TRUE?$AA@ DB 'TRUE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_08FCAH@TRUNCATE?$AA@
_DATA	SEGMENT
??_C@_08FCAH@TRUNCATE?$AA@ DB 'TRUNCATE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07CODK@TSEQUAL?$AA@
_DATA	SEGMENT
??_C@_07CODK@TSEQUAL?$AA@ DB 'TSEQUAL', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@PJEA@UNCOMMITTED?$AA@
_DATA	SEGMENT
??_C@_0M@PJEA@UNCOMMITTED?$AA@ DB 'UNCOMMITTED', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05LNOP@UNION?$AA@
_DATA	SEGMENT
??_C@_05LNOP@UNION?$AA@ DB 'UNION', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06LNBM@UNIQUE?$AA@
_DATA	SEGMENT
??_C@_06LNBM@UNIQUE?$AA@ DB 'UNIQUE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07CNPM@UNKNOWN?$AA@
_DATA	SEGMENT
??_C@_07CNPM@UNKNOWN?$AA@ DB 'UNKNOWN', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06NDPG@UPDATE?$AA@
_DATA	SEGMENT
??_C@_06NDPG@UPDATE?$AA@ DB 'UPDATE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@DPMH@UPDATETEXT?$AA@
_DATA	SEGMENT
??_C@_0L@DPMH@UPDATETEXT?$AA@ DB 'UPDATETEXT', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_05PMKE@USAGE?$AA@
_DATA	SEGMENT
??_C@_05PMKE@USAGE?$AA@ DB 'USAGE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_03OAHE@USE?$AA@
_DATA	SEGMENT
??_C@_03OAHE@USE?$AA@ DB 'USE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04FMHO@USER?$AA@
_DATA	SEGMENT
??_C@_04FMHO@USER?$AA@ DB 'USER', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05JKMB@USING?$AA@
_DATA	SEGMENT
??_C@_05JKMB@USING?$AA@ DB 'USING', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MOEL@VALUE?$AA@
_DATA	SEGMENT
??_C@_05MOEL@VALUE?$AA@ DB 'VALUE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06KGMH@VALUES?$AA@
_DATA	SEGMENT
??_C@_06KGMH@VALUES?$AA@ DB 'VALUES', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03KNCG@VAR?$AA@
_DATA	SEGMENT
??_C@_03KNCG@VAR?$AA@ DB 'VAR', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09OLDK@VARBINARY?$AA@
_DATA	SEGMENT
??_C@_09OLDK@VARBINARY?$AA@ DB 'VARBINARY', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07NGFA@VARCHAR?$AA@
_DATA	SEGMENT
??_C@_07NGFA@VARCHAR?$AA@ DB 'VARCHAR', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04OIBN@VARP?$AA@
_DATA	SEGMENT
??_C@_04OIBN@VARP?$AA@ DB 'VARP', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07MMOJ@VARYING?$AA@
_DATA	SEGMENT
??_C@_07MMOJ@VARYING?$AA@ DB 'VARYING', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04CGLB@VIEW?$AA@
_DATA	SEGMENT
??_C@_04CGLB@VIEW?$AA@ DB 'VIEW', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_06IEGE@VOLUME?$AA@
_DATA	SEGMENT
??_C@_06IEGE@VOLUME?$AA@ DB 'VOLUME', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07KCD@WAITFOR?$AA@
_DATA	SEGMENT
??_C@_07KCD@WAITFOR?$AA@ DB 'WAITFOR', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04GKK@WHEN?$AA@
_DATA	SEGMENT
??_C@_04GKK@WHEN?$AA@ DB 'WHEN', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MCFK@WHERE?$AA@
_DATA	SEGMENT
??_C@_05MCFK@WHERE?$AA@ DB 'WHERE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05LCLH@WHILE?$AA@
_DATA	SEGMENT
??_C@_05LCLH@WHILE?$AA@ DB 'WHILE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04NHMN@WITH?$AA@
_DATA	SEGMENT
??_C@_04NHMN@WITH?$AA@ DB 'WITH', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04LDPM@WORK?$AA@
_DATA	SEGMENT
??_C@_04LDPM@WORK?$AA@ DB 'WORK', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05FIFP@WRITE?$AA@
_DATA	SEGMENT
??_C@_05FIFP@WRITE?$AA@ DB 'WRITE', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_09IKOB@WRITETEXT?$AA@
_DATA	SEGMENT
??_C@_09IKOB@WRITETEXT?$AA@ DB 'WRITETEXT', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_03BDEP@XOR?$AA@
_DATA	SEGMENT
??_C@_03BDEP@XOR?$AA@ DB 'XOR', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04HEBB@YEAR?$AA@
_DATA	SEGMENT
??_C@_04HEBB@YEAR?$AA@ DB 'YEAR', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_05NAPJ@YESNO?$AA@
_DATA	SEGMENT
??_C@_05NAPJ@YESNO?$AA@ DB 'YESNO', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04HOL@ZONE?$AA@
_DATA	SEGMENT
??_C@_04HOL@ZONE?$AA@ DB 'ZONE', 00H			; `string'
_DATA	ENDS
PUBLIC	_fnBuildDropIndex@20
PUBLIC	??_C@_01FAJB@?$DL?$AA@				; `string'
PUBLIC	??_C@_0BJ@FNLO@DROP?5INDEX?5?$CFs?5ON?5?$CFs?$CFs?5?$CFs?$AA@ ; `string'
EXTRN	_SysWriteLine@12:NEAR
EXTRN	__imp__sprintf:NEAR
;	COMDAT ??_C@_01FAJB@?$DL?$AA@
; File C:\10C\a\oe\KZHSQLXB.C
_DATA	SEGMENT
??_C@_01FAJB@?$DL?$AA@ DB ';', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@FNLO@DROP?5INDEX?5?$CFs?5ON?5?$CFs?$CFs?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BJ@FNLO@DROP?5INDEX?5?$CFs?5ON?5?$CFs?$CFs?5?$CFs?$AA@ DB 'DROP IN'
	DB	'DEX %s ON %s%s %s', 00H			; `string'
_DATA	ENDS
_TEXT	SEGMENT
_lpTaskView$ = 8
_pchIndexName$ = 12
_pchOwner$ = 16
_pchTableName$ = 20
_f$ = 24
_szLine$ = -500
_fnBuildDropIndex@20 PROC NEAR

; 2330 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 500				; 000001f4H

; 2331 :    zCHAR szLine[ 500 ];
; 2332 : 
; 2333 :    #if defined( SQLSERVER )
; 2334 :       zsprintf( szLine, "DROP INDEX %s%s.%s %s",
; 2335 :                 pchOwner, pchTableName, pchIndexName, LINE_TERMINATOR );
; 2336 :    #else
; 2337 :       zsprintf( szLine, "DROP INDEX %s ON %s%s %s",
; 2338 :                 pchIndexName, pchOwner, pchTableName, LINE_TERMINATOR );

	push	OFFSET FLAT:??_C@_01FAJB@?$DL?$AA@	; `string'
	mov	eax, DWORD PTR _pchTableName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pchOwner$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pchIndexName$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0BJ@FNLO@DROP?5INDEX?5?$CFs?5ON?5?$CFs?$CFs?5?$CFs?$AA@ ; `string'
	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 24					; 00000018H

; 2339 :    #endif
; 2340 : 
; 2341 :    if ( fnWriteLine( lpTaskView, f, szLine ) < 0 )

	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpTaskView$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L30994

; 2342 :       return( -1 );

	or	ax, -1
	jmp	SHORT $L30990
$L30994:

; 2343 : 
; 2344 :    return( 0 );

	xor	ax, ax
$L30990:

; 2345 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_fnBuildDropIndex@20 ENDP
_TEXT	ENDS
PUBLIC	_fnBuildColumn@12
PUBLIC	??_C@_08IAKB@TZTEDBLO?$AA@			; `string'
PUBLIC	??_C@_04EALC@DBMS?$AA@				; `string'
PUBLIC	??_C@_0P@BCDD@TE_DBMS_Source?$AA@		; `string'
PUBLIC	??_C@_08DKGC@DBH_Data?$AA@			; `string'
PUBLIC	??_C@_01PCJP@Y?$AA@				; `string'
PUBLIC	??_C@_0BC@KJKI@TimestampAsString?$AA@		; `string'
PUBLIC	??_C@_04JENC@ODBC?$AA@				; `string'
PUBLIC	??_C@_0BE@GNCH@MaxColumnNameLength?$AA@		; `string'
PUBLIC	??_C@_04EFNI@Name?$AA@				; `string'
PUBLIC	??_C@_0BA@PJGE@TE_FieldDataRel?$AA@		; `string'
PUBLIC	??_C@_08FNON@DataType?$AA@			; `string'
PUBLIC	??_C@_04DOMO@?$CF?9?$CKs?$AA@			; `string'
PUBLIC	??_C@_06CAAP@Length?$AA@			; `string'
PUBLIC	??_C@_0BA@FENM@?5varchar?$CI?5?$CFld?5?$CJ?$AA@	; `string'
PUBLIC	??_C@_09CPOG@?5longblob?$AA@			; `string'
PUBLIC	??_C@_09IJHK@?5datetime?$AA@			; `string'
PUBLIC	??_C@_04OGMO@?5int?$AA@				; `string'
PUBLIC	??_C@_07CLFL@?5double?$AA@			; `string'
PUBLIC	??_C@_09DKHG@?5longtext?$AA@			; `string'
PUBLIC	??_C@_0BE@ODFA@DataOrRelfieldOrSet?$AA@		; `string'
PUBLIC	??_C@_0BG@NJGJ@?5INTEGER?5PRIMARY?5KEY?5?$AA@	; `string'
PUBLIC	??_C@_08KJLB@?5INTEGER?$AA@			; `string'
PUBLIC	??_C@_0P@HOC@?5varchar?$CI?536?5?$CJ?$AA@	; `string'
PUBLIC	??_C@_0P@OLJF@?5varchar?$CI?530?5?$CJ?$AA@	; `string'
PUBLIC	??_C@_0L@NCMM@TE_TablRec?$AA@			; `string'
PUBLIC	??_C@_0CK@EKKO@Invalid?5DataType?5?8?$CFs?8?5for?5attrib@ ; `string'
PUBLIC	??_C@_0BC@KEK@SQL?5DDL?5Generator?$AA@		; `string'
PUBLIC	??_C@_09LPMC@SQL_NULLS?$AA@			; `string'
PUBLIC	??_C@_08IDDA@NOT?5NULL?$AA@			; `string'
PUBLIC	??_C@_08FGIB@NULL?5?5?5?5?$AA@			; `string'
EXTRN	_GetIntegerFromAttribute@16:NEAR
EXTRN	_SysMessageBox@16:NEAR
EXTRN	_SetOI_FromBlob@28:NEAR
EXTRN	_CompareAttributeToString@16:NEAR
EXTRN	_GetAddrForAttribute@16:NEAR
EXTRN	_GetViewByName@16:NEAR
EXTRN	_DropView@4:NEAR
EXTRN	_strcat:NEAR
EXTRN	_strlen:NEAR
EXTRN	_SetCursorFirstEntityByAttr@28:NEAR
EXTRN	_GetStringFromAttribute@16:NEAR
;	COMDAT ??_C@_08IAKB@TZTEDBLO?$AA@
; File C:\10C\a\oe\KZHSQLXB.C
_DATA	SEGMENT
??_C@_08IAKB@TZTEDBLO?$AA@ DB 'TZTEDBLO', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04EALC@DBMS?$AA@
_DATA	SEGMENT
??_C@_04EALC@DBMS?$AA@ DB 'DBMS', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@BCDD@TE_DBMS_Source?$AA@
_DATA	SEGMENT
??_C@_0P@BCDD@TE_DBMS_Source?$AA@ DB 'TE_DBMS_Source', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_08DKGC@DBH_Data?$AA@
_DATA	SEGMENT
??_C@_08DKGC@DBH_Data?$AA@ DB 'DBH_Data', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PCJP@Y?$AA@
_DATA	SEGMENT
??_C@_01PCJP@Y?$AA@ DB 'Y', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@KJKI@TimestampAsString?$AA@
_DATA	SEGMENT
??_C@_0BC@KJKI@TimestampAsString?$AA@ DB 'TimestampAsString', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04JENC@ODBC?$AA@
_DATA	SEGMENT
??_C@_04JENC@ODBC?$AA@ DB 'ODBC', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@GNCH@MaxColumnNameLength?$AA@
_DATA	SEGMENT
??_C@_0BE@GNCH@MaxColumnNameLength?$AA@ DB 'MaxColumnNameLength', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04EFNI@Name?$AA@
_DATA	SEGMENT
??_C@_04EFNI@Name?$AA@ DB 'Name', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@PJGE@TE_FieldDataRel?$AA@
_DATA	SEGMENT
??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ DB 'TE_FieldDataRel', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_08FNON@DataType?$AA@
_DATA	SEGMENT
??_C@_08FNON@DataType?$AA@ DB 'DataType', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04DOMO@?$CF?9?$CKs?$AA@
_DATA	SEGMENT
??_C@_04DOMO@?$CF?9?$CKs?$AA@ DB '%-*s', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06CAAP@Length?$AA@
_DATA	SEGMENT
??_C@_06CAAP@Length?$AA@ DB 'Length', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FENM@?5varchar?$CI?5?$CFld?5?$CJ?$AA@
_DATA	SEGMENT
??_C@_0BA@FENM@?5varchar?$CI?5?$CFld?5?$CJ?$AA@ DB ' varchar( %ld )', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09CPOG@?5longblob?$AA@
_DATA	SEGMENT
??_C@_09CPOG@?5longblob?$AA@ DB ' longblob', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09IJHK@?5datetime?$AA@
_DATA	SEGMENT
??_C@_09IJHK@?5datetime?$AA@ DB ' datetime', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_04OGMO@?5int?$AA@
_DATA	SEGMENT
??_C@_04OGMO@?5int?$AA@ DB ' int', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_07CLFL@?5double?$AA@
_DATA	SEGMENT
??_C@_07CLFL@?5double?$AA@ DB ' double', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09DKHG@?5longtext?$AA@
_DATA	SEGMENT
??_C@_09DKHG@?5longtext?$AA@ DB ' longtext', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@ODFA@DataOrRelfieldOrSet?$AA@
_DATA	SEGMENT
??_C@_0BE@ODFA@DataOrRelfieldOrSet?$AA@ DB 'DataOrRelfieldOrSet', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@NJGJ@?5INTEGER?5PRIMARY?5KEY?5?$AA@
_DATA	SEGMENT
??_C@_0BG@NJGJ@?5INTEGER?5PRIMARY?5KEY?5?$AA@ DB ' INTEGER PRIMARY KEY ', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_08KJLB@?5INTEGER?$AA@
_DATA	SEGMENT
??_C@_08KJLB@?5INTEGER?$AA@ DB ' INTEGER', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@HOC@?5varchar?$CI?536?5?$CJ?$AA@
_DATA	SEGMENT
??_C@_0P@HOC@?5varchar?$CI?536?5?$CJ?$AA@ DB ' varchar( 36 )', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@OLJF@?5varchar?$CI?530?5?$CJ?$AA@
_DATA	SEGMENT
??_C@_0P@OLJF@?5varchar?$CI?530?5?$CJ?$AA@ DB ' varchar( 30 )', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@NCMM@TE_TablRec?$AA@
_DATA	SEGMENT
??_C@_0L@NCMM@TE_TablRec?$AA@ DB 'TE_TablRec', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CK@EKKO@Invalid?5DataType?5?8?$CFs?8?5for?5attrib@
_DATA	SEGMENT
??_C@_0CK@EKKO@Invalid?5DataType?5?8?$CFs?8?5for?5attrib@ DB 'Invalid Dat'
	DB	'aType ''%s'' for attribute %s.%s', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@KEK@SQL?5DDL?5Generator?$AA@
_DATA	SEGMENT
??_C@_0BC@KEK@SQL?5DDL?5Generator?$AA@ DB 'SQL DDL Generator', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09LPMC@SQL_NULLS?$AA@
_DATA	SEGMENT
??_C@_09LPMC@SQL_NULLS?$AA@ DB 'SQL_NULLS', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08IDDA@NOT?5NULL?$AA@
_DATA	SEGMENT
??_C@_08IDDA@NOT?5NULL?$AA@ DB 'NOT NULL', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08FGIB@NULL?5?5?5?5?$AA@
_DATA	SEGMENT
??_C@_08FGIB@NULL?5?5?5?5?$AA@ DB 'NULL    ', 00H	; `string'
_DATA	ENDS
_TEXT	SEGMENT
_vDTE$ = 8
_pchLine$ = 16
_szColName$ = -268
_pchDataType$ = -328
_pchKeyType$ = -4
_pchEnd$ = -324
_pch$ = -8
_nLth$ = -12
_nMaxColumnNameLth$ = -272
_szDBH_DataObjectName$ = -320
_vDBH_Data$ = -284
_vTZTEDBLO$ = -276
_vTZDBHODO$ = -280
_bTimestampAsString$ = -332
_l$31021 = -336
_szTableName$31067 = -704
_szMsg$31068 = -636
_fnBuildColumn@12 PROC NEAR

; 2349 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 708				; 000002c4H

; 2350 :    zCHAR    szColName[ MAX_NAME_LTH + 1 ];
; 2351 :    zPCHAR   pchDataType;
; 2352 :    zPCHAR   pchKeyType;
; 2353 :    zPCHAR   pchEnd, pch;
; 2354 :    zLONG    nLth;
; 2355 :    zUSHORT  nMaxColumnNameLth = MAX_COLUMNNAME_LTH;

	mov	WORD PTR _nMaxColumnNameLth$[ebp], 64	; 00000040H

; 2356 :    zCHAR    szDBH_DataObjectName[ zZEIDON_NAME_LTH + 1 ];
; 2357 :    zVIEW    vDBH_Data;
; 2358 :    zVIEW    vTZTEDBLO = 0;

	mov	DWORD PTR _vTZTEDBLO$[ebp], 0

; 2359 :    zVIEW    vTZDBHODO = 0;

	mov	DWORD PTR _vTZDBHODO$[ebp], 0

; 2360 :    zBOOL    bTimestampAsString = FALSE;

	mov	BYTE PTR _bTimestampAsString$[ebp], 0

; 2361 : 
; 2362 :    // If it exists get the object that defines the dbhandler type.
; 2363 :    GetViewByName( &vTZTEDBLO, "TZTEDBLO", vDTE, zLEVEL_TASK );

	push	2
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_08IAKB@TZTEDBLO?$AA@	; `string'
	lea	ecx, DWORD PTR _vTZTEDBLO$[ebp]
	push	ecx
	call	_GetViewByName@16

; 2364 :    if ( vTZTEDBLO )

	cmp	DWORD PTR _vTZTEDBLO$[ebp], 0
	je	SHORT $L31016

; 2365 :       SetCursorFirstEntityByAttr( vTZTEDBLO, "TE_DBMS_Source", "DBMS",
; 2366 :                                   vDTE,      "TE_DBMS_Source", "DBMS", 0 );

	push	0
	push	OFFSET FLAT:??_C@_04EALC@DBMS?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_04EALC@DBMS?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	eax, DWORD PTR _vTZTEDBLO$[ebp]
	push	eax
	call	_SetCursorFirstEntityByAttr@28
$L31016:

; 2367 : 
; 2368 :    // Try to get the OI that contains DBH-specific data.
; 2369 :    SetOI_FromBlob( &vDBH_Data, szDBH_DataObjectName, vDTE, vDTE,
; 2370 :                    "TE_DBMS_Source", "DBH_Data", zNOI_OKAY );

	push	512					; 00000200H
	push	OFFSET FLAT:??_C@_08DKGC@DBH_Data?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _szDBH_DataObjectName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vDBH_Data$[ebp]
	push	ecx
	call	_SetOI_FromBlob@28

; 2371 : 
; 2372 : #if defined( ACCESS ) || defined( MYSQL ) || defined( ODBC ) || \
; 2373 :     defined( POSTGRESQL ) || defined( SQLSERVER )
; 2374 : 
; 2375 :    // Try to get the ODBC definition.
; 2376 :    SetOI_FromBlob( &vTZDBHODO, 0, vDTE, vTZTEDBLO,
; 2377 :                    "TE_DBMS_Source", "DBH_Data", zNOI_OKAY );

	push	512					; 00000200H
	push	OFFSET FLAT:??_C@_08DKGC@DBH_Data?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	edx, DWORD PTR _vTZTEDBLO$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _vTZDBHODO$[ebp]
	push	ecx
	call	_SetOI_FromBlob@28

; 2378 : 
; 2379 :    // Check to see if there is DBH data set in the TE.
; 2380 :    if ( vDBH_Data )

	cmp	DWORD PTR _vDBH_Data$[ebp], 0
	je	SHORT $L31020

; 2382 :       zLONG l;
; 2383 : 
; 2384 :       bTimestampAsString = ( CompareAttributeToString( vDBH_Data, "ODBC",
; 2385 :                                                        "TimestampAsString",
; 2386 :                                                        "Y" ) == 0 );

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0BC@KJKI@TimestampAsString?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_04JENC@ODBC?$AA@	; `string'
	mov	edx, DWORD PTR _vDBH_Data$[ebp]
	push	edx
	call	_CompareAttributeToString@16
	movsx	eax, ax
	neg	eax
	sbb	eax, eax
	inc	eax
	mov	BYTE PTR _bTimestampAsString$[ebp], al

; 2387 : 
; 2388 :       if ( GetIntegerFromAttribute( &l, vDBH_Data, "ODBC",
; 2389 :                                     "MaxColumnNameLength" ) != -1 )

	push	OFFSET FLAT:??_C@_0BE@GNCH@MaxColumnNameLength?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_04JENC@ODBC?$AA@	; `string'
	mov	ecx, DWORD PTR _vDBH_Data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _l$31021[ebp]
	push	edx
	call	_GetIntegerFromAttribute@16
	movsx	eax, ax
	cmp	eax, -1
	je	SHORT $L31025

; 2391 :          nMaxColumnNameLth = (zSHORT) l;

	mov	cx, WORD PTR _l$31021[ebp]
	mov	WORD PTR _nMaxColumnNameLth$[ebp], cx
$L31025:

; 2394 :    else

	jmp	SHORT $L31030
$L31020:

; 2395 :    // Check to see if there is DBH data set in the DB List object.
; 2396 :    if ( vTZDBHODO )

	cmp	DWORD PTR _vTZDBHODO$[ebp], 0
	je	SHORT $L31029

; 2398 :       bTimestampAsString = ( CompareAttributeToString( vTZDBHODO, "ODBC",
; 2399 :                                                        "TimestampAsString",
; 2400 :                                                        "Y" ) == 0 );

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0BC@KJKI@TimestampAsString?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_04JENC@ODBC?$AA@	; `string'
	mov	edx, DWORD PTR _vTZDBHODO$[ebp]
	push	edx
	call	_CompareAttributeToString@16
	movsx	eax, ax
	neg	eax
	sbb	eax, eax
	inc	eax
	mov	BYTE PTR _bTimestampAsString$[ebp], al

; 2402 :    else

	jmp	SHORT $L31030
$L31029:

; 2404 :       // If we get here then no info was set for this DBH so use defaults.
; 2405 :       bTimestampAsString = FALSE;

	mov	BYTE PTR _bTimestampAsString$[ebp], 0
$L31030:

; 2407 : 
; 2408 :    if ( vTZDBHODO )

	cmp	DWORD PTR _vTZDBHODO$[ebp], 0
	je	SHORT $L31031

; 2409 :       DropView( vTZDBHODO );

	mov	ecx, DWORD PTR _vTZDBHODO$[ebp]
	push	ecx
	call	_DropView@4
$L31031:

; 2410 : 
; 2411 : #endif
; 2412 : 
; 2413 :    if ( vDBH_Data )

	cmp	DWORD PTR _vDBH_Data$[ebp], 0
	je	SHORT $L31032

; 2414 :       DropView( vDBH_Data );

	mov	edx, DWORD PTR _vDBH_Data$[ebp]
	push	edx
	call	_DropView@4
$L31032:

; 2415 : 
; 2416 :    GetStringFromAttribute( szColName, vDTE, "TE_FieldDataRel", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szColName$[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 2417 :    GetAddrForAttribute( &pchDataType, vDTE, "TE_FieldDataRel", "DataType" );

	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _pchDataType$[ebp]
	push	eax
	call	_GetAddrForAttribute@16

; 2418 :    RemoveBrackets( szColName );

	lea	ecx, DWORD PTR _szColName$[ebp]
	push	ecx
	call	_RemoveBrackets
	add	esp, 4

; 2419 : 
; 2420 :    pchEnd = pchLine + zstrlen( pchLine );

	mov	edx, DWORD PTR _pchLine$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _pchLine$[ebp]
	add	ecx, eax
	mov	DWORD PTR _pchEnd$[ebp], ecx

; 2421 :    zsprintf( pchEnd, "%-*s", nMaxColumnNameLth, szColName );

	lea	edx, DWORD PTR _szColName$[ebp]
	push	edx
	mov	eax, DWORD PTR _nMaxColumnNameLth$[ebp]
	and	eax, 65535				; 0000ffffH
	push	eax
	push	OFFSET FLAT:??_C@_04DOMO@?$CF?9?$CKs?$AA@ ; `string'
	mov	ecx, DWORD PTR _pchEnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H

; 2422 :    pchEnd = pchEnd + zstrlen( pchEnd );

	mov	edx, DWORD PTR _pchEnd$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _pchEnd$[ebp]
	add	ecx, eax
	mov	DWORD PTR _pchEnd$[ebp], ecx

; 2423 : 
; 2424 : #if defined( ACCESS )
; 2425 : 
; 2426 :    switch ( pchDataType[ 0 ] )
; 2427 :    {
; 2428 :       case zTYPE_STRING:
; 2429 :       case zTYPE_FIXEDCHAR:
; 2430 :          GetIntegerFromAttribute( &nLth, vDTE, "TE_FieldDataRel",
; 2431 :                                   "Length" );
; 2432 :          zsprintf( pchEnd, " TEXT( %ld )", nLth );
; 2433 : 
; 2434 :          break;
; 2435 : 
; 2436 :       case zTYPE_BLOB:
; 2437 :          zsprintf( pchEnd, " LONGBINARY" );
; 2438 :          break;
; 2439 : 
; 2440 :       case zTYPE_INTEGER:
; 2441 :          zsprintf( pchEnd, " INTEGER" );
; 2442 :          break;
; 2443 : 
; 2444 :       case zTYPE_DECIMAL:
; 2445 :          zsprintf( pchEnd, " DOUBLE" );
; 2446 :          break;
; 2447 : 
; 2448 :       case zTYPE_DATETIME:
; 2449 :       case zTYPE_TIME:
; 2450 :          if ( bTimestampAsString )
; 2451 :             zsprintf( pchEnd, " TEXT( 25 )" );
; 2452 :          else
; 2453 :          {
; 2454 :             switch ( pchDataType[ 0 ] )
; 2455 :             {
; 2456 :                case zTYPE_DATETIME:
; 2457 :                   zsprintf( pchEnd, " DATETIME" );
; 2458 :                   break;
; 2459 : 
; 2460 :                case zTYPE_TIME:
; 2461 :                   zsprintf( pchEnd, " TIME" );
; 2462 :                   break;
; 2463 :             }
; 2464 :          }
; 2465 : 
; 2466 :          break;
; 2467 : 
; 2468 :       case zTYPE_DATE:
; 2469 :          zsprintf( pchEnd, " DATE" );
; 2470 :          break;
; 2471 : 
; 2472 :       // ===
; 2473 :       // === Non-standard types follow here.
; 2474 :       // ===
; 2475 : 
; 2476 :       // Long text fields.
; 2477 :       case 'V':
; 2478 :          zsprintf( pchEnd, " MEMO" );
; 2479 :          break;
; 2480 : 
; 2481 :       // TimeStampEx
; 2482 :       case 'X':
; 2483 :          zsprintf( pchEnd, " TEXT( 30 )" );
; 2484 :          break;
; 2485 : 
; 2486 :       default:
; 2487 :       {
; 2488 :          zCHAR szTableName[ MAX_TABLENAME_LTH + 1 ];
; 2489 :          zCHAR szMsg[ 300 ];
; 2490 : 
; 2491 :          GetStringFromAttribute( szTableName, vDTE, "TE_TablRec", "Name" );
; 2492 :          zsprintf( szMsg, "Invalid DataType '%s' for attribute %s.%s",
; 2493 :                    pchDataType, szTableName, szColName );
; 2494 :          SysMessageBox( vDTE, "SQLBASE DDL Generator", szMsg, 1 );
; 2495 :          return( -1 );
; 2496 :       }
; 2497 : 
; 2498 :    } // switch ( pchDataType[ 0 ] )...
; 2499 : 
; 2500 : #elif defined( DB2 )
; 2501 : 
; 2502 :    switch ( pchDataType[ 0 ] )
; 2503 :    {
; 2504 :       case zTYPE_STRING:
; 2505 :          GetIntegerFromAttribute( &nLth, vDTE, "TE_FieldDataRel",
; 2506 :                                   "Length" );
; 2507 :          zsprintf( pchEnd, " VARCHAR( %ld )", nLth );
; 2508 : 
; 2509 :          break;
; 2510 : 
; 2511 :       case zTYPE_FIXEDCHAR:
; 2512 :          GetIntegerFromAttribute( &nLth, vDTE, "TE_FieldDataRel",
; 2513 :                                   "Length" );
; 2514 :          zsprintf( pchEnd, " CHAR( %ld )", nLth );
; 2515 : 
; 2516 :          break;
; 2517 : 
; 2518 :       case zTYPE_BLOB:
; 2519 :          GetIntegerFromAttribute( &nLth, vDTE, "TE_FieldDataRel",
; 2520 :                                   "Length" );
; 2521 :          zsprintf( pchEnd, " BLOB( %ld )", nLth );
; 2522 :          break;
; 2523 : 
; 2524 :       case zTYPE_DATETIME:
; 2525 :          zsprintf( pchEnd, " TIMESTAMP" );
; 2526 :          break;
; 2527 : 
; 2528 :       case zTYPE_INTEGER:
; 2529 :          zsprintf( pchEnd, " INTEGER" );
; 2530 :          break;
; 2531 : 
; 2532 :       case zTYPE_DECIMAL:
; 2533 :       {
; 2534 :          zLONG nScale;
; 2535 : 
; 2536 :          GetIntegerFromAttribute( &nLth, vDTE, "TE_FieldDataRel",
; 2537 :                                   "Length" );
; 2538 :          if ( nLth > 31 )
; 2539 :             nLth = 31;
; 2540 : 
; 2541 :          GetIntegerFromAttribute( &nScale, vDTE, "TE_FieldDataRel",
; 2542 :                                   "SQL_SCALE" );
; 2543 : 
; 2544 :          zsprintf( pchEnd, " DECIMAL( %ld,%ld )", nLth, nScale );
; 2545 :          break;
; 2546 :       }
; 2547 : 
; 2548 :       case zTYPE_DATE:
; 2549 :          zsprintf( pchEnd, " DATE" );
; 2550 :          break;
; 2551 : 
; 2552 :       case zTYPE_TIME:
; 2553 :          zsprintf( pchEnd, " TIME" );
; 2554 :          break;
; 2555 : 
; 2556 :       // ===
; 2557 :       // === Non-standard types follow here.
; 2558 :       // ===
; 2559 : 
; 2560 :       case 'V':
; 2561 :          GetIntegerFromAttribute( &nLth, vDTE, "TE_FieldDataRel",
; 2562 :                                   "Length" );
; 2563 :          zsprintf( pchEnd, " CLOB( %ld )", nLth );
; 2564 :          break;
; 2565 : 
; 2566 :       // TimeStampEx
; 2567 :       case 'X':
; 2568 :          zsprintf( pchEnd, " VARCHAR( 30 )" );
; 2569 :          break;
; 2570 : 
; 2571 :       default:
; 2572 :       {
; 2573 :          zCHAR szTableName[ MAX_TABLENAME_LTH + 1 ];
; 2574 :          zCHAR szMsg[ 300 ];
; 2575 : 
; 2576 :          GetStringFromAttribute( szTableName, vDTE, "TE_TablRec", "Name" );
; 2577 :          zsprintf( szMsg, "Invalid DataType '%s' for attribute %s.%s",
; 2578 :                    pchDataType, szTableName, szColName );
; 2579 :          SysMessageBox( vDTE, "SQLBASE DDL Generator", szMsg, 1 );
; 2580 :          return( -1 );
; 2581 :       }
; 2582 : 
; 2583 :    } // switch ( pchDataType[ 0 ] )...
; 2584 : 
; 2585 : #elif defined( MYSQL )
; 2586 : 
; 2587 :    switch ( pchDataType[ 0 ] )
; 2588 :    {

	mov	edx, DWORD PTR _pchDataType$[ebp]
	movsx	eax, BYTE PTR [edx]
	mov	DWORD PTR -708+[ebp], eax
	mov	ecx, DWORD PTR -708+[ebp]
	sub	ecx, 65					; 00000041H
	mov	DWORD PTR -708+[ebp], ecx
	cmp	DWORD PTR -708+[ebp], 23		; 00000017H
	ja	$L31066
	mov	eax, DWORD PTR -708+[ebp]
	xor	edx, edx
	mov	dl, BYTE PTR $L32362[eax]
	jmp	DWORD PTR $L32363[edx*4]
$L31041:

; 2589 :       case zTYPE_STRING:
; 2590 :       case zTYPE_FIXEDCHAR:
; 2591 :          GetIntegerFromAttribute( &nLth, vDTE, "TE_FieldDataRel",
; 2592 :                                   "Length" );

	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _nLth$[ebp]
	push	edx
	call	_GetIntegerFromAttribute@16

; 2593 :          zsprintf( pchEnd, " varchar( %ld )", nLth );

	mov	eax, DWORD PTR _nLth$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0BA@FENM@?5varchar?$CI?5?$CFld?5?$CJ?$AA@ ; `string'
	mov	ecx, DWORD PTR _pchEnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 2594 : 
; 2595 :          break;

	jmp	$L31038
$L31044:

; 2596 : 
; 2597 :       case zTYPE_BLOB:
; 2598 :          zsprintf( pchEnd, " longblob" );

	push	OFFSET FLAT:??_C@_09CPOG@?5longblob?$AA@ ; `string'
	mov	edx, DWORD PTR _pchEnd$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 8

; 2599 :          break;

	jmp	$L31038
$L31046:

; 2600 : 
; 2601 :       case zTYPE_DATETIME:
; 2602 :          zsprintf( pchEnd, " datetime" );

	push	OFFSET FLAT:??_C@_09IJHK@?5datetime?$AA@ ; `string'
	mov	eax, DWORD PTR _pchEnd$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 8

; 2603 :          break;

	jmp	$L31038
$L31048:

; 2604 : 
; 2605 :       case zTYPE_INTEGER:
; 2606 :          zsprintf( pchEnd, " int" );

	push	OFFSET FLAT:??_C@_04OGMO@?5int?$AA@	; `string'
	mov	ecx, DWORD PTR _pchEnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 8

; 2607 :          break;

	jmp	$L31038
$L31050:

; 2608 : 
; 2609 :       case zTYPE_DECIMAL:
; 2610 :          zsprintf( pchEnd, " double" );

	push	OFFSET FLAT:??_C@_07CLFL@?5double?$AA@	; `string'
	mov	edx, DWORD PTR _pchEnd$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 8

; 2611 :          break;

	jmp	$L31038
$L31052:

; 2612 : 
; 2613 :       case zTYPE_DATE:
; 2614 :          zsprintf( pchEnd, " datetime" );

	push	OFFSET FLAT:??_C@_09IJHK@?5datetime?$AA@ ; `string'
	mov	eax, DWORD PTR _pchEnd$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 8

; 2615 :          break;

	jmp	$L31038
$L31053:

; 2616 : 
; 2617 :       case zTYPE_TIME:
; 2618 :          zsprintf( pchEnd, " datetime" );

	push	OFFSET FLAT:??_C@_09IJHK@?5datetime?$AA@ ; `string'
	mov	ecx, DWORD PTR _pchEnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 8

; 2619 :          break;

	jmp	$L31038
$L31054:

; 2620 : 
; 2621 :       // ===
; 2622 :       // === Non-standard types follow here.
; 2623 :       // ===
; 2624 : 
; 2625 :       case 'V':
; 2626 :          zsprintf( pchEnd, " longtext" );

	push	OFFSET FLAT:??_C@_09DKHG@?5longtext?$AA@ ; `string'
	mov	edx, DWORD PTR _pchEnd$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 8

; 2627 :          break;

	jmp	$L31038
$L31056:

; 2628 : 
; 2629 :       case 'A':
; 2630 :          GetAddrForAttribute( &pchKeyType, vDTE, "TE_FieldDataRel", "DataOrRelfieldOrSet" );

	push	OFFSET FLAT:??_C@_0BE@ODFA@DataOrRelfieldOrSet?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pchKeyType$[ebp]
	push	ecx
	call	_GetAddrForAttribute@16

; 2631 :          if ( pchKeyType[ 0 ] == 'D' )

	mov	edx, DWORD PTR _pchKeyType$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 68					; 00000044H
	jne	SHORT $L31058

; 2633 :             // The key type is 'D' for data which means it's the main key.
; 2634 :             #if defined( SQLITE )
; 2635 : 	       zsprintf( pchEnd, " INTEGER PRIMARY KEY " );

	push	OFFSET FLAT:??_C@_0BG@NJGJ@?5INTEGER?5PRIMARY?5KEY?5?$AA@ ; `string'
	mov	ecx, DWORD PTR _pchEnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 8

; 2640 : 	 else

	jmp	SHORT $L31060
$L31058:

; 2642 :             // This must be a FK so don't declare it as SERIAL/KEY.
; 2643 :             zsprintf( pchEnd, " INTEGER" );

	push	OFFSET FLAT:??_C@_08KJLB@?5INTEGER?$AA@	; `string'
	mov	edx, DWORD PTR _pchEnd$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 8
$L31060:

; 2645 : 
; 2646 :          break;

	jmp	$L31038
$L31062:

; 2647 : 
; 2648 :       // UUID
; 2649 :       case 'U':
; 2650 :          #if defined( SQLITE )
; 2651 :              zsprintf( pchEnd, " varchar( 36 )" );

	push	OFFSET FLAT:??_C@_0P@HOC@?5varchar?$CI?536?5?$CJ?$AA@ ; `string'
	mov	eax, DWORD PTR _pchEnd$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 8

; 2652 :          #else
; 2653 :              zsprintf( pchEnd, " binary( 16 )" );
; 2654 :           #endif
; 2655 :          break;

	jmp	SHORT $L31038
$L31064:

; 2656 : 
; 2657 :       // TimeStampEx
; 2658 :       case 'X':
; 2659 :          zsprintf( pchEnd, " varchar( 30 )" );

	push	OFFSET FLAT:??_C@_0P@OLJF@?5varchar?$CI?530?5?$CJ?$AA@ ; `string'
	mov	ecx, DWORD PTR _pchEnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 8

; 2660 :          break;

	jmp	SHORT $L31038
$L31066:

; 2664 :          zCHAR szTableName[ MAX_TABLENAME_LTH + 1 ];
; 2665 :          zCHAR szMsg[ 300 ];
; 2666 : 
; 2667 :          GetStringFromAttribute( szTableName, vDTE, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _szTableName$31067[ebp]
	push	eax
	call	_GetStringFromAttribute@16

; 2668 :          zsprintf( szMsg, "Invalid DataType '%s' for attribute %s.%s",
; 2669 :                    pchDataType, szTableName, szColName );

	lea	ecx, DWORD PTR _szColName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTableName$31067[ebp]
	push	edx
	mov	eax, DWORD PTR _pchDataType$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0CK@EKKO@Invalid?5DataType?5?8?$CFs?8?5for?5attrib@ ; `string'
	lea	ecx, DWORD PTR _szMsg$31068[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 2670 :          SysMessageBox( vDTE, "SQL DDL Generator", szMsg, 1 );

	push	1
	lea	edx, DWORD PTR _szMsg$31068[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0BC@KEK@SQL?5DDL?5Generator?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysMessageBox@16

; 2671 :          return( -1 );

	or	ax, -1
	jmp	$L31002
$L31038:

; 2675 : 
; 2676 : #elif defined( SQLBASE ) || defined( ODBC )
; 2677 : 
; 2678 :    switch ( pchDataType[ 0 ] )
; 2679 :    {
; 2680 :       case zTYPE_STRING:
; 2681 :       case zTYPE_FIXEDCHAR:
; 2682 :          GetIntegerFromAttribute( &nLth, vDTE, "TE_FieldDataRel",
; 2683 :                                   "Length" );
; 2684 :          zsprintf( pchEnd, " CHAR( %ld )", nLth );
; 2685 : 
; 2686 :          break;
; 2687 : 
; 2688 :       case zTYPE_BLOB:
; 2689 :          zsprintf( pchEnd, " LONG VARCHAR" );
; 2690 :          break;
; 2691 : 
; 2692 :       case zTYPE_INTEGER:
; 2693 :          zsprintf( pchEnd, " INTEGER" );
; 2694 :          break;
; 2695 : 
; 2696 :       case zTYPE_DECIMAL:
; 2697 :       {
; 2698 :          zLONG nScale;
; 2699 : 
; 2700 :          GetIntegerFromAttribute( &nLth, vDTE, "TE_FieldDataRel",
; 2701 :                                   "Length" );
; 2702 :          GetIntegerFromAttribute( &nScale, vDTE, "TE_FieldDataRel",
; 2703 :                                   "SQL_SCALE" );
; 2704 : 
; 2705 :          zsprintf( pchEnd, " DECIMAL( %ld,%ld )", nLth, nScale );
; 2706 :          break;
; 2707 :       }
; 2708 : 
; 2709 :    #ifdef ODBC
; 2710 : 
; 2711 :       case zTYPE_DATETIME:
; 2712 :       case zTYPE_TIME:
; 2713 :          if ( bTimestampAsString )
; 2714 :             zsprintf( pchEnd, " TEXT( 25 )" );
; 2715 :          else
; 2716 :          {
; 2717 :             switch ( pchDataType[ 0 ] )
; 2718 :             {
; 2719 :                case zTYPE_DATETIME:
; 2720 :                   zsprintf( pchEnd, " DATETIME" );
; 2721 :                   break;
; 2722 : 
; 2723 :                case zTYPE_TIME:
; 2724 :                   zsprintf( pchEnd, " TIME" );
; 2725 :                   break;
; 2726 :             }
; 2727 :          }
; 2728 : 
; 2729 :          break;
; 2730 : 
; 2731 :       case zTYPE_DATE:
; 2732 :          zsprintf( pchEnd, " DATE" );
; 2733 :          break;
; 2734 : 
; 2735 :    #else
; 2736 :       case zTYPE_DATETIME:
; 2737 :          zsprintf( pchEnd, " TIMESTAMP" );
; 2738 :          break;
; 2739 : 
; 2740 :       case zTYPE_DATE:
; 2741 :          zsprintf( pchEnd, " DATE" );
; 2742 :          break;
; 2743 : 
; 2744 :       case zTYPE_TIME:
; 2745 :          zsprintf( pchEnd, " TIME" );
; 2746 :          break;
; 2747 :    #endif
; 2748 : 
; 2749 :       // ===
; 2750 :       // === Non-standard types follow here.
; 2751 :       // ===
; 2752 : 
; 2753 :       case 'V':
; 2754 :          zsprintf( pchEnd, " LONG VARCHAR" );
; 2755 :          break;
; 2756 : 
; 2757 :       // TimeStampEx
; 2758 :       case 'X':
; 2759 :          zsprintf( pchEnd, " CHAR( 30 )" );
; 2760 :          break;
; 2761 : 
; 2762 :       default:
; 2763 :       {
; 2764 :          zCHAR szTableName[ MAX_TABLENAME_LTH + 1 ];
; 2765 :          zCHAR szMsg[ 300 ];
; 2766 : 
; 2767 :          GetStringFromAttribute( szTableName, vDTE, "TE_TablRec", "Name" );
; 2768 :          zsprintf( szMsg, "Invalid DataType '%s' for attribute %s.%s",
; 2769 :                    pchDataType, szTableName, szColName );
; 2770 :          SysMessageBox( vDTE, "SQLBASE DDL Generator", szMsg, 1 );
; 2771 :          return( -1 );
; 2772 :       }
; 2773 : 
; 2774 :    } // switch ( pchDataType[ 0 ] )...
; 2775 : 
; 2776 : #elif defined( POSTGRESQL )
; 2777 : 
; 2778 :    switch ( pchDataType[ 0 ] )
; 2779 :    {
; 2780 :       case zTYPE_STRING:
; 2781 :       case zTYPE_FIXEDCHAR:
; 2782 :          GetIntegerFromAttribute( &nLth, vDTE, "TE_FieldDataRel",
; 2783 :                                   "Length" );
; 2784 :          zsprintf( pchEnd, " VARCHAR( %ld )", nLth );
; 2785 : 
; 2786 :          break;
; 2787 : 
; 2788 :       case zTYPE_BLOB:
; 2789 :          zsprintf( pchEnd, " bytea" );
; 2790 :          //zsprintf( pchEnd, " text" );
; 2791 :          break;
; 2792 : 
; 2793 :       case zTYPE_DATETIME:
; 2794 :          zsprintf( pchEnd, " TIMESTAMP" );
; 2795 :          break;
; 2796 : 
; 2797 :       case zTYPE_INTEGER:
; 2798 :          zsprintf( pchEnd, " INTEGER" );
; 2799 :          break;
; 2800 : 
; 2801 :       case zTYPE_DECIMAL:
; 2802 :          zsprintf( pchEnd, " FLOAT4" );
; 2803 :          break;
; 2804 : 
; 2805 :       case zTYPE_DATE:
; 2806 :          zsprintf( pchEnd, " TIMESTAMP" );
; 2807 :          break;
; 2808 : 
; 2809 :       case zTYPE_TIME:
; 2810 :          zsprintf( pchEnd, " TIMESTAMP" );
; 2811 :          break;
; 2812 : 
; 2813 :       // ===
; 2814 :       // === Non-standard types follow here.
; 2815 :       // ===
; 2816 : 
; 2817 :       case 'V':
; 2818 :          zsprintf( pchEnd, " TEXT" );
; 2819 :          break;
; 2820 : 
; 2821 :       // TimeStampEx
; 2822 :       case 'X':
; 2823 :          zsprintf( pchEnd, " VARCHAR( 30 )" );
; 2824 :          break;
; 2825 : 
; 2826 :       case 'A':
; 2827 :          GetAddrForAttribute( &pchKeyType, vDTE, "TE_FieldDataRel", "DataOrRelfieldOrSet" );
; 2828 :          if ( pchKeyType[ 0 ] == 'D' )
; 2829 : 	 {
; 2830 :             // The key type is 'D' for data which means it's the main key.
; 2831 : 	    zsprintf( pchEnd, " SERIAL PRIMARY KEY " );
; 2832 : 	 }
; 2833 : 	 else
; 2834 : 	 {
; 2835 :             // This must be a FK so don't declare it as SERIAL/KEY.
; 2836 :             zsprintf( pchEnd, " INTEGER" );
; 2837 : 	 }
; 2838 : 
; 2839 :          break;
; 2840 : 	 
; 2841 :       case 'G':
; 2842 :          zsprintf( pchEnd, " BIGINT" );
; 2843 :          break;
; 2844 : 	 
; 2845 :       // UUID
; 2846 :       case 'U':
; 2847 :          zsprintf( pchEnd, " UUID" );
; 2848 :          break;
; 2849 : 
; 2850 :       case 'O':
; 2851 :          zsprintf( pchEnd, " BOOLEAN" );
; 2852 :          break;
; 2853 : 
; 2854 :       default:
; 2855 :       {
; 2856 :          zCHAR szTableName[ MAX_TABLENAME_LTH + 1 ];
; 2857 :          zCHAR szMsg[ 300 ];
; 2858 : 
; 2859 :          GetStringFromAttribute( szTableName, vDTE, "TE_TablRec", "Name" );
; 2860 :          zsprintf( szMsg, "Invalid DataType '%s' for attribute %s.%s",
; 2861 :                    pchDataType, szTableName, szColName );
; 2862 :          SysMessageBox( vDTE, "SQL DDL Generator", szMsg, 1 );
; 2863 :          return( -1 );
; 2864 :       }
; 2865 : 
; 2866 :    } // switch ( pchDataType[ 0 ] )...
; 2867 : 
; 2868 : #elif defined( SQLSERVER )
; 2869 : 
; 2870 :    switch ( pchDataType[ 0 ] )
; 2871 :    {
; 2872 :       case zTYPE_STRING:
; 2873 :       case zTYPE_FIXEDCHAR:
; 2874 :          GetIntegerFromAttribute( &nLth, vDTE, "TE_FieldDataRel",
; 2875 :                                   "Length" );
; 2876 :          zsprintf( pchEnd, " varchar( %ld )", nLth );
; 2877 : 
; 2878 :          break;
; 2879 : 
; 2880 :       case zTYPE_BLOB:
; 2881 :          zsprintf( pchEnd, " varbinary(max)" );
; 2882 :          break;
; 2883 : 
; 2884 :       case zTYPE_DATETIME:
; 2885 :          zsprintf( pchEnd, " datetime" );
; 2886 :          break;
; 2887 : 
; 2888 :       case zTYPE_INTEGER:
; 2889 :          zsprintf( pchEnd, " int" );
; 2890 :          break;
; 2891 : 
; 2892 :       case zTYPE_DECIMAL:
; 2893 :          zsprintf( pchEnd, " float" );
; 2894 :          break;
; 2895 : 
; 2896 :       case zTYPE_DATE:
; 2897 :          zsprintf( pchEnd, " datetime" );
; 2898 :          break;
; 2899 : 
; 2900 :       case zTYPE_TIME:
; 2901 :          zsprintf( pchEnd, " datetime" );
; 2902 :          break;
; 2903 : 
; 2904 :       // ===
; 2905 :       // === Non-standard types follow here.
; 2906 :       // ===
; 2907 : 
; 2908 :       case 'V':
; 2909 :          zsprintf( pchEnd, " nvarchar(max)" );
; 2910 :          break;
; 2911 : 
; 2912 :       // TimeStampEx
; 2913 :       case 'X':
; 2914 :          zsprintf( pchEnd, " varchar( 30 )" );
; 2915 :          break;
; 2916 : 
; 2917 :       default:
; 2918 :       {
; 2919 :          zCHAR szTableName[ MAX_TABLENAME_LTH + 1 ];
; 2920 :          zCHAR szMsg[ 300 ];
; 2921 : 
; 2922 :          GetStringFromAttribute( szTableName, vDTE, "TE_TablRec", "Name" );
; 2923 :          zsprintf( szMsg, "Invalid DataType '%s' for attribute %s.%s",
; 2924 :                    pchDataType, szTableName, szColName );
; 2925 :          SysMessageBox( vDTE, "SQL DDL Generator", szMsg, 1 );
; 2926 :          return( -1 );
; 2927 :       }
; 2928 : 
; 2929 :    } // switch ( pchDataType[ 0 ] )...
; 2930 : #endif
; 2931 : 
; 2932 :    // Space out the data type string.
; 2933 :    for ( pch = pchEnd + zstrlen( pchEnd );
; 2934 :          pch < pchEnd + MAX_DATATYPE_LTH;
; 2935 :          pch++ )

	mov	ecx, DWORD PTR _pchEnd$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, DWORD PTR _pchEnd$[ebp]
	add	edx, eax
	mov	DWORD PTR _pch$[ebp], edx
	jmp	SHORT $L31072
$L31073:
	mov	eax, DWORD PTR _pch$[ebp]
	add	eax, 1
	mov	DWORD PTR _pch$[ebp], eax
$L31072:
	mov	ecx, DWORD PTR _pchEnd$[ebp]
	add	ecx, 20					; 00000014H
	cmp	DWORD PTR _pch$[ebp], ecx
	jae	SHORT $L31074

; 2937 :       *pch = ' ';

	mov	edx, DWORD PTR _pch$[ebp]
	mov	BYTE PTR [edx], 32			; 00000020H

; 2938 :    }

	jmp	SHORT $L31073
$L31074:

; 2939 : 
; 2940 :    *pch = 0;

	mov	eax, DWORD PTR _pch$[ebp]
	mov	BYTE PTR [eax], 0

; 2941 :    pchEnd = pch;

	mov	ecx, DWORD PTR _pch$[ebp]
	mov	DWORD PTR _pchEnd$[ebp], ecx

; 2942 : 
; 2943 :    // Check to see if column can be NULL.
; 2944 :    if ( CompareAttributeToString( vDTE, "TE_FieldDataRel",
; 2945 :                                   "SQL_NULLS", "Y" ) == 0  )

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_09LPMC@SQL_NULLS?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_CompareAttributeToString@16
	movsx	eax, ax
	test	eax, eax
	jne	SHORT $L31075

; 2947 :       // KJS 02/16/17 - Do I want to check if this is POSTGRES and the system generated key and if so set to 'PRIMARY KEY'??????
; 2948 : 	  #if defined( POSTGRESQL )
; 2949 :       if ( SetCursorFirstEntityByAttr( vDTE, "TE_FieldDataRelKey", "ZKey",
; 2950 :                                        vDTE, "TE_FieldDataRel", "ZKey", "TE_TablRec" ) >= 0 )
; 2951 : 	  {
; 2952 :    if ( CheckExistenceOfEntity( vDTE, "ER_Entity" ) >= zCURSOR_SET )
; 2953 : 
; 2954 : 	  if ( CheckExistenceOfEntity( vDTE, "ER_EntIdentifier" ) >= zCURSOR_SET &&
; 2955 : 	       CompareAttributeToString( vDTE, "ER_EntIdentifier",
; 2956 : 										  "SystemMaintained", "Y" ) == 0  )
; 2957 : 			{
; 2958 : 			      zstrcat( pchEnd, "PRIMARY KEY" );
; 2959 : 
; 2960 : 			}
; 2961 : 			else
; 2962 : 			      zstrcat( pchEnd, NOT_NULL_FIELD );
; 2963 : 	  }
; 2964 : 	  else
; 2965 : 	        zstrcat( pchEnd, NOT_NULL_FIELD );
; 2966 : 
; 2967 : 	  
; 2968 : 	  #else
; 2969 :       zstrcat( pchEnd, NOT_NULL_FIELD );

	push	OFFSET FLAT:??_C@_08IDDA@NOT?5NULL?$AA@	; `string'
	mov	ecx, DWORD PTR _pchEnd$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 2972 :    else

	jmp	SHORT $L31078
$L31075:

; 2973 :       zstrcat( pchEnd, NULL_FIELD );

	push	OFFSET FLAT:??_C@_08FGIB@NULL?5?5?5?5?$AA@ ; `string'
	mov	edx, DWORD PTR _pchEnd$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
$L31078:

; 2974 : 
; 2975 :    pchEnd = pchLine + zstrlen( pchLine );

	mov	eax, DWORD PTR _pchLine$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _pchLine$[ebp]
	add	ecx, eax
	mov	DWORD PTR _pchEnd$[ebp], ecx

; 2976 : 
; 2977 :    return( 0 );

	xor	ax, ax
$L31002:

; 2978 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$L32363:
	DD	$L31056
	DD	$L31044
	DD	$L31052
	DD	$L31041
	DD	$L31053
	DD	$L31048
	DD	$L31050
	DD	$L31046
	DD	$L31062
	DD	$L31054
	DD	$L31064
	DD	$L31066
$L32362:
	DB	0
	DB	1
	DB	11					; 0000000bH
	DB	2
	DB	11					; 0000000bH
	DB	3
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	4
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	5
	DB	6
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	3
	DB	7
	DB	8
	DB	9
	DB	11					; 0000000bH
	DB	10					; 0000000aH
_fnBuildColumn@12 ENDP
_TEXT	ENDS
PUBLIC	_fnBuildFK_Index@8
PUBLIC	??_C@_0N@HJOL@DefaultOwner?$AA@			; `string'
PUBLIC	??_C@_0P@CNMG@SQL_TableOwner?$AA@		; `string'
PUBLIC	??_C@_01PJCK@?4?$AA@				; `string'
PUBLIC	??_C@_0BD@KOPE@MaxTableNameLength?$AA@		; `string'
PUBLIC	??_C@_04DKMG@Desc?$AA@				; `string'
PUBLIC	??_C@_02BOOO@?$CK?1?$AA@			; `string'
PUBLIC	??_C@_02FCCF@?1?$CK?$AA@			; `string'
PUBLIC	??_C@_0CE@EPOC@?$CFs?5Index?5for?5Relationship?5?9?5?8?$CFs?8@ ; `string'
PUBLIC	??_C@_04BBDM@ZKey?$AA@				; `string'
PUBLIC	??_C@_0L@OGL@?$CFs_?$CFs_?$CFld0?$AA@		; `string'
PUBLIC	??_C@_0BN@IFEM@B_AEIOUYBCDFGHJKLMNPQRSTVWXZ?$AA@ ; `string'
PUBLIC	??_C@_00A@?$AA@					; `string'
PUBLIC	??_C@_01PAOO@B?$AA@				; `string'
PUBLIC	??_C@_0BF@BFOD@CREATE?5INDEX?5?$CFs?$CFs?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BE@IBEH@?5?5?5?5?5?5?5ON?5?$CFs?$CFs?5?$CI?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_01FCOA@?5?$AA@				; `string'
PUBLIC	??_C@_0M@JBMN@?$CF?$CKs?5?$CFs?5?$CJ?5?$CFs?$AA@ ; `string'
EXTRN	_strcpy:NEAR
EXTRN	_UfCompressName@32:NEAR
;	COMDAT ??_C@_00A@?$AA@
; File C:\10C\a\oe\KZHSQLXB.C
_BSS	SEGMENT
??_C@_00A@?$AA@ DB 01H DUP (?)				; `string'
_BSS	ENDS
;	COMDAT ??_C@_0N@HJOL@DefaultOwner?$AA@
_DATA	SEGMENT
??_C@_0N@HJOL@DefaultOwner?$AA@ DB 'DefaultOwner', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@CNMG@SQL_TableOwner?$AA@
_DATA	SEGMENT
??_C@_0P@CNMG@SQL_TableOwner?$AA@ DB 'SQL_TableOwner', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PJCK@?4?$AA@
_DATA	SEGMENT
??_C@_01PJCK@?4?$AA@ DB '.', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@KOPE@MaxTableNameLength?$AA@
_DATA	SEGMENT
??_C@_0BD@KOPE@MaxTableNameLength?$AA@ DB 'MaxTableNameLength', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_04DKMG@Desc?$AA@
_DATA	SEGMENT
??_C@_04DKMG@Desc?$AA@ DB 'Desc', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02BOOO@?$CK?1?$AA@
_DATA	SEGMENT
??_C@_02BOOO@?$CK?1?$AA@ DB '*/', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02FCCF@?1?$CK?$AA@
_DATA	SEGMENT
??_C@_02FCCF@?1?$CK?$AA@ DB '/*', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CE@EPOC@?$CFs?5Index?5for?5Relationship?5?9?5?8?$CFs?8@
_DATA	SEGMENT
??_C@_0CE@EPOC@?$CFs?5Index?5for?5Relationship?5?9?5?8?$CFs?8@ DB '%s Ind'
	DB	'ex for Relationship - ''%s'' %s', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_04BBDM@ZKey?$AA@
_DATA	SEGMENT
??_C@_04BBDM@ZKey?$AA@ DB 'ZKey', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@OGL@?$CFs_?$CFs_?$CFld0?$AA@
_DATA	SEGMENT
??_C@_0L@OGL@?$CFs_?$CFs_?$CFld0?$AA@ DB '%s_%s_%ld0', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@IFEM@B_AEIOUYBCDFGHJKLMNPQRSTVWXZ?$AA@
_DATA	SEGMENT
??_C@_0BN@IFEM@B_AEIOUYBCDFGHJKLMNPQRSTVWXZ?$AA@ DB 'B_AEIOUYBCDFGHJKLMNP'
	DB	'QRSTVWXZ', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PAOO@B?$AA@
_DATA	SEGMENT
??_C@_01PAOO@B?$AA@ DB 'B', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@BFOD@CREATE?5INDEX?5?$CFs?$CFs?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BF@BFOD@CREATE?5INDEX?5?$CFs?$CFs?5?$CFs?$AA@ DB 'CREATE INDEX %s%'
	DB	's %s', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@IBEH@?5?5?5?5?5?5?5ON?5?$CFs?$CFs?5?$CI?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BE@IBEH@?5?5?5?5?5?5?5ON?5?$CFs?$CFs?5?$CI?5?$CFs?$AA@ DB '       '
	DB	'ON %s%s ( %s', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FCOA@?5?$AA@
_DATA	SEGMENT
??_C@_01FCOA@?5?$AA@ DB ' ', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@JBMN@?$CF?$CKs?5?$CFs?5?$CJ?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0M@JBMN@?$CF?$CKs?5?$CFs?5?$CJ?5?$CFs?$AA@ DB '%*s %s ) %s', 00H ; `string'
_DATA	ENDS
_TEXT	SEGMENT
_vDTE$ = 8
_f$ = 12
_szLine$ = -836
_pch$ = -72
_szKeyName$ = -332
_szOwner$ = -68
_szTableName$ = -952
_pchDefaultOwner$ = -884
_szWorkIdxName$ = -1472
_szDBH_DataObjectName$ = -880
_nMaxTableNameLth$ = -76
_lZKey$ = -956
_vDBH_Data$ = -844
_vTZTEDBLO$ = -336
_vTZDBHODO$ = -840
_l$31108 = -1476
_fnBuildFK_Index@8 PROC NEAR

; 2982 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1476				; 000005c4H

; 2983 :    zCHAR    szLine[ 500 ];
; 2984 :    zPCHAR   pch;
; 2985 :    zCHAR    szKeyName[ MAX_NAME_LTH + 1 ];
; 2986 :    zCHAR    szOwner[ MAX_TABLENAME_LTH + 1 ];
; 2987 :    zCHAR    szTableName[ MAX_TABLENAME_LTH + 1 ];
; 2988 :    zPCHAR   pchDefaultOwner;
; 2989 :    zCHAR    szWorkIdxName[ BUFF_SIZE * 2 + 1 ];
; 2990 :    zCHAR    szDBH_DataObjectName[ zZEIDON_NAME_LTH + 1 ];
; 2991 :    zUSHORT  nMaxTableNameLth = MAX_TABLENAME_LTH;

	mov	WORD PTR _nMaxTableNameLth$[ebp], 64	; 00000040H

; 2992 :    zLONG    lZKey;
; 2993 :    zVIEW    vDBH_Data;
; 2994 :    zVIEW    vTZTEDBLO;
; 2995 :    zVIEW    vTZDBHODO = 0;

	mov	DWORD PTR _vTZDBHODO$[ebp], 0

; 2996 : 
; 2997 :    GetAddrForAttribute( &pchDefaultOwner, vDTE, "TE_DBMS_Source",
; 2998 :                         "DefaultOwner" );

	push	OFFSET FLAT:??_C@_0N@HJOL@DefaultOwner?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pchDefaultOwner$[ebp]
	push	ecx
	call	_GetAddrForAttribute@16

; 2999 :    if ( pchDefaultOwner == 0 || pchDefaultOwner[ 0 ] == 0 )

	cmp	DWORD PTR _pchDefaultOwner$[ebp], 0
	je	SHORT $L31101
	mov	edx, DWORD PTR _pchDefaultOwner$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $L31100
$L31101:

; 3000 :       pchDefaultOwner = 0;

	mov	DWORD PTR _pchDefaultOwner$[ebp], 0
$L31100:

; 3001 : 
; 3002 :    GetStringFromAttribute( szOwner, vDTE, "TE_TablRec", "SQL_TableOwner" );

	push	OFFSET FLAT:??_C@_0P@CNMG@SQL_TableOwner?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 3003 :    if ( szOwner[ 0 ] == 0 && pchDefaultOwner )

	movsx	eax, BYTE PTR _szOwner$[ebp]
	test	eax, eax
	jne	SHORT $L31103
	cmp	DWORD PTR _pchDefaultOwner$[ebp], 0
	je	SHORT $L31103

; 3004 :       zstrcpy( szOwner, pchDefaultOwner );

	mov	ecx, DWORD PTR _pchDefaultOwner$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
$L31103:

; 3005 : 
; 3006 :    if ( szOwner[ 0 ] )

	movsx	eax, BYTE PTR _szOwner$[ebp]
	test	eax, eax
	je	SHORT $L31104

; 3007 :       zstrcat( szOwner, "." );

	push	OFFSET FLAT:??_C@_01PJCK@?4?$AA@	; `string'
	lea	ecx, DWORD PTR _szOwner$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
$L31104:

; 3008 : 
; 3009 :    // If it exists get the object that defines the dbhandler type.
; 3010 :    GetViewByName( &vTZTEDBLO, "TZTEDBLO", vDTE, zLEVEL_TASK );

	push	2
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_08IAKB@TZTEDBLO?$AA@	; `string'
	lea	eax, DWORD PTR _vTZTEDBLO$[ebp]
	push	eax
	call	_GetViewByName@16

; 3011 :    if ( vTZTEDBLO )

	cmp	DWORD PTR _vTZTEDBLO$[ebp], 0
	je	SHORT $L31106

; 3012 :       SetCursorFirstEntityByAttr( vTZTEDBLO, "TE_DBMS_Source", "DBMS",
; 3013 :                                   vDTE,      "TE_DBMS_Source", "DBMS", 0 );

	push	0
	push	OFFSET FLAT:??_C@_04EALC@DBMS?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_04EALC@DBMS?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	edx, DWORD PTR _vTZTEDBLO$[ebp]
	push	edx
	call	_SetCursorFirstEntityByAttr@28
$L31106:

; 3014 : 
; 3015 :    // Try to get the OI that contains DBH-specific data.
; 3016 :    SetOI_FromBlob( &vDBH_Data, szDBH_DataObjectName, vDTE, vDTE,
; 3017 :                    "TE_DBMS_Source", "DBH_Data", zNOI_OKAY );

	push	512					; 00000200H
	push	OFFSET FLAT:??_C@_08DKGC@DBH_Data?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szDBH_DataObjectName$[ebp]
	push	edx
	lea	eax, DWORD PTR _vDBH_Data$[ebp]
	push	eax
	call	_SetOI_FromBlob@28

; 3018 : 
; 3019 : #if defined( ACCESS ) || defined( MYSQL ) || defined( ODBC ) || \
; 3020 :     defined( POSTGRESQL ) || defined( SQLSERVER )
; 3021 : 
; 3022 :    // Try to get the ODBC definition.
; 3023 :    SetOI_FromBlob( &vTZDBHODO, 0, vDTE, vTZTEDBLO,
; 3024 :                    "TE_DBMS_Source", "DBH_Data", zNOI_OKAY );

	push	512					; 00000200H
	push	OFFSET FLAT:??_C@_08DKGC@DBH_Data?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	ecx, DWORD PTR _vTZTEDBLO$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _vTZDBHODO$[ebp]
	push	eax
	call	_SetOI_FromBlob@28

; 3025 : 
; 3026 :    // Check to see if there is DBH data set in the TE.
; 3027 :    if ( vDBH_Data )

	cmp	DWORD PTR _vDBH_Data$[ebp], 0
	je	SHORT $L31109

; 3029 :       zLONG l;
; 3030 : 
; 3031 :       // Check to see if there is an max length override.
; 3032 :       if ( GetIntegerFromAttribute( &l, vDBH_Data, "ODBC",
; 3033 :                                     "MaxTableNameLength" ) != -1 )

	push	OFFSET FLAT:??_C@_0BD@KOPE@MaxTableNameLength?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_04JENC@ODBC?$AA@	; `string'
	mov	ecx, DWORD PTR _vDBH_Data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _l$31108[ebp]
	push	edx
	call	_GetIntegerFromAttribute@16
	movsx	eax, ax
	cmp	eax, -1
	je	SHORT $L31109

; 3035 :          nMaxTableNameLth = (zSHORT) l;

	mov	cx, WORD PTR _l$31108[ebp]
	mov	WORD PTR _nMaxTableNameLth$[ebp], cx
$L31109:

; 3038 : 
; 3039 :    if ( vTZDBHODO )

	cmp	DWORD PTR _vTZDBHODO$[ebp], 0
	je	SHORT $L31112

; 3040 :       DropView( vTZDBHODO );

	mov	edx, DWORD PTR _vTZDBHODO$[ebp]
	push	edx
	call	_DropView@4
$L31112:

; 3041 : #endif
; 3042 : 
; 3043 :    if ( vDBH_Data )

	cmp	DWORD PTR _vDBH_Data$[ebp], 0
	je	SHORT $L31113

; 3044 :       DropView( vDBH_Data );

	mov	eax, DWORD PTR _vDBH_Data$[ebp]
	push	eax
	call	_DropView@4
$L31113:

; 3045 : 
; 3046 :    GetStringFromAttribute( szTableName, vDTE, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTableName$[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 3047 :    RemoveBrackets( szTableName );

	lea	eax, DWORD PTR _szTableName$[ebp]
	push	eax
	call	_RemoveBrackets
	add	esp, 4

; 3048 : 
; 3049 :    // Generate a comment identifying the relationship.
; 3050 :    GetAddrForAttribute( &pch, vDTE, "TE_FieldDataRel", "Desc" );

	push	OFFSET FLAT:??_C@_04DKMG@Desc?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pch$[ebp]
	push	edx
	call	_GetAddrForAttribute@16

; 3051 :    if ( pch && pch[ 0 ] )

	cmp	DWORD PTR _pch$[ebp], 0
	je	SHORT $L31119
	mov	eax, DWORD PTR _pch$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $L31119

; 3053 :       zsprintf( szLine, "%s Index for Relationship - '%s' %s",
; 3054 :                 COMMENT_START, pch, COMMENT_END );

	push	OFFSET FLAT:??_C@_02BOOO@?$CK?1?$AA@	; `string'
	mov	edx, DWORD PTR _pch$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_02FCCF@?1?$CK?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0CE@EPOC@?$CFs?5Index?5for?5Relationship?5?9?5?8?$CFs?8@ ; `string'
	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 3055 : 
; 3056 :       if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31119

; 3057 :          return( -1 );

	or	ax, -1
	jmp	$L31085
$L31119:

; 3059 : 
; 3060 :    GetIntegerFromAttribute( &lZKey, vDTE, "TE_FieldDataRel", "ZKey" );

	push	OFFSET FLAT:??_C@_04BBDM@ZKey?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _lZKey$[ebp]
	push	edx
	call	_GetIntegerFromAttribute@16

; 3061 :    GetStringFromAttribute( szKeyName, vDTE, "TE_FieldDataRel", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szKeyName$[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 3062 :    RemoveBrackets( szKeyName );

	lea	edx, DWORD PTR _szKeyName$[ebp]
	push	edx
	call	_RemoveBrackets
	add	esp, 4

; 3063 : 
; 3064 :    // The base name for the index is a concatenation of the table and
; 3065 :    // key name.  To ensure that the index name is unique, we also use the
; 3066 :    // zkey value.
; 3067 :    // NOTE: Becaues of a bug in UfCompressName, we tack on a extra '0' to the
; 3068 :    // name so that the zkey does not get truncated.
; 3069 :    zsprintf( szWorkIdxName, "%s_%s_%ld0", szTableName, szKeyName, lZKey );

	mov	eax, DWORD PTR _lZKey$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szKeyName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTableName$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0L@OGL@?$CFs_?$CFs_?$CFld0?$AA@ ; `string'
	lea	eax, DWORD PTR _szWorkIdxName$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 3070 : 
; 3071 :    // Make sure that the index name is a valid length.
; 3072 :    UfCompressName( szWorkIdxName, szWorkIdxName, nMaxTableNameLth,
; 3073 :                    "", "B", "", "B_AEIOUYBCDFGHJKLMNPQRSTVWXZ", 0 );

	push	0
	push	OFFSET FLAT:??_C@_0BN@IFEM@B_AEIOUYBCDFGHJKLMNPQRSTVWXZ?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	push	OFFSET FLAT:??_C@_01PAOO@B?$AA@		; `string'
	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	mov	cx, WORD PTR _nMaxTableNameLth$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szWorkIdxName$[ebp]
	push	edx
	lea	eax, DWORD PTR _szWorkIdxName$[ebp]
	push	eax
	call	_UfCompressName@32

; 3074 : 
; 3075 :    zsprintf( szLine, "CREATE INDEX %s%s %s",
; 3076 :              szOwner, szWorkIdxName, CONTINUATION_STR );

	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	lea	ecx, DWORD PTR _szWorkIdxName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0BF@BFOD@CREATE?5INDEX?5?$CFs?$CFs?5?$CFs?$AA@ ; `string'
	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 3077 :    if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31126

; 3078 :       return( -1 );

	or	ax, -1
	jmp	$L31085
$L31126:

; 3079 : 
; 3080 :    zsprintf( szLine, "       ON %s%s ( %s",
; 3081 :              szOwner, szTableName, CONTINUATION_STR );

	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	lea	ecx, DWORD PTR _szTableName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0BE@IBEH@?5?5?5?5?5?5?5ON?5?$CFs?$CFs?5?$CI?5?$CFs?$AA@ ; `string'
	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 3082 :    if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31128

; 3083 :       return( -1 );

	or	ax, -1
	jmp	SHORT $L31085
$L31128:

; 3084 : 
; 3085 :    // Write Key-Name.
; 3086 :    zsprintf( szLine, "%*s %s ) %s",
; 3087 :              (zSHORT) COLUMN_INDENT, " ",
; 3088 :              szKeyName,
; 3089 :              LINE_TERMINATOR );

	push	OFFSET FLAT:??_C@_01FAJB@?$DL?$AA@	; `string'
	lea	ecx, DWORD PTR _szKeyName$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_01FCOA@?5?$AA@	; `string'
	push	10					; 0000000aH
	push	OFFSET FLAT:??_C@_0M@JBMN@?$CF?$CKs?5?$CFs?5?$CJ?5?$CFs?$AA@ ; `string'
	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 24					; 00000018H

; 3090 :    if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31132

; 3091 :       return( -1 );

	or	ax, -1
	jmp	SHORT $L31085
$L31132:

; 3092 : 
; 3093 :    // Write a blank line.
; 3094 :    if ( fnWriteLine( vDTE, f, " " ) < 0 )

	push	OFFSET FLAT:??_C@_01FCOA@?5?$AA@	; `string'
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31133

; 3095 :       return( -1 );

	or	ax, -1
	jmp	SHORT $L31085
$L31133:

; 3096 : 
; 3097 :    return( 0 );

	xor	ax, ax
$L31085:

; 3098 : }

	mov	esp, ebp
	pop	ebp
	ret	8
_fnBuildFK_Index@8 ENDP
_TEXT	ENDS
PUBLIC	_fnBuildIndexFromTablRecKey@12
PUBLIC	??_C@_09CNO@ER_Entity?$AA@			; `string'
PUBLIC	??_C@_0BP@GKMP@?$CFs?5Main?5key?5for?5Entity?5?9?5?$CFs?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_09CEBI@IndexName?$AA@			; `string'
PUBLIC	??_C@_0O@LKEB@TE_TablRecKey?$AA@		; `string'
PUBLIC	??_C@_0BD@EGMP@TE_FieldDataRelKey?$AA@		; `string'
PUBLIC	??_C@_0M@EFNH@U?$CFs_?$CFs_?$CFld0?$AA@		; `string'
PUBLIC	??_C@_02DILL@?$CFs?$AA@				; `string'
PUBLIC	??_C@_0BM@HCMD@CREATE?5UNIQUE?5INDEX?5?$CFs?$CFs?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0L@OGBL@?$CF?$CKs?5?$CFs?0?5?$CFs?$AA@	; `string'
EXTRN	_CheckExistenceOfEntity@8:NEAR
EXTRN	_SetCursorNextEntity@12:NEAR
EXTRN	_SetCursorFirstEntity@12:NEAR
;	COMDAT ??_C@_09CNO@ER_Entity?$AA@
; File C:\10C\a\oe\KZHSQLXB.C
_DATA	SEGMENT
??_C@_09CNO@ER_Entity?$AA@ DB 'ER_Entity', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@GKMP@?$CFs?5Main?5key?5for?5Entity?5?9?5?$CFs?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BP@GKMP@?$CFs?5Main?5key?5for?5Entity?5?9?5?$CFs?5?$CFs?$AA@ DB '%'
	DB	's Main key for Entity - %s %s', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09CEBI@IndexName?$AA@
_DATA	SEGMENT
??_C@_09CEBI@IndexName?$AA@ DB 'IndexName', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@LKEB@TE_TablRecKey?$AA@
_DATA	SEGMENT
??_C@_0O@LKEB@TE_TablRecKey?$AA@ DB 'TE_TablRecKey', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@EGMP@TE_FieldDataRelKey?$AA@
_DATA	SEGMENT
??_C@_0BD@EGMP@TE_FieldDataRelKey?$AA@ DB 'TE_FieldDataRelKey', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@EFNH@U?$CFs_?$CFs_?$CFld0?$AA@
_DATA	SEGMENT
??_C@_0M@EFNH@U?$CFs_?$CFs_?$CFld0?$AA@ DB 'U%s_%s_%ld0', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_02DILL@?$CFs?$AA@
_DATA	SEGMENT
??_C@_02DILL@?$CFs?$AA@ DB '%s', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@HCMD@CREATE?5UNIQUE?5INDEX?5?$CFs?$CFs?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BM@HCMD@CREATE?5UNIQUE?5INDEX?5?$CFs?$CFs?5?$CFs?$AA@ DB 'CREATE U'
	DB	'NIQUE INDEX %s%s %s', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@OGBL@?$CF?$CKs?5?$CFs?0?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0L@OGBL@?$CF?$CKs?5?$CFs?0?5?$CFs?$AA@ DB '%*s %s, %s', 00H ; `string'
_DATA	ENDS
_TEXT	SEGMENT
_vDTE$ = 8
_bUnique$ = 12
_f$ = 16
_nLoop$ = -332
_szLine$ = -836
_szOwner$ = -324
_pchDefaultOwner$ = -1140
_szDBH_DataObjectName$ = -880
_nMaxTableNameLth$ = -328
_vDBH_Data$ = -844
_vTZTEDBLO$ = -336
_vTZDBHODO$ = -840
_szTableName$ = -1136
_szName$ = -256
_szWorkIdxName$ = -1656
_l$31160 = -1660
_pch$31167 = -1664
_szEntityName$31173 = -1920
_lZKey$31174 = -1924
_fnBuildIndexFromTablRecKey@12 PROC NEAR

; 3102 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1924				; 00000784H

; 3103 :    zSHORT   nLoop;
; 3104 :    zCHAR    szLine[ 500 ];
; 3105 :    zCHAR    szOwner[ MAX_TABLENAME_LTH + 1 ];
; 3106 :    zPCHAR   pchDefaultOwner;
; 3107 :    zCHAR    szDBH_DataObjectName[ zZEIDON_NAME_LTH + 1 ];
; 3108 :    zUSHORT  nMaxTableNameLth = MAX_TABLENAME_LTH;

	mov	WORD PTR _nMaxTableNameLth$[ebp], 64	; 00000040H

; 3109 :    zVIEW    vDBH_Data;
; 3110 :    zVIEW    vTZTEDBLO;
; 3111 :    zVIEW    vTZDBHODO = 0;

	mov	DWORD PTR _vTZDBHODO$[ebp], 0

; 3112 :    zCHAR    szTableName[ MAX_NAME_LTH + 1 ];
; 3113 :    zCHAR    szName[ MAX_NAME_LTH + 1 ];
; 3114 :    zCHAR    szWorkIdxName[ BUFF_SIZE * 2 + 1 ];
; 3115 : 
; 3116 : 
; 3117 :    GetAddrForAttribute( &pchDefaultOwner, vDTE, "TE_DBMS_Source",
; 3118 :                         "DefaultOwner" );

	push	OFFSET FLAT:??_C@_0N@HJOL@DefaultOwner?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pchDefaultOwner$[ebp]
	push	ecx
	call	_GetAddrForAttribute@16

; 3119 :    if ( pchDefaultOwner == 0 || pchDefaultOwner[ 0 ] == 0 )

	cmp	DWORD PTR _pchDefaultOwner$[ebp], 0
	je	SHORT $L31155
	mov	edx, DWORD PTR _pchDefaultOwner$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $L31154
$L31155:

; 3120 :       pchDefaultOwner = 0;

	mov	DWORD PTR _pchDefaultOwner$[ebp], 0
$L31154:

; 3121 : 
; 3122 :    GetStringFromAttribute( szOwner, vDTE, "TE_TablRec", "SQL_TableOwner" );

	push	OFFSET FLAT:??_C@_0P@CNMG@SQL_TableOwner?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 3123 :    if ( szOwner[ 0 ] == 0 && pchDefaultOwner )

	movsx	eax, BYTE PTR _szOwner$[ebp]
	test	eax, eax
	jne	SHORT $L31156
	cmp	DWORD PTR _pchDefaultOwner$[ebp], 0
	je	SHORT $L31156

; 3124 :       zstrcpy( szOwner, pchDefaultOwner );

	mov	ecx, DWORD PTR _pchDefaultOwner$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
$L31156:

; 3125 : 
; 3126 :    if ( szOwner[ 0 ] )

	movsx	eax, BYTE PTR _szOwner$[ebp]
	test	eax, eax
	je	SHORT $L31157

; 3127 :       zstrcat( szOwner, "." );

	push	OFFSET FLAT:??_C@_01PJCK@?4?$AA@	; `string'
	lea	ecx, DWORD PTR _szOwner$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
$L31157:

; 3128 : 
; 3129 :    // If it exists get the object that defines the dbhandler type.
; 3130 :    GetViewByName( &vTZTEDBLO, "TZTEDBLO", vDTE, zLEVEL_TASK );

	push	2
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_08IAKB@TZTEDBLO?$AA@	; `string'
	lea	eax, DWORD PTR _vTZTEDBLO$[ebp]
	push	eax
	call	_GetViewByName@16

; 3131 :    if ( vTZTEDBLO )

	cmp	DWORD PTR _vTZTEDBLO$[ebp], 0
	je	SHORT $L31158

; 3132 :       SetCursorFirstEntityByAttr( vTZTEDBLO, "TE_DBMS_Source", "DBMS",
; 3133 :                                   vDTE,      "TE_DBMS_Source", "DBMS", 0 );

	push	0
	push	OFFSET FLAT:??_C@_04EALC@DBMS?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_04EALC@DBMS?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	edx, DWORD PTR _vTZTEDBLO$[ebp]
	push	edx
	call	_SetCursorFirstEntityByAttr@28
$L31158:

; 3134 : 
; 3135 :    // Try to get the OI that contains DBH-specific data.
; 3136 :    SetOI_FromBlob( &vDBH_Data, szDBH_DataObjectName, vDTE, vDTE,
; 3137 :                    "TE_DBMS_Source", "DBH_Data", zNOI_OKAY );

	push	512					; 00000200H
	push	OFFSET FLAT:??_C@_08DKGC@DBH_Data?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szDBH_DataObjectName$[ebp]
	push	edx
	lea	eax, DWORD PTR _vDBH_Data$[ebp]
	push	eax
	call	_SetOI_FromBlob@28

; 3138 : 
; 3139 : #if defined( ACCESS ) || defined( MYSQL ) || defined( ODBC ) || \
; 3140 :     defined( POSTGRESQL ) || defined( SQLSERVER )
; 3141 : 
; 3142 :    // Try to get the ODBC definition.
; 3143 :    SetOI_FromBlob( &vTZDBHODO, 0, vDTE, vTZTEDBLO,
; 3144 :                    "TE_DBMS_Source", "DBH_Data", zNOI_OKAY );

	push	512					; 00000200H
	push	OFFSET FLAT:??_C@_08DKGC@DBH_Data?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	ecx, DWORD PTR _vTZTEDBLO$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _vTZDBHODO$[ebp]
	push	eax
	call	_SetOI_FromBlob@28

; 3145 : 
; 3146 :    // Check to see if there is DBH data set in the TE.
; 3147 :    if ( vDBH_Data )

	cmp	DWORD PTR _vDBH_Data$[ebp], 0
	je	SHORT $L31161

; 3149 :       zLONG l;
; 3150 : 
; 3151 :       // Check to see if there is an max length override.
; 3152 :       if ( GetIntegerFromAttribute( &l, vDBH_Data, "ODBC",
; 3153 :                                     "MaxTableNameLength" ) != -1 )

	push	OFFSET FLAT:??_C@_0BD@KOPE@MaxTableNameLength?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_04JENC@ODBC?$AA@	; `string'
	mov	ecx, DWORD PTR _vDBH_Data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _l$31160[ebp]
	push	edx
	call	_GetIntegerFromAttribute@16
	movsx	eax, ax
	cmp	eax, -1
	je	SHORT $L31161

; 3155 :          nMaxTableNameLth = (zSHORT) l;

	mov	cx, WORD PTR _l$31160[ebp]
	mov	WORD PTR _nMaxTableNameLth$[ebp], cx
$L31161:

; 3158 : 
; 3159 :    if ( vTZDBHODO )

	cmp	DWORD PTR _vTZDBHODO$[ebp], 0
	je	SHORT $L31163

; 3160 :       DropView( vTZDBHODO );

	mov	edx, DWORD PTR _vTZDBHODO$[ebp]
	push	edx
	call	_DropView@4
$L31163:

; 3161 : #endif
; 3162 : 
; 3163 :    if ( vDBH_Data )

	cmp	DWORD PTR _vDBH_Data$[ebp], 0
	je	SHORT $L31164

; 3164 :       DropView( vDBH_Data );

	mov	eax, DWORD PTR _vDBH_Data$[ebp]
	push	eax
	call	_DropView@4
$L31164:

; 3165 : 
; 3166 :    // Write comment.
; 3167 :    if ( CheckExistenceOfEntity( vDTE, "ER_Entity" ) >= zCURSOR_SET )

	push	OFFSET FLAT:??_C@_09CNO@ER_Entity?$AA@	; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_CheckExistenceOfEntity@8
	movsx	edx, ax
	test	edx, edx
	jl	SHORT $L31169

; 3169 :       zPCHAR pch;
; 3170 : 
; 3171 :       GetAddrForAttribute( &pch, vDTE, "ER_Entity", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_09CNO@ER_Entity?$AA@	; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pch$31167[ebp]
	push	ecx
	call	_GetAddrForAttribute@16

; 3172 :       zsprintf( szLine, "%s Main key for Entity - %s %s",
; 3173 :                 COMMENT_START, pch, COMMENT_END );

	push	OFFSET FLAT:??_C@_02BOOO@?$CK?1?$AA@	; `string'
	mov	edx, DWORD PTR _pch$31167[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_02FCCF@?1?$CK?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BP@GKMP@?$CFs?5Main?5key?5for?5Entity?5?9?5?$CFs?5?$CFs?$AA@ ; `string'
	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 3174 : 
; 3175 :       if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31169

; 3176 :          return( -1 );

	or	ax, -1
	jmp	$L31141
$L31169:

; 3178 : 
; 3179 :    GetStringFromAttribute( szTableName, vDTE, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTableName$[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 3180 :    RemoveBrackets( szTableName );

	lea	eax, DWORD PTR _szTableName$[ebp]
	push	eax
	call	_RemoveBrackets
	add	esp, 4

; 3181 : 
; 3182 :    // If an IndexName value exists in TE_TablRecKey, use it.  Otherwise
; 3183 :    // us the Name value.
; 3184 :    GetStringFromAttribute( szName, vDTE, "TE_TablRecKey", "IndexName" );

	push	OFFSET FLAT:??_C@_09CEBI@IndexName?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0O@LKEB@TE_TablRecKey?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szName$[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 3185 :    if ( szName[ 0 ] == 0 )

	movsx	eax, BYTE PTR _szName$[ebp]
	test	eax, eax
	jne	$L31172

; 3187 :       zCHAR  szEntityName[ MAX_NAME_LTH + 1 ];
; 3188 :       zLONG  lZKey;
; 3189 : 
; 3190 :       GetStringFromAttribute( szEntityName, vDTE, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szEntityName$31173[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 3191 :       RemoveBrackets( szEntityName );

	lea	eax, DWORD PTR _szEntityName$31173[ebp]
	push	eax
	call	_RemoveBrackets
	add	esp, 4

; 3192 : 
; 3193 :       GetStringFromAttribute( szName, vDTE, "TE_TablRecKey", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0O@LKEB@TE_TablRecKey?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szName$[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 3194 :       RemoveBrackets( szName );

	lea	eax, DWORD PTR _szName$[ebp]
	push	eax
	call	_RemoveBrackets
	add	esp, 4

; 3195 : 
; 3196 :       GetIntegerFromAttribute( &lZKey, vDTE, "TE_FieldDataRelKey", "ZKey" );

	push	OFFSET FLAT:??_C@_04BBDM@ZKey?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BD@EGMP@TE_FieldDataRelKey?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _lZKey$31174[ebp]
	push	edx
	call	_GetIntegerFromAttribute@16

; 3197 : 
; 3198 :       // The base name for the index is a concatenation of the table and
; 3199 :       // key name.  To ensure that the index name is unique, we also use the
; 3200 :       // zkey value.
; 3201 :       // NOTE: Becaues of a bug in UfCompressName, we tack on a extra '0' to
; 3202 :       // the name so that the zkey does not get truncated.
; 3203 :       if ( bUnique )

	mov	eax, DWORD PTR _bUnique$[ebp]
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L31176

; 3204 :          zsprintf( szWorkIdxName, "U%s_%s_%ld0", szEntityName, szName, lZKey );

	mov	ecx, DWORD PTR _lZKey$31174[ebp]
	push	ecx
	lea	edx, DWORD PTR _szName$[ebp]
	push	edx
	lea	eax, DWORD PTR _szEntityName$31173[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0M@EFNH@U?$CFs_?$CFs_?$CFld0?$AA@ ; `string'
	lea	ecx, DWORD PTR _szWorkIdxName$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 3205 :       else

	jmp	SHORT $L31178
$L31176:

; 3206 :          zsprintf( szWorkIdxName, "%s_%s_%ld0", szEntityName, szName, lZKey );

	mov	edx, DWORD PTR _lZKey$31174[ebp]
	push	edx
	lea	eax, DWORD PTR _szName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szEntityName$31173[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_0L@OGL@?$CFs_?$CFs_?$CFld0?$AA@ ; `string'
	lea	edx, DWORD PTR _szWorkIdxName$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H
$L31178:

; 3208 :    else

	jmp	SHORT $L31179
$L31172:

; 3210 :       RemoveBrackets( szName );

	lea	eax, DWORD PTR _szName$[ebp]
	push	eax
	call	_RemoveBrackets
	add	esp, 4

; 3211 :       zsprintf( szWorkIdxName, "%s", szName );

	lea	ecx, DWORD PTR _szName$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_02DILL@?$CFs?$AA@	; `string'
	lea	edx, DWORD PTR _szWorkIdxName$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
$L31179:

; 3213 : 
; 3214 :    // Make sure that the index name is a valid length.
; 3215 :    UfCompressName( szWorkIdxName, szWorkIdxName, nMaxTableNameLth,
; 3216 :                    "", "B", "", "B_AEIOUYBCDFGHJKLMNPQRSTVWXZ", 0 );

	push	0
	push	OFFSET FLAT:??_C@_0BN@IFEM@B_AEIOUYBCDFGHJKLMNPQRSTVWXZ?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	push	OFFSET FLAT:??_C@_01PAOO@B?$AA@		; `string'
	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	mov	ax, WORD PTR _nMaxTableNameLth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szWorkIdxName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szWorkIdxName$[ebp]
	push	edx
	call	_UfCompressName@32

; 3217 : 
; 3218 :    if ( bUnique )

	mov	eax, DWORD PTR _bUnique$[ebp]
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L31181

; 3220 :       zsprintf( szLine, "CREATE UNIQUE INDEX %s%s %s",
; 3221 :                 szOwner, szWorkIdxName, CONTINUATION_STR );

	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	lea	ecx, DWORD PTR _szWorkIdxName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0BM@HCMD@CREATE?5UNIQUE?5INDEX?5?$CFs?$CFs?5?$CFs?$AA@ ; `string'
	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 3223 :    else

	jmp	SHORT $L31183
$L31181:

; 3224 :       zsprintf( szLine, "CREATE INDEX %s%s %s",
; 3225 :                 szOwner, szWorkIdxName, CONTINUATION_STR );

	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	lea	ecx, DWORD PTR _szWorkIdxName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0BF@BFOD@CREATE?5INDEX?5?$CFs?$CFs?5?$CFs?$AA@ ; `string'
	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H
$L31183:

; 3226 : 
; 3227 : 
; 3228 :    if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31184

; 3229 :       return( -1 );

	or	ax, -1
	jmp	$L31141
$L31184:

; 3230 : 
; 3231 :    zsprintf( szLine, "       ON %s%s ( %s",
; 3232 :              szOwner, szTableName, CONTINUATION_STR );

	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	lea	ecx, DWORD PTR _szTableName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0BE@IBEH@?5?5?5?5?5?5?5ON?5?$CFs?$CFs?5?$CI?5?$CFs?$AA@ ; `string'
	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 3233 : 
; 3234 :    if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31185

; 3235 :       return( -1 );

	or	ax, -1
	jmp	$L31141
$L31185:

; 3236 : 
; 3237 :    //=================================================================
; 3238 :    //
; 3239 :    // Generate column names for index.
; 3240 :    //
; 3241 :    //=================================================================
; 3242 :    nLoop = SetCursorFirstEntity( vDTE, "TE_FieldDataRelKey", 0 );

	push	0
	push	OFFSET FLAT:??_C@_0BD@EGMP@TE_FieldDataRelKey?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nLoop$[ebp], ax
$L31187:

; 3243 :    while( nLoop >= zCURSOR_SET )

	movsx	edx, WORD PTR _nLoop$[ebp]
	test	edx, edx
	jl	$L31188

; 3245 :       GetStringFromAttribute (szName, vDTE, "TE_FieldDataRelKey", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BD@EGMP@TE_FieldDataRelKey?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szName$[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 3246 :       RemoveBrackets( szName );

	lea	edx, DWORD PTR _szName$[ebp]
	push	edx
	call	_RemoveBrackets
	add	esp, 4

; 3247 : 
; 3248 :       nLoop = SetCursorNextEntity( vDTE, "TE_FieldDataRelKey", 0 );

	push	0
	push	OFFSET FLAT:??_C@_0BD@EGMP@TE_FieldDataRelKey?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nLoop$[ebp], ax

; 3249 :       if ( nLoop >= zCURSOR_SET  )

	movsx	ecx, WORD PTR _nLoop$[ebp]
	test	ecx, ecx
	jl	SHORT $L31189

; 3251 :          // More keys coming, so print line with continuation stuff.
; 3252 :          zsprintf( szLine, "%*s %s, %s",
; 3253 :                    (zSHORT) COLUMN_INDENT, " ",
; 3254 :                    szName, CONTINUATION_STR );

	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	lea	edx, DWORD PTR _szName$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_01FCOA@?5?$AA@	; `string'
	push	10					; 0000000aH
	push	OFFSET FLAT:??_C@_0L@OGBL@?$CF?$CKs?5?$CFs?0?5?$CFs?$AA@ ; `string'
	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 24					; 00000018H

; 3256 :       else

	jmp	SHORT $L31192
$L31189:

; 3258 :          // No more keys, so end current command.
; 3259 :          zsprintf( szLine, "%*s %s ) %s",
; 3260 :                    (zSHORT) COLUMN_INDENT, " ",
; 3261 :                    szName, LINE_TERMINATOR );

	push	OFFSET FLAT:??_C@_01FAJB@?$DL?$AA@	; `string'
	lea	ecx, DWORD PTR _szName$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_01FCOA@?5?$AA@	; `string'
	push	10					; 0000000aH
	push	OFFSET FLAT:??_C@_0M@JBMN@?$CF?$CKs?5?$CFs?5?$CJ?5?$CFs?$AA@ ; `string'
	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 24					; 00000018H
$L31192:

; 3263 : 
; 3264 :       if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31194

; 3265 :          return( -1 );

	or	ax, -1
	jmp	SHORT $L31141
$L31194:

; 3266 : 
; 3267 :    } // while ( nLoop >= zCURSOR_SET )...

	jmp	$L31187
$L31188:

; 3268 : 
; 3269 :    return( 0 );

	xor	ax, ax
$L31141:

; 3270 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_fnBuildIndexFromTablRecKey@12 ENDP
_TEXT	ENDS
PUBLIC	_fnBuildCreateMainIndex@8
_TEXT	SEGMENT
_vDTE$ = 8
_f$ = 12
_bFirstIndex$ = -4
_nLoop$ = -8
_fnBuildCreateMainIndex@8 PROC NEAR

; 3274 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3275 :    zBOOL    bFirstIndex;
; 3276 :    zSHORT   nLoop;
; 3277 : 
; 3278 :    // Loop through each of the keys for the current table.
; 3279 :    bFirstIndex = TRUE;

	mov	BYTE PTR _bFirstIndex$[ebp], 1

; 3280 :    for ( nLoop = SetCursorFirstEntity( vDTE, "TE_TablRecKey", 0 );
; 3281 :          nLoop >= zCURSOR_SET;
; 3282 :          nLoop = SetCursorNextEntity( vDTE, "TE_TablRecKey", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0O@LKEB@TE_TablRecKey?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nLoop$[ebp], ax
	jmp	SHORT $L31203
$L31204:
	push	0
	push	OFFSET FLAT:??_C@_0O@LKEB@TE_TablRecKey?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nLoop$[ebp], ax
$L31203:
	movsx	edx, WORD PTR _nLoop$[ebp]
	test	edx, edx
	jl	SHORT $L31205

; 3285 :       if ( fnBuildIndexFromTablRecKey( vDTE, bFirstIndex, f ) == -1 )

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	cl, BYTE PTR _bFirstIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_fnBuildIndexFromTablRecKey@12
	movsx	eax, ax
	cmp	eax, -1
	jne	SHORT $L31206

; 3286 :          return( -1 );

	or	ax, -1
	jmp	SHORT $L31200
$L31206:

; 3287 : 
; 3288 :       bFirstIndex = FALSE;

	mov	BYTE PTR _bFirstIndex$[ebp], 0

; 3289 : 
; 3290 :    } // for ( "TE_TablRecKey"... )...

	jmp	SHORT $L31204
$L31205:

; 3291 : 
; 3292 :    // Write a blank line.
; 3293 :    if ( fnWriteLine( vDTE, f, " " ) < 0 )

	push	OFFSET FLAT:??_C@_01FCOA@?5?$AA@	; `string'
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31207

; 3294 :       return( -1 );

	or	ax, -1
	jmp	SHORT $L31200
$L31207:

; 3295 : 
; 3296 :    return( 0 );

	xor	ax, ax
$L31200:

; 3297 : }

	mov	esp, ebp
	pop	ebp
	ret	8
_fnBuildCreateMainIndex@8 ENDP
_TEXT	ENDS
PUBLIC	_fnBuildCreateTable@8
PUBLIC	??_C@_0BC@PCJM@?$CFs?5Entity?5?9?5?$CFs?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BH@HMHF@CREATE?5TABLE?5?$CFs?$CFs?5?$CI?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_04BAFE@?$CF?$CKs?5?$AA@			; `string'
PUBLIC	??_C@_04GPPE@?0?5?$CFs?$AA@			; `string'
PUBLIC	??_C@_05NLEE@?5?$CJ?5?$CFs?$AA@			; `string'
;	COMDAT ??_C@_0BC@PCJM@?$CFs?5Entity?5?9?5?$CFs?5?$CFs?$AA@
; File C:\10C\a\oe\KZHSQLXB.C
_DATA	SEGMENT
??_C@_0BC@PCJM@?$CFs?5Entity?5?9?5?$CFs?5?$CFs?$AA@ DB '%s Entity - %s %s'
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@HMHF@CREATE?5TABLE?5?$CFs?$CFs?5?$CI?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BH@HMHF@CREATE?5TABLE?5?$CFs?$CFs?5?$CI?5?$CFs?$AA@ DB 'CREATE TAB'
	DB	'LE %s%s ( %s', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_04BAFE@?$CF?$CKs?5?$AA@
_DATA	SEGMENT
??_C@_04BAFE@?$CF?$CKs?5?$AA@ DB '%*s ', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04GPPE@?0?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_04GPPE@?0?5?$CFs?$AA@ DB ', %s', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05NLEE@?5?$CJ?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_05NLEE@?5?$CJ?5?$CFs?$AA@ DB ' ) %s', 00H		; `string'
_DATA	ENDS
_TEXT	SEGMENT
_vDTE$ = 8
_f$ = 12
_szTableName$ = -648
_pch$ = -72
_pchEnd$ = -388
_pchDefaultOwner$ = -392
_szLine$ = -340
_szOwner$ = -68
_szDBH_DataObjectName$ = -384
_nLoop$ = -80
_vDBH_Data$ = -348
_vTZTEDBLO$ = -84
_vTZDBHODO$ = -344
_nMaxTableNameLth$ = -76
_l$31228 = -652
_fnBuildCreateTable@8 PROC NEAR

; 3301 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 652				; 0000028cH

; 3302 :    zCHAR    szTableName[ MAX_NAME_LTH + 1 ];
; 3303 :    zPCHAR   pch;
; 3304 :    zPCHAR   pchEnd;
; 3305 :    zPCHAR   pchDefaultOwner;
; 3306 :    zCHAR    szLine[ 256 ];
; 3307 :    zCHAR    szOwner[ MAX_TABLENAME_LTH + 1 ];
; 3308 :    zCHAR    szDBH_DataObjectName[ zZEIDON_NAME_LTH + 1 ];
; 3309 :    zSHORT   nLoop;
; 3310 :    zVIEW    vDBH_Data;
; 3311 :    zVIEW    vTZTEDBLO = 0;

	mov	DWORD PTR _vTZTEDBLO$[ebp], 0

; 3312 :    zVIEW    vTZDBHODO = 0;

	mov	DWORD PTR _vTZDBHODO$[ebp], 0

; 3313 :    zUSHORT  nMaxTableNameLth = MAX_TABLENAME_LTH;

	mov	WORD PTR _nMaxTableNameLth$[ebp], 64	; 00000040H

; 3314 : 
; 3315 :    // If it exists get the object that defines the dbhandler type.
; 3316 :    GetViewByName( &vTZTEDBLO, "TZTEDBLO", vDTE, zLEVEL_TASK );

	push	2
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_08IAKB@TZTEDBLO?$AA@	; `string'
	lea	ecx, DWORD PTR _vTZTEDBLO$[ebp]
	push	ecx
	call	_GetViewByName@16

; 3317 :    if ( vTZTEDBLO )

	cmp	DWORD PTR _vTZTEDBLO$[ebp], 0
	je	SHORT $L31226

; 3318 :       SetCursorFirstEntityByAttr( vTZTEDBLO, "TE_DBMS_Source", "DBMS",
; 3319 :                                   vDTE,      "TE_DBMS_Source", "DBMS", 0 );

	push	0
	push	OFFSET FLAT:??_C@_04EALC@DBMS?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_04EALC@DBMS?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	eax, DWORD PTR _vTZTEDBLO$[ebp]
	push	eax
	call	_SetCursorFirstEntityByAttr@28
$L31226:

; 3320 : 
; 3321 :    // Try to get the OI that contains DBH-specific data.
; 3322 :    SetOI_FromBlob( &vDBH_Data, szDBH_DataObjectName, vDTE, vDTE,
; 3323 :                    "TE_DBMS_Source", "DBH_Data", zNOI_OKAY );

	push	512					; 00000200H
	push	OFFSET FLAT:??_C@_08DKGC@DBH_Data?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _szDBH_DataObjectName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vDBH_Data$[ebp]
	push	ecx
	call	_SetOI_FromBlob@28

; 3324 : 
; 3325 : #if defined( ACCESS ) || defined( MYSQL ) || defined( ODBC ) || \
; 3326 :     defined( POSTGRESQL ) || defined( SQLSERVER )
; 3327 : 
; 3328 :    // Try to get the ODBC definition.
; 3329 :    SetOI_FromBlob( &vTZDBHODO, 0, vDTE, vTZTEDBLO,
; 3330 :                    "TE_DBMS_Source", "DBH_Data", zNOI_OKAY );

	push	512					; 00000200H
	push	OFFSET FLAT:??_C@_08DKGC@DBH_Data?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	edx, DWORD PTR _vTZTEDBLO$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _vTZDBHODO$[ebp]
	push	ecx
	call	_SetOI_FromBlob@28

; 3331 : 
; 3332 :    // Check to see if there is DBH data set in the TE.
; 3333 :    if ( vDBH_Data )

	cmp	DWORD PTR _vDBH_Data$[ebp], 0
	je	SHORT $L31229

; 3335 :       zLONG l;
; 3336 : 
; 3337 :       // Check to see if there is an max length override.
; 3338 :       if ( GetIntegerFromAttribute( &l, vDBH_Data, "ODBC",
; 3339 :                                     "MaxTableNameLength" ) != -1 )

	push	OFFSET FLAT:??_C@_0BD@KOPE@MaxTableNameLength?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_04JENC@ODBC?$AA@	; `string'
	mov	edx, DWORD PTR _vDBH_Data$[ebp]
	push	edx
	lea	eax, DWORD PTR _l$31228[ebp]
	push	eax
	call	_GetIntegerFromAttribute@16
	movsx	ecx, ax
	cmp	ecx, -1
	je	SHORT $L31229

; 3341 :          nMaxTableNameLth = (zSHORT) l;

	mov	dx, WORD PTR _l$31228[ebp]
	mov	WORD PTR _nMaxTableNameLth$[ebp], dx
$L31229:

; 3344 : 
; 3345 :    if ( vTZDBHODO )

	cmp	DWORD PTR _vTZDBHODO$[ebp], 0
	je	SHORT $L31231

; 3346 :       DropView( vTZDBHODO );

	mov	eax, DWORD PTR _vTZDBHODO$[ebp]
	push	eax
	call	_DropView@4
$L31231:

; 3347 : 
; 3348 : #endif
; 3349 : 
; 3350 :    if ( vDBH_Data )

	cmp	DWORD PTR _vDBH_Data$[ebp], 0
	je	SHORT $L31232

; 3351 :       DropView( vDBH_Data );

	mov	ecx, DWORD PTR _vDBH_Data$[ebp]
	push	ecx
	call	_DropView@4
$L31232:

; 3352 : 
; 3353 :    GetAddrForAttribute( &pchDefaultOwner, vDTE, "TE_DBMS_Source",
; 3354 :                         "DefaultOwner" );

	push	OFFSET FLAT:??_C@_0N@HJOL@DefaultOwner?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _pchDefaultOwner$[ebp]
	push	eax
	call	_GetAddrForAttribute@16

; 3355 :    if ( pchDefaultOwner == 0 || pchDefaultOwner[ 0 ] == 0 )

	cmp	DWORD PTR _pchDefaultOwner$[ebp], 0
	je	SHORT $L31234
	mov	ecx, DWORD PTR _pchDefaultOwner$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $L31233
$L31234:

; 3356 :       pchDefaultOwner = 0;

	mov	DWORD PTR _pchDefaultOwner$[ebp], 0
$L31233:

; 3357 : 
; 3358 :    GetStringFromAttribute( szTableName, vDTE, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szTableName$[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 3359 :    RemoveBrackets( szTableName );

	lea	edx, DWORD PTR _szTableName$[ebp]
	push	edx
	call	_RemoveBrackets
	add	esp, 4

; 3360 : 
; 3361 :    /* Position on the first column of the table */
; 3362 :    nLoop = SetCursorFirstEntity( vDTE, "TE_FieldDataRel", 0 );

	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nLoop$[ebp], ax

; 3363 :    if ( nLoop < zCURSOR_SET )

	movsx	ecx, WORD PTR _nLoop$[ebp]
	test	ecx, ecx
	jge	SHORT $L31235

; 3364 :       return( 0 );

	xor	ax, ax
	jmp	$L31213
$L31235:

; 3365 : 
; 3366 :    // Write the CREATE TABLE Statement and the comment only if
; 3367 :    // there are columns in a table.
; 3368 :    if ( CheckExistenceOfEntity( vDTE, "ER_Entity" ) >= zCURSOR_SET )

	push	OFFSET FLAT:??_C@_09CNO@ER_Entity?$AA@	; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_CheckExistenceOfEntity@8
	movsx	eax, ax
	test	eax, eax
	jl	SHORT $L31238

; 3370 :       GetAddrForAttribute( &pch, vDTE, "ER_Entity", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_09CNO@ER_Entity?$AA@	; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pch$[ebp]
	push	edx
	call	_GetAddrForAttribute@16

; 3371 :       zsprintf( szLine, "%s Entity - %s %s",
; 3372 :                 COMMENT_START, pch, COMMENT_END );

	push	OFFSET FLAT:??_C@_02BOOO@?$CK?1?$AA@	; `string'
	mov	eax, DWORD PTR _pch$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_02FCCF@?1?$CK?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BC@PCJM@?$CFs?5Entity?5?9?5?$CFs?5?$CFs?$AA@ ; `string'
	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 3373 : 
; 3374 :       if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31238

; 3375 :          return( -1 );

	or	ax, -1
	jmp	$L31213
$L31238:

; 3377 : 
; 3378 :    // Determine owner.
; 3379 :    GetStringFromAttribute( szOwner, vDTE, "TE_TablRec", "SQL_TableOwner" );

	push	OFFSET FLAT:??_C@_0P@CNMG@SQL_TableOwner?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _szOwner$[ebp]
	push	eax
	call	_GetStringFromAttribute@16

; 3380 :    if ( szOwner[ 0 ] == 0 && pchDefaultOwner )

	movsx	ecx, BYTE PTR _szOwner$[ebp]
	test	ecx, ecx
	jne	SHORT $L31239
	cmp	DWORD PTR _pchDefaultOwner$[ebp], 0
	je	SHORT $L31239

; 3381 :       zstrcpy( szOwner, pchDefaultOwner );

	mov	edx, DWORD PTR _pchDefaultOwner$[ebp]
	push	edx
	lea	eax, DWORD PTR _szOwner$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
$L31239:

; 3382 : 
; 3383 :    if ( szOwner[ 0 ] )

	movsx	ecx, BYTE PTR _szOwner$[ebp]
	test	ecx, ecx
	je	SHORT $L31240

; 3384 :       zstrcat( szOwner, "." );

	push	OFFSET FLAT:??_C@_01PJCK@?4?$AA@	; `string'
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
$L31240:

; 3385 : 
; 3386 :    zsprintf( szLine, "CREATE TABLE %s%s ( %s",
; 3387 :              szOwner, szTableName, CONTINUATION_STR );

	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	lea	eax, DWORD PTR _szTableName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szOwner$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_0BH@HMHF@CREATE?5TABLE?5?$CFs?$CFs?5?$CI?5?$CFs?$AA@ ; `string'
	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 3388 : 
; 3389 :    if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31242

; 3390 :       return( -1 );

	or	ax, -1
	jmp	$L31213
$L31242:

; 3391 : 
; 3392 :    //=================================================================
; 3393 :    //
; 3394 :    // Generate column definitions.
; 3395 :    //
; 3396 :    //=================================================================
; 3397 : 
; 3398 :    // Loop for each column in the table.
; 3399 :    while ( nLoop >= zCURSOR_SET )

	movsx	eax, WORD PTR _nLoop$[ebp]
	test	eax, eax
	jl	$L31245

; 3401 :       zsprintf( szLine, "%*s ", (zSHORT) COLUMN_INDENT, " " );

	push	OFFSET FLAT:??_C@_01FCOA@?5?$AA@	; `string'
	push	10					; 0000000aH
	push	OFFSET FLAT:??_C@_04BAFE@?$CF?$CKs?5?$AA@ ; `string'
	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H

; 3402 :       fnBuildColumn( vDTE, f, szLine );

	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_fnBuildColumn@12

; 3403 : 
; 3404 :       pchEnd = &szLine[ zstrlen( szLine ) ];

	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	lea	eax, DWORD PTR _szLine$[ebp+eax]
	mov	DWORD PTR _pchEnd$[ebp], eax

; 3405 : 
; 3406 :       nLoop = SetCursorNextEntity( vDTE, "TE_FieldDataRel", 0 );

	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nLoop$[ebp], ax

; 3407 :       if ( nLoop >= zCURSOR_SET )

	movsx	edx, WORD PTR _nLoop$[ebp]
	test	edx, edx
	jl	SHORT $L31248

; 3408 :          // More columns comming, so add continuation stuff.
; 3409 :          zsprintf( pchEnd, ", %s", CONTINUATION_STR );

	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	push	OFFSET FLAT:??_C@_04GPPE@?0?5?$CFs?$AA@	; `string'
	mov	eax, DWORD PTR _pchEnd$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 3410 :       else

	jmp	SHORT $L31250
$L31248:

; 3411 :          // No more columns, so terminate line.
; 3412 :          zsprintf( pchEnd, " ) %s", LINE_TERMINATOR );

	push	OFFSET FLAT:??_C@_01FAJB@?$DL?$AA@	; `string'
	push	OFFSET FLAT:??_C@_05NLEE@?5?$CJ?5?$CFs?$AA@ ; `string'
	mov	ecx, DWORD PTR _pchEnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
$L31250:

; 3413 : 
; 3414 :       if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31252

; 3415 :          return( -1 );

	or	ax, -1
	jmp	SHORT $L31213
$L31252:

; 3416 : 
; 3417 :    } // while ( nLoop >= zCURSOR_SET )...

	jmp	$L31242
$L31245:

; 3418 : 
; 3419 :    // Write a blank line.
; 3420 :    if ( fnWriteLine( vDTE, f, " " ) < 0 )

	push	OFFSET FLAT:??_C@_01FCOA@?5?$AA@	; `string'
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31253

; 3421 :       return( -1 );

	or	ax, -1
	jmp	SHORT $L31213
$L31253:

; 3422 : 
; 3423 :    #if COMMIT_EVERY_TABLE
; 3424 :       if ( fnWriteLine( vDTE, f, COMMIT_STR ) < 0 )
; 3425 :          return( -1 );
; 3426 : 
; 3427 :       if ( fnWriteLine( vDTE, f, " " ) < 0 )
; 3428 :          return( -1 );
; 3429 :    #endif
; 3430 : 
; 3431 :    return( 0 );

	xor	ax, ax
$L31213:

; 3432 : }

	mov	esp, ebp
	pop	ebp
	ret	8
_fnBuildCreateTable@8 ENDP
_TEXT	ENDS
PUBLIC	_BuildDDL@16
PUBLIC	??_C@_01OAK@N?$AA@				; `string'
PUBLIC	??_C@_04PMIC@?4ddl?$AA@				; `string'
PUBLIC	??_C@_0BM@MOMC@?$CFs?5CREATE?5DATABASE?5?$CFs?5?$CFs?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BO@IABD@?$CFs?5Indexes?5for?5Entity?5?9?5?$CFs?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_05FCKF@?$CFs_?$CFs?$AA@			; `string'
PUBLIC	??_C@_07PHBB@B_AEIOU?$AA@			; `string'
PUBLIC	??_C@_04LGDF@?$CF02d?$AA@			; `string'
PUBLIC	??_C@_0BN@DHGH@DROP?5TABLE?5IF?5EXISTS?5?$CFs?$CFs?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BP@OLHP@GRANT?5ALL?5ON?5?$CFs?$CFs?5TO?5PUBLIC?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_05EGAJ@File?5?$AA@			; `string'
PUBLIC	??_C@_0BK@MMCL@?5is?5created?5successfully?$CB?$AA@ ; `string'
PUBLIC	??_C@_0BG@PJOD@Couldn?8t?5create?5file?5?$AA@	; `string'
PUBLIC	??_C@_0N@PLHO@Generate?5DDL?$AA@		; `string'
EXTRN	_SysOpenFile@12:NEAR
EXTRN	_MB_SetMessage@12:NEAR
EXTRN	_CreateViewFromViewForTask@12:NEAR
EXTRN	_SysCloseFile@12:NEAR
;	COMDAT ??_C@_01OAK@N?$AA@
; File C:\10C\a\oe\KZHSQLXB.C
_DATA	SEGMENT
??_C@_01OAK@N?$AA@ DB 'N', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_04PMIC@?4ddl?$AA@
_DATA	SEGMENT
??_C@_04PMIC@?4ddl?$AA@ DB '.ddl', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@MOMC@?$CFs?5CREATE?5DATABASE?5?$CFs?5?$CFs?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BM@MOMC@?$CFs?5CREATE?5DATABASE?5?$CFs?5?$CFs?5?$CFs?$AA@ DB '%s C'
	DB	'REATE DATABASE %s %s %s', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BO@IABD@?$CFs?5Indexes?5for?5Entity?5?9?5?$CFs?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BO@IABD@?$CFs?5Indexes?5for?5Entity?5?9?5?$CFs?5?$CFs?$AA@ DB '%s '
	DB	'Indexes for Entity - %s %s', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05FCKF@?$CFs_?$CFs?$AA@
_DATA	SEGMENT
??_C@_05FCKF@?$CFs_?$CFs?$AA@ DB '%s_%s', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07PHBB@B_AEIOU?$AA@
_DATA	SEGMENT
??_C@_07PHBB@B_AEIOU?$AA@ DB 'B_AEIOU', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_04LGDF@?$CF02d?$AA@
_DATA	SEGMENT
??_C@_04LGDF@?$CF02d?$AA@ DB '%02d', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BN@DHGH@DROP?5TABLE?5IF?5EXISTS?5?$CFs?$CFs?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BN@DHGH@DROP?5TABLE?5IF?5EXISTS?5?$CFs?$CFs?5?$CFs?$AA@ DB 'DROP T'
	DB	'ABLE IF EXISTS %s%s %s', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@OLHP@GRANT?5ALL?5ON?5?$CFs?$CFs?5TO?5PUBLIC?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BP@OLHP@GRANT?5ALL?5ON?5?$CFs?$CFs?5TO?5PUBLIC?5?$CFs?$AA@ DB 'GRA'
	DB	'NT ALL ON %s%s TO PUBLIC %s', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05EGAJ@File?5?$AA@
_DATA	SEGMENT
??_C@_05EGAJ@File?5?$AA@ DB 'File ', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@MMCL@?5is?5created?5successfully?$CB?$AA@
_DATA	SEGMENT
??_C@_0BK@MMCL@?5is?5created?5successfully?$CB?$AA@ DB ' is created succe'
	DB	'ssfully!', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@PJOD@Couldn?8t?5create?5file?5?$AA@
_DATA	SEGMENT
??_C@_0BG@PJOD@Couldn?8t?5create?5file?5?$AA@ DB 'Couldn''t create file ', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@PLHO@Generate?5DDL?$AA@
_DATA	SEGMENT
??_C@_0N@PLHO@Generate?5DDL?$AA@ DB 'Generate DDL', 00H	; `string'
_DATA	ENDS
_TEXT	SEGMENT
_vDTE$ = 8
_vEMD$ = 12
_pchFileName$ = 16
_vSubtask$ = 20
_pchTableName$ = -4
_pchDatabaseName$ = -1452
_pch$ = -84
_f$ = -1136
_szLine$ = -1132
_nLth$ = -348
_nRC$ = -352
_nRCTable$ = -344
_nLoop$ = -872
_vTZTEDBLO$ = -876
_vDBH_Data$ = -1144
_szDBH_DataObjectName$ = -1184
_nMaxTableNameLth$ = -868
_szTableName$ = -1448
_szEntityName$ = -340
_pchDefaultOwner$ = -1192
_szOwner$ = -80
_pchGenCreateIdxs$ = -1188
_pchGenDropIdxs$ = -12
_pchGenCreateTables$ = -1148
_pchGenDropTables$ = -8
_szMsg$ = -864
_usForeignKeyCntForTable$31302 = -1456
_szName$31312 = -1712
_szWorkIdxName$31313 = -2228
_szKeyName$31321 = -2488
_pchKeyType$31322 = -2232
_szWorkIdxName$31323 = -3004
_pchKeyType$31353 = -3008
_BuildDDL@16 PROC NEAR

; 3457 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 3008				; 00000bc0H

; 3458 :    zPCHAR   pchTableName;
; 3459 :    zPCHAR   pchDatabaseName;
; 3460 :    zPCHAR   pch;
; 3461 :    zLONG    f = -1;

	mov	DWORD PTR _f$[ebp], -1

; 3462 :    zCHAR    szLine[ 256 ];
; 3463 :    zLONG    nLth;
; 3464 :    zSHORT   nRC = zCALL_ERROR;

	mov	WORD PTR _nRC$[ebp], -16		; fffffff0H

; 3465 :    zSHORT   nRCTable;
; 3466 :    zSHORT   nLoop;
; 3467 :    zVIEW    vTZTEDBLO;
; 3468 :    zVIEW    vDBH_Data = 0;

	mov	DWORD PTR _vDBH_Data$[ebp], 0

; 3469 :    zCHAR    szDBH_DataObjectName[ zZEIDON_NAME_LTH + 1 ];
; 3470 :    zUSHORT  nMaxTableNameLth = MAX_TABLENAME_LTH;

	mov	WORD PTR _nMaxTableNameLth$[ebp], 64	; 00000040H

; 3471 :    zCHAR    szTableName[ MAX_NAME_LTH + 1 ];
; 3472 :    zCHAR    szEntityName[ MAX_NAME_LTH + 1 ];
; 3473 :    zPCHAR   pchDefaultOwner;
; 3474 :    zCHAR    szOwner[ MAX_TABLENAME_LTH + 1 ];
; 3475 :    zPCHAR   pchGenCreateIdxs   = "Y";

	mov	DWORD PTR _pchGenCreateIdxs$[ebp], OFFSET FLAT:??_C@_01PCJP@Y?$AA@ ; `string'

; 3476 :    zPCHAR   pchGenDropIdxs     = "N";

	mov	DWORD PTR _pchGenDropIdxs$[ebp], OFFSET FLAT:??_C@_01OAK@N?$AA@ ; `string'

; 3477 :    zPCHAR   pchGenCreateTables = "Y";

	mov	DWORD PTR _pchGenCreateTables$[ebp], OFFSET FLAT:??_C@_01PCJP@Y?$AA@ ; `string'

; 3478 :    zPCHAR   pchGenDropTables   = "Y";

	mov	DWORD PTR _pchGenDropTables$[ebp], OFFSET FLAT:??_C@_01PCJP@Y?$AA@ ; `string'

; 3479 : 
; 3480 :    zCHAR    szMsg[ 512 ];
; 3481 : 
; 3482 : #if defined( ACCESS ) || defined( MYSQL ) || defined( ODBC ) || \
; 3483 :     defined( POSTGRESQL ) || defined( SQLSERVER )
; 3484 :    zVIEW    vTZDBHODO;
; 3485 : #endif
; 3486 : 
; 3487 :    // If TE_DBMS_Source entity doesn't exist, then nothing to generate.
; 3488 :    if ( CheckExistenceOfEntity( vDTE, "TE_DBMS_Source" ) != zCURSOR_SET )

	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_CheckExistenceOfEntity@8
	movsx	ecx, ax
	test	ecx, ecx
	je	SHORT $L31288

; 3489 :       return( zCALL_ERROR );

	mov	ax, -16					; fffffff0H
	jmp	$L31263
$L31288:

; 3490 : 
; 3491 :    // If it exists get the object that defines the dbhandler type.
; 3492 :    GetViewByName( &vTZTEDBLO, "TZTEDBLO", vSubtask, zLEVEL_TASK );

	push	2
	mov	edx, DWORD PTR _vSubtask$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_08IAKB@TZTEDBLO?$AA@	; `string'
	lea	eax, DWORD PTR _vTZTEDBLO$[ebp]
	push	eax
	call	_GetViewByName@16

; 3493 :    if ( vTZTEDBLO )

	cmp	DWORD PTR _vTZTEDBLO$[ebp], 0
	je	SHORT $L31289

; 3494 :       SetCursorFirstEntityByAttr( vTZTEDBLO, "TE_DBMS_Source", "DBMS",
; 3495 :                                   vDTE,      "TE_DBMS_Source", "DBMS", 0 );

	push	0
	push	OFFSET FLAT:??_C@_04EALC@DBMS?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_04EALC@DBMS?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	edx, DWORD PTR _vTZTEDBLO$[ebp]
	push	edx
	call	_SetCursorFirstEntityByAttr@28
$L31289:

; 3496 : 
; 3497 :    // Try to get the OI that contains DBH-specific data.
; 3498 :    SetOI_FromBlob( &vDBH_Data, szDBH_DataObjectName, vDTE, vDTE,
; 3499 :                    "TE_DBMS_Source", "DBH_Data", zNOI_OKAY );

	push	512					; 00000200H
	push	OFFSET FLAT:??_C@_08DKGC@DBH_Data?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szDBH_DataObjectName$[ebp]
	push	edx
	lea	eax, DWORD PTR _vDBH_Data$[ebp]
	push	eax
	call	_SetOI_FromBlob@28

; 3500 : 
; 3501 : #if defined( SQLITE )
; 3502 : 
; 3503 :    pchGenCreateIdxs   = "N";   // Don't generate indexes for Sqlite.

	mov	DWORD PTR _pchGenCreateIdxs$[ebp], OFFSET FLAT:??_C@_01OAK@N?$AA@ ; `string'

; 3504 : 
; 3505 : #elif defined( ACCESS ) || defined( MYSQL ) || defined( ODBC ) || \
; 3506 :       defined( POSTGRESQL ) || defined( SQLSERVER )
; 3507 : 
; 3508 :    // Try to get the ODBC definition.
; 3509 :    SetOI_FromBlob( &vTZDBHODO, 0, vDTE, vTZTEDBLO,
; 3510 :                    "TE_DBMS_Source", "DBH_Data", zNOI_OKAY );
; 3511 : 
; 3512 :    // Check to see if there is DBH data set in the TE.
; 3513 :    if ( vDBH_Data )
; 3514 :    {
; 3515 :       zLONG l;
; 3516 : 
; 3517 :       // Check to see if there is an max length override.
; 3518 :       if ( GetIntegerFromAttribute( &l, vDBH_Data, "ODBC",
; 3519 :                                     "MaxTableNameLength" ) != -1 )
; 3520 :       {
; 3521 :          nMaxTableNameLth = (zSHORT) l;
; 3522 :       }
; 3523 : 
; 3524 :       // Get the conditional generate values.
; 3525 :       GetAddrForAttribute( &pchGenCreateTables, vDBH_Data, "ODBC", "GenCreateTables" );
; 3526 :       GetAddrForAttribute( &pchGenDropTables,   vDBH_Data, "ODBC", "DropTables" );
; 3527 :       GetAddrForAttribute( &pchGenCreateIdxs,   vDBH_Data, "ODBC", "GenCreateIdxs" );
; 3528 :       GetAddrForAttribute( &pchGenDropIdxs,     vDBH_Data, "ODBC", "GenDropIdxs" );
; 3529 :    }
; 3530 : 
; 3531 : #endif
; 3532 : 
; 3533 :    // Create copies of views so we can safely change the cursors.
; 3534 :    CreateViewFromViewForTask( &vDTE, vDTE, 0 );

	push	0
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_CreateViewFromViewForTask@12

; 3535 :    CreateViewFromViewForTask( &vEMD, vEMD, 0 );

	push	0
	mov	eax, DWORD PTR _vEMD$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vEMD$[ebp]
	push	ecx
	call	_CreateViewFromViewForTask@12

; 3536 : 
; 3537 :    //
; 3538 :    // Generate the DDL file name and open it.
; 3539 :    //
; 3540 :    nLth = zstrlen( pchFileName );

	mov	edx, DWORD PTR _pchFileName$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _nLth$[ebp], eax

; 3541 :    GetStringFromAttribute( pchFileName + nLth,
; 3542 :                            vDTE, "TE_DBMS_Source", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pchFileName$[ebp]
	add	ecx, DWORD PTR _nLth$[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 3543 : 
; 3544 :    // Make sure the filename isn't too long.
; 3545 :    if ( zstrlen( pchFileName + nLth ) > zBASE_FILENAME_LTH )

	mov	edx, DWORD PTR _pchFileName$[ebp]
	add	edx, DWORD PTR _nLth$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	cmp	eax, 128				; 00000080H
	jbe	SHORT $L31290

; 3546 :       pchFileName[ nLth + zBASE_FILENAME_LTH ] = 0;

	mov	eax, DWORD PTR _pchFileName$[ebp]
	add	eax, DWORD PTR _nLth$[ebp]
	mov	BYTE PTR [eax+128], 0
$L31290:

; 3547 : 
; 3548 :    zstrcat( pchFileName, ".ddl" );

	push	OFFSET FLAT:??_C@_04PMIC@?4ddl?$AA@	; `string'
	mov	ecx, DWORD PTR _pchFileName$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 3549 :    if ( (f = SysOpenFile( vDTE, pchFileName, COREFILE_WRITE )) < 0 )

	push	64					; 00000040H
	mov	edx, DWORD PTR _pchFileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysOpenFile@12
	mov	DWORD PTR _f$[ebp], eax
	cmp	DWORD PTR _f$[ebp], 0
	jge	SHORT $L31292

; 3550 :       goto EndOfFunction;

	jmp	$EndOfFunction$31293
$L31292:

; 3551 : 
; 3552 :    GetAddrForAttribute( &pchDatabaseName, vDTE, "TE_DBMS_Source", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pchDatabaseName$[ebp]
	push	edx
	call	_GetAddrForAttribute@16

; 3553 : 
; 3554 : #ifdef CREATE_DB
; 3555 :    zsprintf( szLine, "%s CREATE DATABASE %s %s %s", COMMENT_START,
; 3556 :              pchDatabaseName, COMMENT_END, LINE_TERMINATOR );

	push	OFFSET FLAT:??_C@_01FAJB@?$DL?$AA@	; `string'
	push	OFFSET FLAT:??_C@_02BOOO@?$CK?1?$AA@	; `string'
	mov	eax, DWORD PTR _pchDatabaseName$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_02FCCF@?1?$CK?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BM@MOMC@?$CFs?5CREATE?5DATABASE?5?$CFs?5?$CFs?5?$CFs?$AA@ ; `string'
	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 24					; 00000018H

; 3557 :    if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31295

; 3558 :       goto EndOfFunction;

	jmp	$EndOfFunction$31293
$L31295:

; 3559 : #endif
; 3560 : 
; 3561 :    //
; 3562 :    // Tell SQL processor what database to use.
; 3563 :    //
; 3564 : 
; 3565 : #if defined( DB2 )
; 3566 : 
; 3567 :    zsprintf( szLine, "CONNECT TO %s %s", pchDatabaseName, LINE_TERMINATOR );
; 3568 :    if ( fnWriteLine( vDTE, f, szLine ) < 0 )
; 3569 :       goto EndOfFunction;
; 3570 : 
; 3571 : #elif defined( MYSQL) || defined( SQLSERVER )
; 3572 : 
; 3573 :    #ifdef SQLITE
; 3574 :        // Skip the "USE" statement for SQLITE.
; 3575 :    #else
; 3576 :        zsprintf( szLine, "USE %s %s", pchDatabaseName, LINE_TERMINATOR );
; 3577 :        if ( fnWriteLine( vDTE, f, szLine ) < 0 )
; 3578 :          goto EndOfFunction;
; 3579 :    #endif
; 3580 : 
; 3581 : #elif defined( POSTGRESQL ) 
; 3582 : 
; 3583 :        zsprintf( szLine, "SET SCHEMA '%s' %s", pchDatabaseName, LINE_TERMINATOR );
; 3584 :        if ( fnWriteLine( vDTE, f, szLine ) < 0 )
; 3585 :          goto EndOfFunction;
; 3586 : 
; 3587 : #endif
; 3588 : 
; 3589 :    GetAddrForAttribute( &pchDefaultOwner, vDTE, "TE_DBMS_Source",
; 3590 :                         "DefaultOwner" );

	push	OFFSET FLAT:??_C@_0N@HJOL@DefaultOwner?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _pchDefaultOwner$[ebp]
	push	eax
	call	_GetAddrForAttribute@16

; 3591 :    if ( pchDefaultOwner == 0 || pchDefaultOwner[ 0 ] == 0 )

	cmp	DWORD PTR _pchDefaultOwner$[ebp], 0
	je	SHORT $L31297
	mov	ecx, DWORD PTR _pchDefaultOwner$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $L31296
$L31297:

; 3592 :       pchDefaultOwner = 0;

	mov	DWORD PTR _pchDefaultOwner$[ebp], 0
$L31296:

; 3593 : 
; 3594 :    //=================================================================
; 3595 :    //
; 3596 :    // Generate Drop Index statements.
; 3597 :    //
; 3598 :    //=================================================================
; 3599 :    if ( pchGenDropIdxs[ 0 ] != 'N' )

	mov	eax, DWORD PTR _pchGenDropIdxs$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 78					; 0000004eH
	je	$L31301

; 3601 :       // Loop for each of the tables.
; 3602 :       for ( nRCTable = SetCursorFirstEntity( vDTE, "TE_TablRec", 0 );
; 3603 :             nRCTable >= zCURSOR_SET;
; 3604 :             nRCTable = SetCursorNextEntity( vDTE, "TE_TablRec", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRCTable$[ebp], ax
	jmp	SHORT $L31299
$L31300:
	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRCTable$[ebp], ax
$L31299:
	movsx	ecx, WORD PTR _nRCTable$[ebp]
	test	ecx, ecx
	jl	$L31301

; 3606 :          zUSHORT usForeignKeyCntForTable = 0;

	mov	WORD PTR _usForeignKeyCntForTable$31302[ebp], 0

; 3607 : 
; 3608 :          GetStringFromAttribute (szTableName, vDTE, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _szTableName$[ebp]
	push	eax
	call	_GetStringFromAttribute@16

; 3609 :          pchTableName = szTableName;

	lea	ecx, DWORD PTR _szTableName$[ebp]
	mov	DWORD PTR _pchTableName$[ebp], ecx

; 3610 :          RemoveBrackets( pchTableName );

	mov	edx, DWORD PTR _pchTableName$[ebp]
	push	edx
	call	_RemoveBrackets
	add	esp, 4

; 3611 : 
; 3612 :          /* Position on the first column of the table */
; 3613 :          nLoop = SetCursorFirstEntity( vDTE, "TE_FieldDataRel", 0 );

	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nLoop$[ebp], ax

; 3614 :          if ( nLoop < zCURSOR_SET )

	movsx	ecx, WORD PTR _nLoop$[ebp]
	test	ecx, ecx
	jge	SHORT $L31303

; 3615 :             continue;

	jmp	$L31300
$L31303:

; 3616 : 
; 3617 :          // Write comment.
; 3618 :          if ( CheckExistenceOfEntity( vDTE, "ER_Entity" ) >= zCURSOR_SET )

	push	OFFSET FLAT:??_C@_09CNO@ER_Entity?$AA@	; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_CheckExistenceOfEntity@8
	movsx	eax, ax
	test	eax, eax
	jl	SHORT $L31306

; 3620 :             GetAddrForAttribute( &pch, vDTE, "ER_Entity", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_09CNO@ER_Entity?$AA@	; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pch$[ebp]
	push	edx
	call	_GetAddrForAttribute@16

; 3621 :             zsprintf( szLine, "%s Indexes for Entity - %s %s",
; 3622 :                       COMMENT_START, pch, COMMENT_END );

	push	OFFSET FLAT:??_C@_02BOOO@?$CK?1?$AA@	; `string'
	mov	eax, DWORD PTR _pch$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_02FCCF@?1?$CK?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BO@IABD@?$CFs?5Indexes?5for?5Entity?5?9?5?$CFs?5?$CFs?$AA@ ; `string'
	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 3623 : 
; 3624 :             if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31306

; 3625 :                goto EndOfFunction;

	jmp	$EndOfFunction$31293
$L31306:

; 3627 : 
; 3628 :          // Determine owner.
; 3629 :          GetStringFromAttribute( szOwner, vDTE, "TE_TablRec", "SQL_TableOwner" );

	push	OFFSET FLAT:??_C@_0P@CNMG@SQL_TableOwner?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _szOwner$[ebp]
	push	eax
	call	_GetStringFromAttribute@16

; 3630 :          if ( szOwner[ 0 ] == 0 && pchDefaultOwner )

	movsx	ecx, BYTE PTR _szOwner$[ebp]
	test	ecx, ecx
	jne	SHORT $L31307
	cmp	DWORD PTR _pchDefaultOwner$[ebp], 0
	je	SHORT $L31307

; 3631 :             zstrcpy( szOwner, pchDefaultOwner );

	mov	edx, DWORD PTR _pchDefaultOwner$[ebp]
	push	edx
	lea	eax, DWORD PTR _szOwner$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
$L31307:

; 3632 : 
; 3633 :          if ( szOwner[ 0 ] )

	movsx	ecx, BYTE PTR _szOwner$[ebp]
	test	ecx, ecx
	je	SHORT $L31308

; 3634 :             zstrcat( szOwner, "." );

	push	OFFSET FLAT:??_C@_01PJCK@?4?$AA@	; `string'
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
$L31308:

; 3635 : 
; 3636 :          //=================================================================
; 3637 :          //
; 3638 :          // Drop Unique Index.
; 3639 :          //
; 3640 :          //=================================================================
; 3641 : 
; 3642 :          // Loop through each of the keys for the current table.
; 3643 :          for ( nLoop = SetCursorFirstEntity( vDTE, "TE_TablRecKey", 0 );
; 3644 :                nLoop >= zCURSOR_SET;
; 3645 :                nLoop = SetCursorNextEntity( vDTE, "TE_TablRecKey", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0O@LKEB@TE_TablRecKey?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nLoop$[ebp], ax
	jmp	SHORT $L31309
$L31310:
	push	0
	push	OFFSET FLAT:??_C@_0O@LKEB@TE_TablRecKey?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nLoop$[ebp], ax
$L31309:
	movsx	edx, WORD PTR _nLoop$[ebp]
	test	edx, edx
	jl	$L31311

; 3647 :             zCHAR  szName[ MAX_NAME_LTH + 1 ];
; 3648 :             zCHAR  szWorkIdxName[ BUFF_SIZE * 2 + 1 ];
; 3649 : 
; 3650 :             // If an IndexName value exists in TE_TablRecKey, use it.  Otherwise
; 3651 :             // us the Name value.
; 3652 :             GetStringFromAttribute( szName, vDTE, "TE_TablRecKey", "IndexName");

	push	OFFSET FLAT:??_C@_09CEBI@IndexName?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0O@LKEB@TE_TablRecKey?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szName$31312[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 3653 :             if ( szName[ 0 ] == 0 )

	movsx	edx, BYTE PTR _szName$31312[ebp]
	test	edx, edx
	jne	SHORT $L31314

; 3655 :                GetStringFromAttribute (szEntityName, vDTE, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szEntityName$[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 3656 :                RemoveBrackets( szEntityName );

	lea	edx, DWORD PTR _szEntityName$[ebp]
	push	edx
	call	_RemoveBrackets
	add	esp, 4

; 3657 : 
; 3658 :                GetStringFromAttribute( szName, vDTE, "TE_TablRecKey", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0O@LKEB@TE_TablRecKey?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szName$31312[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 3659 :                RemoveBrackets( szName );

	lea	edx, DWORD PTR _szName$31312[ebp]
	push	edx
	call	_RemoveBrackets
	add	esp, 4

; 3660 : 
; 3661 :                zsprintf( szWorkIdxName, "%s_%s", szEntityName, szName );

	lea	eax, DWORD PTR _szName$31312[ebp]
	push	eax
	lea	ecx, DWORD PTR _szEntityName$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_05FCKF@?$CFs_?$CFs?$AA@ ; `string'
	lea	edx, DWORD PTR _szWorkIdxName$31313[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H

; 3663 :             else

	jmp	SHORT $L31316
$L31314:

; 3665 :                RemoveBrackets( szName );

	lea	eax, DWORD PTR _szName$31312[ebp]
	push	eax
	call	_RemoveBrackets
	add	esp, 4

; 3666 : 
; 3667 :                zsprintf( szWorkIdxName, "%s", szName );

	lea	ecx, DWORD PTR _szName$31312[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_02DILL@?$CFs?$AA@	; `string'
	lea	edx, DWORD PTR _szWorkIdxName$31313[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
$L31316:

; 3669 : 
; 3670 :             // Make sure that the index name is a valid length.
; 3671 :             UfCompressName( szWorkIdxName, szWorkIdxName, nMaxTableNameLth,
; 3672 :                             "", "B", "", "B_AEIOU", 1 );

	push	1
	push	OFFSET FLAT:??_C@_07PHBB@B_AEIOU?$AA@	; `string'
	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	push	OFFSET FLAT:??_C@_01PAOO@B?$AA@		; `string'
	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	mov	ax, WORD PTR _nMaxTableNameLth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szWorkIdxName$31313[ebp]
	push	ecx
	lea	edx, DWORD PTR _szWorkIdxName$31313[ebp]
	push	edx
	call	_UfCompressName@32

; 3673 : 
; 3674 :             fnBuildDropIndex( vDTE, szWorkIdxName, szOwner, pchTableName, f );

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pchTableName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	lea	eax, DWORD PTR _szWorkIdxName$31313[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_fnBuildDropIndex@20

; 3675 : 
; 3676 :          } // for ( "TE_TablRecKey"... )...

	jmp	$L31310
$L31311:

; 3677 : 
; 3678 :          //===============================================================
; 3679 :          //
; 3680 :          // Drop Index for ForeignKeys
; 3681 :          //
; 3682 :          //===============================================================
; 3683 : 
; 3684 :          // Loop through each of the keys for the current table.
; 3685 :          for ( nLoop = SetCursorFirstEntity( vDTE, "TE_FieldDataRel", 0 );
; 3686 :                nLoop >= zCURSOR_SET;
; 3687 :                nLoop = SetCursorNextEntity( vDTE, "TE_FieldDataRel", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nLoop$[ebp], ax
	jmp	SHORT $L31318
$L31319:
	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nLoop$[ebp], ax
$L31318:
	movsx	ecx, WORD PTR _nLoop$[ebp]
	test	ecx, ecx
	jl	$L31320

; 3690 :             zCHAR  szKeyName[ MAX_NAME_LTH + 1 ];
; 3691 :             zPCHAR pchKeyType;
; 3692 :             zCHAR  szWorkIdxName[ BUFF_SIZE * 2 + 1 ];
; 3693 : 
; 3694 :             // If the attribute is not a rel field try the next one.
; 3695 :             GetAddrForAttribute( &pchKeyType, vDTE, "TE_FieldDataRel",
; 3696 :                                  "DataOrRelfieldOrSet" );

	push	OFFSET FLAT:??_C@_0BE@ODFA@DataOrRelfieldOrSet?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _pchKeyType$31322[ebp]
	push	eax
	call	_GetAddrForAttribute@16

; 3697 :             if ( pchKeyType[ 0 ] != 'R' )

	mov	ecx, DWORD PTR _pchKeyType$31322[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 82					; 00000052H
	je	SHORT $L31324

; 3698 :                continue;

	jmp	SHORT $L31319
$L31324:

; 3699 : 
; 3700 :             // generate a comment identifying the relationship
; 3701 :             GetAddrForAttribute( &pch, vDTE, "TE_FieldDataRel", "Desc" );

	push	OFFSET FLAT:??_C@_04DKMG@Desc?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pch$[ebp]
	push	ecx
	call	_GetAddrForAttribute@16

; 3702 :             zsprintf( szLine, "%s Index for Relationship - '%s' %s",
; 3703 :                       COMMENT_START, pch, COMMENT_END );

	push	OFFSET FLAT:??_C@_02BOOO@?$CK?1?$AA@	; `string'
	mov	edx, DWORD PTR _pch$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_02FCCF@?1?$CK?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0CE@EPOC@?$CFs?5Index?5for?5Relationship?5?9?5?8?$CFs?8@ ; `string'
	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 3704 : 
; 3705 :             if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31325

; 3706 :                goto EndOfFunction;

	jmp	$EndOfFunction$31293
$L31325:

; 3707 : 
; 3708 :             GetStringFromAttribute( szKeyName, vDTE, "TE_FieldDataRel", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szKeyName$31321[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 3709 :             RemoveBrackets( szKeyName );

	lea	eax, DWORD PTR _szKeyName$31321[ebp]
	push	eax
	call	_RemoveBrackets
	add	esp, 4

; 3710 :             zsprintf( szWorkIdxName, "%s_%s", pchTableName, szKeyName );

	lea	ecx, DWORD PTR _szKeyName$31321[ebp]
	push	ecx
	mov	edx, DWORD PTR _pchTableName$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_05FCKF@?$CFs_?$CFs?$AA@ ; `string'
	lea	eax, DWORD PTR _szWorkIdxName$31323[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H

; 3711 : 
; 3712 :             // Make sure that the index name is a valid length.
; 3713 :             // MAX_TABLENAME_LTH - 2 because of numbering the indexname
; 3714 :             // in the last two chars.
; 3715 :             UfCompressName( szWorkIdxName, szWorkIdxName, nMaxTableNameLth,
; 3716 :                             "", "B", "", "B_AEIOU", 1 );

	push	1
	push	OFFSET FLAT:??_C@_07PHBB@B_AEIOU?$AA@	; `string'
	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	push	OFFSET FLAT:??_C@_01PAOO@B?$AA@		; `string'
	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	mov	cx, WORD PTR _nMaxTableNameLth$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szWorkIdxName$31323[ebp]
	push	edx
	lea	eax, DWORD PTR _szWorkIdxName$31323[ebp]
	push	eax
	call	_UfCompressName@32

; 3717 :             usForeignKeyCntForTable++;

	mov	cx, WORD PTR _usForeignKeyCntForTable$31302[ebp]
	add	cx, 1
	mov	WORD PTR _usForeignKeyCntForTable$31302[ebp], cx

; 3718 :             nLth = zstrlen( szWorkIdxName );

	lea	edx, DWORD PTR _szWorkIdxName$31323[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _nLth$[ebp], eax

; 3719 :             zsprintf( &szWorkIdxName[ nLth ], "%02d", usForeignKeyCntForTable );

	mov	eax, DWORD PTR _usForeignKeyCntForTable$31302[ebp]
	and	eax, 65535				; 0000ffffH
	push	eax
	push	OFFSET FLAT:??_C@_04LGDF@?$CF02d?$AA@	; `string'
	mov	ecx, DWORD PTR _nLth$[ebp]
	lea	edx, DWORD PTR _szWorkIdxName$31323[ebp+ecx]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 3720 : 
; 3721 :             fnBuildDropIndex( vDTE, szWorkIdxName, szOwner, pchTableName, f );

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pchTableName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	lea	eax, DWORD PTR _szWorkIdxName$31323[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_fnBuildDropIndex@20

; 3722 : 
; 3723 :          } // for ( "TE_FieldDataRel" )...

	jmp	$L31319
$L31320:

; 3724 : 
; 3725 :          if ( fnWriteLine( vDTE, f, "" ) < 0 )

	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31327

; 3726 :             goto EndOfFunction;

	jmp	$EndOfFunction$31293
$L31327:

; 3727 : 
; 3728 :       } // for ( "TE_TableRec" )...

	jmp	$L31300
$L31301:

; 3731 : 
; 3732 :    //=================================================================
; 3733 :    //
; 3734 :    // Generate Drop Table statements.
; 3735 :    //
; 3736 :    //=================================================================
; 3737 : 
; 3738 :    if ( pchGenDropTables[ 0 ] != 'N' )

	mov	ecx, DWORD PTR _pchGenDropTables$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 78					; 0000004eH
	je	$L31337

; 3740 :       for ( nRCTable = SetCursorFirstEntity( vDTE, "TE_TablRec", 0 );
; 3741 :             nRCTable >= zCURSOR_SET;
; 3742 :             nRCTable = SetCursorNextEntity( vDTE, "TE_TablRec", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRCTable$[ebp], ax
	jmp	SHORT $L31329
$L31330:
	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRCTable$[ebp], ax
$L31329:
	movsx	edx, WORD PTR _nRCTable$[ebp]
	test	edx, edx
	jl	$L31331

; 3744 :          /* Position on the first column of the table */
; 3745 :          /* If the table has no columns no DROP statement */
; 3746 :          nRC = SetCursorFirstEntity( vDTE, "TE_FieldDataRel", 0 );

	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax

; 3747 :          if (nRC < zCURSOR_SET)

	movsx	ecx, WORD PTR _nRC$[ebp]
	test	ecx, ecx
	jge	SHORT $L31332

; 3748 :             continue;

	jmp	SHORT $L31330
$L31332:

; 3749 : 
; 3750 :          // Determine owner.
; 3751 :          GetStringFromAttribute( szOwner, vDTE, "TE_TablRec", "SQL_TableOwner" );

	push	OFFSET FLAT:??_C@_0P@CNMG@SQL_TableOwner?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _szOwner$[ebp]
	push	eax
	call	_GetStringFromAttribute@16

; 3752 :          if ( szOwner[ 0 ] == 0 && pchDefaultOwner )

	movsx	ecx, BYTE PTR _szOwner$[ebp]
	test	ecx, ecx
	jne	SHORT $L31333
	cmp	DWORD PTR _pchDefaultOwner$[ebp], 0
	je	SHORT $L31333

; 3753 :             zstrcpy( szOwner, pchDefaultOwner );

	mov	edx, DWORD PTR _pchDefaultOwner$[ebp]
	push	edx
	lea	eax, DWORD PTR _szOwner$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
$L31333:

; 3754 : 
; 3755 :          if ( szOwner[ 0 ] )

	movsx	ecx, BYTE PTR _szOwner$[ebp]
	test	ecx, ecx
	je	SHORT $L31334

; 3756 :             zstrcat( szOwner, "." );

	push	OFFSET FLAT:??_C@_01PJCK@?4?$AA@	; `string'
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
$L31334:

; 3757 : 
; 3758 :          GetStringFromAttribute (szEntityName, vDTE, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szEntityName$[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 3759 :          pch = szEntityName;

	lea	edx, DWORD PTR _szEntityName$[ebp]
	mov	DWORD PTR _pch$[ebp], edx

; 3760 :          RemoveBrackets( pch );

	mov	eax, DWORD PTR _pch$[ebp]
	push	eax
	call	_RemoveBrackets
	add	esp, 4

; 3761 : 
; 3762 :          #if defined( SQLITE )
; 3763 :             zsprintf( szLine, "DROP TABLE IF EXISTS %s%s %s", szOwner, pch, LINE_TERMINATOR );

	push	OFFSET FLAT:??_C@_01FAJB@?$DL?$AA@	; `string'
	mov	ecx, DWORD PTR _pch$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0BN@DHGH@DROP?5TABLE?5IF?5EXISTS?5?$CFs?$CFs?5?$CFs?$AA@ ; `string'
	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 3764 :          #elif defined( MYSQL )
; 3765 :             zsprintf( szLine, "DROP TABLE IF EXISTS %s%s %s", szOwner, pch, LINE_TERMINATOR );
; 3766 :          #elif defined( POSTGRESQL )
; 3767 :             zsprintf( szLine, "DROP TABLE IF EXISTS %s%s CASCADE%s", szOwner, pch, LINE_TERMINATOR );
; 3768 :          #else
; 3769 :             zsprintf( szLine, "DROP TABLE %s%s %s", szOwner, pch, LINE_TERMINATOR );
; 3770 : 	 #endif
; 3771 : 
; 3772 :          if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31336

; 3773 :             nRC = zCALL_ERROR;

	mov	WORD PTR _nRC$[ebp], -16		; fffffff0H
$L31336:

; 3774 :       }

	jmp	$L31330
$L31331:

; 3775 : 
; 3776 :    #if defined( COMMIT_EVERY_TABLE )
; 3777 : 
; 3778 :       if ( fnWriteLine( vDTE, f, "" ) < 0 )
; 3779 :          goto EndOfFunction;
; 3780 : 
; 3781 :       if ( fnWriteLine( vDTE, f, COMMIT_STR ) < 0 )
; 3782 :          goto EndOfFunction;
; 3783 : 
; 3784 :    #endif
; 3785 : 
; 3786 :       if ( fnWriteLine( vDTE, f, "" ) < 0 )

	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31337

; 3787 :          goto EndOfFunction;

	jmp	$EndOfFunction$31293
$L31337:

; 3790 : 
; 3791 :    //=================================================================
; 3792 :    //
; 3793 :    // Generate Create Table statements.
; 3794 :    //
; 3795 :    //=================================================================
; 3796 : 
; 3797 :    if ( pchGenCreateTables[ 0 ] != 'N' )

	mov	eax, DWORD PTR _pchGenCreateTables$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 78					; 0000004eH
	je	SHORT $L31341

; 3799 :       // Loop for each of the tables.
; 3800 :       for ( nRCTable = SetCursorFirstEntity( vDTE, "TE_TablRec", 0 );
; 3801 :             nRCTable >= zCURSOR_SET;
; 3802 :             nRCTable = SetCursorNextEntity( vDTE, "TE_TablRec", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRCTable$[ebp], ax
	jmp	SHORT $L31339
$L31340:
	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRCTable$[ebp], ax
$L31339:
	movsx	ecx, WORD PTR _nRCTable$[ebp]
	test	ecx, ecx
	jl	SHORT $L31341

; 3804 :          if ( fnBuildCreateTable( vDTE, f ) == -1 )

	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_fnBuildCreateTable@8
	movsx	ecx, ax
	cmp	ecx, -1
	jne	SHORT $L31342

; 3805 :             goto EndOfFunction;

	jmp	$EndOfFunction$31293
$L31342:

; 3806 :       } // for ( "TE_TableRec" )...

	jmp	SHORT $L31340
$L31341:

; 3809 : 
; 3810 :    //=================================================================
; 3811 :    //
; 3812 :    // Generate Create Index statements.
; 3813 :    //
; 3814 :    //=================================================================
; 3815 : 
; 3816 :    if ( pchGenCreateIdxs[ 0 ] != 'N' )

	mov	edx, DWORD PTR _pchGenCreateIdxs$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 78					; 0000004eH
	je	$L31346

; 3818 :       // Loop for each of the tables.
; 3819 :       for ( nRCTable = SetCursorFirstEntity( vDTE, "TE_TablRec", 0 );
; 3820 :             nRCTable >= zCURSOR_SET;
; 3821 :             nRCTable = SetCursorNextEntity( vDTE, "TE_TablRec", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRCTable$[ebp], ax
	jmp	SHORT $L31344
$L31345:
	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRCTable$[ebp], ax
$L31344:
	movsx	eax, WORD PTR _nRCTable$[ebp]
	test	eax, eax
	jl	$L31346

; 3823 :          GetStringFromAttribute (szTableName, vDTE, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTableName$[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 3824 :          pchTableName = szTableName;

	lea	eax, DWORD PTR _szTableName$[ebp]
	mov	DWORD PTR _pchTableName$[ebp], eax

; 3825 :          RemoveBrackets( pchTableName );

	mov	ecx, DWORD PTR _pchTableName$[ebp]
	push	ecx
	call	_RemoveBrackets
	add	esp, 4

; 3826 : 
; 3827 :          /* Position on the first column of the table */
; 3828 :          nLoop = SetCursorFirstEntity( vDTE, "TE_FieldDataRel", 0 );

	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nLoop$[ebp], ax

; 3829 :          if ( nLoop < zCURSOR_SET )

	movsx	eax, WORD PTR _nLoop$[ebp]
	test	eax, eax
	jge	SHORT $L31347

; 3830 :             continue;

	jmp	SHORT $L31345
$L31347:

; 3831 : 
; 3832 :          if ( fnBuildCreateMainIndex( vDTE, f ) == -1 )

	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_fnBuildCreateMainIndex@8
	movsx	eax, ax
	cmp	eax, -1
	jne	SHORT $L31348

; 3833 :             goto EndOfFunction;

	jmp	$EndOfFunction$31293
$L31348:

; 3834 : 
; 3835 :          if ( fnWriteLine( vDTE, f, " " ) < 0 )

	push	OFFSET FLAT:??_C@_01FCOA@?5?$AA@	; `string'
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31349

; 3836 :             goto EndOfFunction;

	jmp	$EndOfFunction$31293
$L31349:

; 3837 : 
; 3838 :          #if COMMIT_EVERY_TABLE
; 3839 :                if ( fnWriteLine( vDTE, f, " " ) < 0 )
; 3840 :                   goto EndOfFunction;
; 3841 : 
; 3842 :                if ( fnWriteLine( vDTE, f, COMMIT_STR ) < 0 )
; 3843 :                   goto EndOfFunction;
; 3844 :          #endif
; 3845 : 
; 3846 :          //===============================================================
; 3847 :          //
; 3848 :          // Generate Index for ForeignKeys
; 3849 :          //
; 3850 :          //===============================================================
; 3851 : 
; 3852 :          // Loop through each of the keys for the current table.
; 3853 : 
; 3854 :          for ( nLoop = SetCursorFirstEntity( vDTE, "TE_FieldDataRel", 0 );
; 3855 :                nLoop >= zCURSOR_SET;
; 3856 :                nLoop = SetCursorNextEntity( vDTE, "TE_FieldDataRel", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nLoop$[ebp], ax
	jmp	SHORT $L31350
$L31351:
	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nLoop$[ebp], ax
$L31350:
	movsx	edx, WORD PTR _nLoop$[ebp]
	test	edx, edx
	jl	SHORT $L31352

; 3859 :             zPCHAR pchKeyType;
; 3860 : 
; 3861 :             // If the attribute is not a rel field try the next one.
; 3862 :             GetAddrForAttribute( &pchKeyType, vDTE, "TE_FieldDataRel",
; 3863 :                                  "DataOrRelfieldOrSet" );

	push	OFFSET FLAT:??_C@_0BE@ODFA@DataOrRelfieldOrSet?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pchKeyType$31353[ebp]
	push	ecx
	call	_GetAddrForAttribute@16

; 3864 :             if ( pchKeyType[ 0 ] != 'R' )

	mov	edx, DWORD PTR _pchKeyType$31353[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 82					; 00000052H
	je	SHORT $L31354

; 3865 :                continue;

	jmp	SHORT $L31351
$L31354:

; 3866 : 
; 3867 :             if ( fnBuildFK_Index( vDTE, f ) == -1 )

	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_fnBuildFK_Index@8
	movsx	eax, ax
	cmp	eax, -1
	jne	SHORT $L31355

; 3868 :                goto EndOfFunction;

	jmp	$EndOfFunction$31293
$L31355:

; 3869 : 
; 3870 :             #if defined( COMMIT_EVERY_TABLE )
; 3871 : 
; 3872 :                if ( fnWriteLine( vDTE, f, "" ) < 0 )
; 3873 :                   goto EndOfFunction;
; 3874 : 
; 3875 :                if ( fnWriteLine( vDTE, f, COMMIT_STR ) < 0 )
; 3876 :                   goto EndOfFunction;
; 3877 : 
; 3878 :             #endif
; 3879 : 
; 3880 :             if ( fnWriteLine( vDTE, f, " " ) < 0 )

	push	OFFSET FLAT:??_C@_01FCOA@?5?$AA@	; `string'
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31356

; 3881 :                goto EndOfFunction;

	jmp	$EndOfFunction$31293
$L31356:

; 3882 : 
; 3883 :          } // for ( "TE_FieldDataRel" )...

	jmp	$L31351
$L31352:

; 3884 : 
; 3885 :    #if COMMIT_EVERY_TABLE
; 3886 :          if ( fnWriteLine( vDTE, f, " " ) < 0 )
; 3887 :             goto EndOfFunction;
; 3888 : 
; 3889 :           if ( fnWriteLine( vDTE, f, COMMIT_STR ) < 0 )
; 3890 :             goto EndOfFunction;
; 3891 :    #endif
; 3892 : 
; 3893 :       } // for ( "TE_TableRec" )...

	jmp	$L31345
$L31346:

; 3896 : 
; 3897 :    //=================================================================
; 3898 :    //
; 3899 :    // Loop through the table names again to create the "GRANT ALL" statements.
; 3900 :    //
; 3901 :    //=================================================================
; 3902 : 
; 3903 : #ifdef GRANT_ALL
; 3904 :    for ( nLoop = SetCursorFirstEntity( vDTE, "TE_TablRec", 0 );
; 3905 :          nLoop >= zCURSOR_SET;
; 3906 :          nLoop = SetCursorNextEntity( vDTE, "TE_TablRec", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nLoop$[ebp], ax
	jmp	SHORT $L31357
$L31358:
	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nLoop$[ebp], ax
$L31357:
	movsx	edx, WORD PTR _nLoop$[ebp]
	test	edx, edx
	jl	$L31359

; 3908 :       /* Position on the first column of the table */
; 3909 :       /* No GRANT if the are no columns in the table */
; 3910 :       nRC = SetCursorFirstEntity( vDTE, "TE_FieldDataRel", 0 );

	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax

; 3911 :       if (nRC < zCURSOR_SET)

	movsx	ecx, WORD PTR _nRC$[ebp]
	test	ecx, ecx
	jge	SHORT $L31360

; 3912 :          continue;

	jmp	SHORT $L31358
$L31360:

; 3913 : 
; 3914 :       // Determine owner.
; 3915 :       GetStringFromAttribute( szOwner, vDTE, "TE_TablRec", "SQL_TableOwner" );

	push	OFFSET FLAT:??_C@_0P@CNMG@SQL_TableOwner?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _szOwner$[ebp]
	push	eax
	call	_GetStringFromAttribute@16

; 3916 :       if ( szOwner[ 0 ] == 0 && pchDefaultOwner )

	movsx	ecx, BYTE PTR _szOwner$[ebp]
	test	ecx, ecx
	jne	SHORT $L31361
	cmp	DWORD PTR _pchDefaultOwner$[ebp], 0
	je	SHORT $L31361

; 3917 :          zstrcpy( szOwner, pchDefaultOwner );

	mov	edx, DWORD PTR _pchDefaultOwner$[ebp]
	push	edx
	lea	eax, DWORD PTR _szOwner$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
$L31361:

; 3918 : 
; 3919 :       if ( szOwner[ 0 ] )

	movsx	ecx, BYTE PTR _szOwner$[ebp]
	test	ecx, ecx
	je	SHORT $L31362

; 3920 :          zstrcat( szOwner, "." );

	push	OFFSET FLAT:??_C@_01PJCK@?4?$AA@	; `string'
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
$L31362:

; 3921 : 
; 3922 :       GetStringFromAttribute( szTableName, vDTE, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szTableName$[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 3923 :       pchTableName = szTableName;

	lea	edx, DWORD PTR _szTableName$[ebp]
	mov	DWORD PTR _pchTableName$[ebp], edx

; 3924 :       RemoveBrackets( pchTableName );

	mov	eax, DWORD PTR _pchTableName$[ebp]
	push	eax
	call	_RemoveBrackets
	add	esp, 4

; 3925 :       zsprintf( szLine, "GRANT ALL ON %s%s TO PUBLIC %s",
; 3926 :                 szOwner, pchTableName, CONTINUATION_STR );

	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	mov	ecx, DWORD PTR _pchTableName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0BP@OLHP@GRANT?5ALL?5ON?5?$CFs?$CFs?5TO?5PUBLIC?5?$CFs?$AA@ ; `string'
	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 3927 : 
; 3928 :       if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31364

; 3929 :          goto EndOfFunction;

	jmp	SHORT $EndOfFunction$31293
$L31364:

; 3930 : 
; 3931 :    } // for ( "TE_TableRec" )...

	jmp	$L31358
$L31359:

; 3932 : #endif
; 3933 : 
; 3934 :    if ( fnWriteLine( vDTE, f, COMMIT_STR ) < 0 )

	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31365

; 3935 :       goto EndOfFunction;

	jmp	SHORT $EndOfFunction$31293
$L31365:

; 3936 : 
; 3937 :    // If we get here, then everything is OK.
; 3938 :    nRC = 0;

	mov	WORD PTR _nRC$[ebp], 0
$EndOfFunction$31293:

; 3939 : 
; 3940 : EndOfFunction:
; 3941 :    if ( f != -1 )

	cmp	DWORD PTR _f$[ebp], -1
	je	SHORT $L31366

; 3942 :       SysCloseFile( vSubtask, f, 0 );

	push	0
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vSubtask$[ebp]
	push	ecx
	call	_SysCloseFile@12
$L31366:

; 3943 : 
; 3944 :    DropView( vDTE );

	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_DropView@4

; 3945 :    DropView( vEMD );

	mov	eax, DWORD PTR _vEMD$[ebp]
	push	eax
	call	_DropView@4

; 3946 : 
; 3947 :    if ( nRC == 0 )

	movsx	ecx, WORD PTR _nRC$[ebp]
	test	ecx, ecx
	jne	SHORT $L31367

; 3949 :       zstrcpy( szMsg, "File " );

	push	OFFSET FLAT:??_C@_05EGAJ@File?5?$AA@	; `string'
	lea	edx, DWORD PTR _szMsg$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8

; 3950 :       zstrcat( szMsg, pchFileName );

	mov	eax, DWORD PTR _pchFileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szMsg$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 3951 :       zstrcat( szMsg, " is created successfully!" );

	push	OFFSET FLAT:??_C@_0BK@MMCL@?5is?5created?5successfully?$CB?$AA@ ; `string'
	lea	edx, DWORD PTR _szMsg$[ebp]
	push	edx
	call	_strcat
	add	esp, 8

; 3952 :      MB_SetMessage( vSubtask, 0, szMsg );

	lea	eax, DWORD PTR _szMsg$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _vSubtask$[ebp]
	push	ecx
	call	_MB_SetMessage@12

; 3954 :    else

	jmp	SHORT $L31370
$L31367:

; 3956 :        zstrcpy( szMsg, "Couldn't create file " );

	push	OFFSET FLAT:??_C@_0BG@PJOD@Couldn?8t?5create?5file?5?$AA@ ; `string'
	lea	edx, DWORD PTR _szMsg$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8

; 3957 :        zstrcat( szMsg, pchFileName );

	mov	eax, DWORD PTR _pchFileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szMsg$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 3958 :       SysMessageBox( vDTE, "Generate DDL", szMsg, 0 );

	push	0
	lea	edx, DWORD PTR _szMsg$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0N@PLHO@Generate?5DDL?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysMessageBox@16
$L31370:

; 3960 : 
; 3961 :    return( nRC );

	mov	ax, WORD PTR _nRC$[ebp]
$L31263:

; 3962 : 
; 3963 : } // BuildDDL

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_BuildDDL@16 ENDP
_TEXT	ENDS
PUBLIC	_BuildSyncDDL@20
PUBLIC	??_C@_0L@NKCB@Executable?$AA@			; `string'
PUBLIC	??_C@_0P@JHOI@RetrieveSchema?$AA@		; `string'
PUBLIC	??_C@_0DF@MNGA@Couldn?8t?5find?5?8BuildSyncDDL?8?5in?5@ ; `string'
PUBLIC	??_C@_0BE@DNAH@Physical?5Data?5Model?$AA@	; `string'
PUBLIC	??_C@_07LDCE@TE00422?$AA@			; `string'
PUBLIC	??_C@_06NGI@_alter?$AA@				; `string'
PUBLIC	??_C@_0CA@EBOB@?$CFs?5Alter?5script?5for?5?$CFs?5?9?9?5?$CFs?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0L@FFM@MatchFound?$AA@			; `string'
PUBLIC	??_C@_01PJM@D?$AA@				; `string'
PUBLIC	??_C@_0BA@LFLL@?$CFs?5Entity?5?$CFs?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0BE@FPJB@ALTER?5TABLE?5?$CFs?5ADD?5?$AA@	; `string'
PUBLIC	??_C@_0BB@MKDI@DROP?5TABLE?5?$CFs?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0CD@OHJM@ALTER?5TABLE?5?$CFs?$CFs?5DROP?5COLUMN?5?$CFs?5@ ; `string'
PUBLIC	??_C@_0CB@MGNG@ALTER?5TABLE?5?$CFs?$CF?9?$CKs?5ALTER?5COLUMN?5@ ; `string'
PUBLIC	??_C@_0BAI@KIFF@WARNING?3?5The?5data?5type?5for?5the?5c@ ; `string'
PUBLIC	??_C@_0BI@HFPH@DDL?5Generationg?5Warning?$AA@	; `string'
PUBLIC	??_C@_0FJ@KCOE@?$CFs?5WARNING?9?9Following?5index?5may?5@ ; `string'
EXTRN	_SysLoadLibrary@8:NEAR
EXTRN	_strcmp:NEAR
EXTRN	_MessageSend@24:NEAR
EXTRN	_SetCursorFirstEntityByString@20:NEAR
EXTRN	_SetCursorNextEntityByString@20:NEAR
EXTRN	_SysFreeLibrary@8:NEAR
EXTRN	_SysGetProc@8:NEAR
EXTRN	_SetAttributeFromString@16:NEAR
;	COMDAT ??_C@_0L@NKCB@Executable?$AA@
; File C:\10C\a\oe\KZHSQLXB.C
_DATA	SEGMENT
??_C@_0L@NKCB@Executable?$AA@ DB 'Executable', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0P@JHOI@RetrieveSchema?$AA@
_DATA	SEGMENT
??_C@_0P@JHOI@RetrieveSchema?$AA@ DB 'RetrieveSchema', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DF@MNGA@Couldn?8t?5find?5?8BuildSyncDDL?8?5in?5@
_DATA	SEGMENT
??_C@_0DF@MNGA@Couldn?8t?5find?5?8BuildSyncDDL?8?5in?5@ DB 'Couldn''t fin'
	DB	'd ''BuildSyncDDL'' in Generater Executable', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@DNAH@Physical?5Data?5Model?$AA@
_DATA	SEGMENT
??_C@_0BE@DNAH@Physical?5Data?5Model?$AA@ DB 'Physical Data Model', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_07LDCE@TE00422?$AA@
_DATA	SEGMENT
??_C@_07LDCE@TE00422?$AA@ DB 'TE00422', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_06NGI@_alter?$AA@
_DATA	SEGMENT
??_C@_06NGI@_alter?$AA@ DB '_alter', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CA@EBOB@?$CFs?5Alter?5script?5for?5?$CFs?5?9?9?5?$CFs?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0CA@EBOB@?$CFs?5Alter?5script?5for?5?$CFs?5?9?9?5?$CFs?5?$CFs?$AA@ DB '%'
	DB	's Alter script for %s -- %s %s', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@FFM@MatchFound?$AA@
_DATA	SEGMENT
??_C@_0L@FFM@MatchFound?$AA@ DB 'MatchFound', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PJM@D?$AA@
_DATA	SEGMENT
??_C@_01PJM@D?$AA@ DB 'D', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@LFLL@?$CFs?5Entity?5?$CFs?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BA@LFLL@?$CFs?5Entity?5?$CFs?5?$CFs?$AA@ DB '%s Entity %s %s', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BE@FPJB@ALTER?5TABLE?5?$CFs?5ADD?5?$AA@
_DATA	SEGMENT
??_C@_0BE@FPJB@ALTER?5TABLE?5?$CFs?5ADD?5?$AA@ DB 'ALTER TABLE %s ADD ', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@MKDI@DROP?5TABLE?5?$CFs?5?$CFs?$AA@
_DATA	SEGMENT
??_C@_0BB@MKDI@DROP?5TABLE?5?$CFs?5?$CFs?$AA@ DB 'DROP TABLE %s %s', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CD@OHJM@ALTER?5TABLE?5?$CFs?$CFs?5DROP?5COLUMN?5?$CFs?5@
_DATA	SEGMENT
??_C@_0CD@OHJM@ALTER?5TABLE?5?$CFs?$CFs?5DROP?5COLUMN?5?$CFs?5@ DB 'ALTER'
	DB	' TABLE %s%s DROP COLUMN %s %s', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CB@MGNG@ALTER?5TABLE?5?$CFs?$CF?9?$CKs?5ALTER?5COLUMN?5@
_DATA	SEGMENT
??_C@_0CB@MGNG@ALTER?5TABLE?5?$CFs?$CF?9?$CKs?5ALTER?5COLUMN?5@ DB 'ALTER'
	DB	' TABLE %s%-*s ALTER COLUMN ', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BAI@KIFF@WARNING?3?5The?5data?5type?5for?5the?5c@
_DATA	SEGMENT
??_C@_0BAI@KIFF@WARNING?3?5The?5data?5type?5for?5the?5c@ DB 'WARNING: The'
	DB	' data type for the column %s.%s has been changed and therefor'
	DB	'e had an index deleted.  The column is NOT a key and therefor'
	DB	'e the index was added by the DBA.  An attempt has been made t'
	DB	'o recreate the index in the DDL.  Look for ''WARNING'' in the'
	DB	' DDL file', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@HFPH@DDL?5Generationg?5Warning?$AA@
_DATA	SEGMENT
??_C@_0BI@HFPH@DDL?5Generationg?5Warning?$AA@ DB 'DDL Generationg Warning'
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_0FJ@KCOE@?$CFs?5WARNING?9?9Following?5index?5may?5@
_DATA	SEGMENT
??_C@_0FJ@KCOE@?$CFs?5WARNING?9?9Following?5index?5may?5@ DB '%s WARNING-'
	DB	'-Following index may not have the  same the columns as the or'
	DB	'iginal index: %s', 00H			; `string'
_DATA	ENDS
_TEXT	SEGMENT
_vDTE$ = 8
_vEMD$ = 12
_pchFileName$ = 20
_vSubtask$ = 24
_hLibrary$ = -88
_f$ = -932
_pfn$ = -100
_vDB$ = -8
_vBoth$ = -16
_szDLL$ = -428
_szTableName$ = -1020
_szColumnName$ = -168
_szOwner$ = -84
_szLine$ = -928
_pchDefaultOwner$ = -952
_pchDBName$ = -940
_pchDBDesc$ = -948
_k$ = -944
_nRC$ = -96
_nLth$ = -92
_nReturn$ = -4
_bTableDropped$ = -936
_pchTableName$31435 = -1024
_lDB_Lth$31440 = -1044
_lDTE_Lth$31441 = -1040
_szDB_Type$31442 = -1036
_szDTE_Type$31443 = -1056
_pchColName$31444 = -1060
_pchKeyType$31472 = -1064
_bFirstAlterOfTable$31478 = -1068
_pchMatchFound$31483 = -1072
_pchKeyType$31485 = -1076
_szEntityName$31487 = -1112
_bFirstAlterForTable$31505 = -1116
_nIndexDroppedCount$31512 = -1120
_szEntityName$31515 = -1156
_szIndex$31521 = -1224
_pchKeyType$31527 = -1228
_szMsg$31539 = -2228
_BuildSyncDDL@20 PROC NEAR

; 3989 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2236				; 000008bcH

; 3990 :    LPLIBRARY hLibrary;
; 3991 :    zLONG     f = -1;

	mov	DWORD PTR _f$[ebp], -1

; 3992 :    zSHORT    (POPERATION pfn)( zVIEW, zPVIEW );
; 3993 :    zVIEW     vDB = 0;

	mov	DWORD PTR _vDB$[ebp], 0

; 3994 :    zVIEW     vBoth[ 2 ];
; 3995 :    zCHAR     szDLL[ zMAX_FILENAME_LTH + 1 ];
; 3996 :    zCHAR     szTableName[ MAX_TABLENAME_LTH + 1 ];
; 3997 :    zCHAR     szColumnName[ MAX_TABLENAME_LTH + 1 ];
; 3998 :    zCHAR     szOwner[ MAX_TABLENAME_LTH + 1 ];
; 3999 :    zCHAR     szLine[ 500 ];
; 4000 :    zPCHAR    pchDefaultOwner;
; 4001 :    zPCHAR    pchDBName;
; 4002 :    zPCHAR    pchDBDesc;
; 4003 :    zSHORT    k, nRC;
; 4004 :    zSHORT    nLth;
; 4005 :    zSHORT    nReturn = zCALL_ERROR;

	mov	WORD PTR _nReturn$[ebp], -16		; fffffff0H

; 4006 :    zBOOL     bTableDropped;
; 4007 : 
; 4008 :    // Make copies of the views so we can safely change the cursors.
; 4009 :    CreateViewFromViewForTask( &vDTE, vDTE, 0 );

	push	0
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_CreateViewFromViewForTask@12

; 4010 :    CreateViewFromViewForTask( &vEMD, vEMD, 0 );

	push	0
	mov	edx, DWORD PTR _vEMD$[ebp]
	push	edx
	lea	eax, DWORD PTR _vEMD$[ebp]
	push	eax
	call	_CreateViewFromViewForTask@12

; 4011 : 
; 4012 :    // First thing we have to do is call the SQL DBH to load the current
; 4013 :    // DB schema.
; 4014 :    GetStringFromAttribute( szDLL,
; 4015 :                            vDTE, "TE_DBMS_Source", "Executable" );

	push	OFFSET FLAT:??_C@_0L@NKCB@Executable?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szDLL$[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 4016 :    hLibrary = SysLoadLibrary( vSubtask, szDLL );

	lea	eax, DWORD PTR _szDLL$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vSubtask$[ebp]
	push	ecx
	call	_SysLoadLibrary@8
	mov	DWORD PTR _hLibrary$[ebp], eax

; 4017 :    if ( hLibrary )

	cmp	DWORD PTR _hLibrary$[ebp], 0
	je	SHORT $L31406

; 4019 :       pfn = SysGetProc( hLibrary, "RetrieveSchema" );

	push	OFFSET FLAT:??_C@_0P@JHOI@RetrieveSchema?$AA@ ; `string'
	mov	edx, DWORD PTR _hLibrary$[ebp]
	push	edx
	call	_SysGetProc@8
	mov	DWORD PTR _pfn$[ebp], eax

; 4020 :       if ( pfn )

	cmp	DWORD PTR _pfn$[ebp], 0
	je	SHORT $L31408

; 4022 :          (*pfn)( vDTE, &vDB );

	lea	eax, DWORD PTR _vDB$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	DWORD PTR _pfn$[ebp]

; 4024 :       else

	jmp	SHORT $L31409
$L31408:

; 4026 :          MessageSend( vSubtask, "TE00422", "Physical Data Model",
; 4027 :                       "Couldn't find 'BuildSyncDDL' in Generater Executable",
; 4028 :                       zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 );

	push	0
	push	300					; 0000012cH
	push	OFFSET FLAT:??_C@_0DF@MNGA@Couldn?8t?5find?5?8BuildSyncDDL?8?5in?5@ ; `string'
	push	OFFSET FLAT:??_C@_0BE@DNAH@Physical?5Data?5Model?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_07LDCE@TE00422?$AA@	; `string'
	mov	edx, DWORD PTR _vSubtask$[ebp]
	push	edx
	call	_MessageSend@24
$L31409:

; 4030 : 
; 4031 :       SysFreeLibrary( vSubtask, hLibrary );

	mov	eax, DWORD PTR _hLibrary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vSubtask$[ebp]
	push	ecx
	call	_SysFreeLibrary@8
$L31406:

; 4033 : 
; 4034 :    if ( vDB == 0 )

	cmp	DWORD PTR _vDB$[ebp], 0
	jne	SHORT $L31413

; 4035 :       return( -1 );

	or	ax, -1
	jmp	$L31384
$L31413:

; 4036 : 
; 4037 :    //
; 4038 :    // Generate the DDL file name and open it.
; 4039 :    //
; 4040 :    nLth = zstrlen( pchFileName );

	mov	edx, DWORD PTR _pchFileName$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	WORD PTR _nLth$[ebp], ax

; 4041 :    GetStringFromAttribute( pchFileName + nLth,
; 4042 :                            vDTE, "TE_DBMS_Source", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	movsx	ecx, WORD PTR _nLth$[ebp]
	mov	edx, DWORD PTR _pchFileName$[ebp]
	add	edx, ecx
	push	edx
	call	_GetStringFromAttribute@16

; 4043 :    zstrcat( pchFileName, "_alter" );

	push	OFFSET FLAT:??_C@_06NGI@_alter?$AA@	; `string'
	mov	eax, DWORD PTR _pchFileName$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 4044 : 
; 4045 :    // Make sure the filename isn't too long.
; 4046 :    if ( zstrlen( pchFileName + nLth ) > zBASE_FILENAME_LTH )

	movsx	ecx, WORD PTR _nLth$[ebp]
	mov	edx, DWORD PTR _pchFileName$[ebp]
	add	edx, ecx
	push	edx
	call	_strlen
	add	esp, 4
	cmp	eax, 128				; 00000080H
	jbe	SHORT $L31415

; 4047 :       pchFileName[ nLth + zBASE_FILENAME_LTH ] = 0;

	movsx	eax, WORD PTR _nLth$[ebp]
	mov	ecx, DWORD PTR _pchFileName$[ebp]
	mov	BYTE PTR [ecx+eax+128], 0
$L31415:

; 4048 : 
; 4049 :    zstrcat( pchFileName, ".ddl" );

	push	OFFSET FLAT:??_C@_04PMIC@?4ddl?$AA@	; `string'
	mov	edx, DWORD PTR _pchFileName$[ebp]
	push	edx
	call	_strcat
	add	esp, 8

; 4050 :    if ( (f = SysOpenFile( vDTE, pchFileName, COREFILE_WRITE )) < 0 )

	push	64					; 00000040H
	mov	eax, DWORD PTR _pchFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SysOpenFile@12
	mov	DWORD PTR _f$[ebp], eax
	cmp	DWORD PTR _f$[ebp], 0
	jge	SHORT $L31416

; 4051 :       goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31416:

; 4052 : 
; 4053 :    GetAddrForAttribute( &pchDBName, vDTE, "TE_DBMS_Source", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _pchDBName$[ebp]
	push	eax
	call	_GetAddrForAttribute@16

; 4054 :    GetAddrForAttribute( &pchDBDesc, vDTE, "TE_DBMS_Source", "Desc" );

	push	OFFSET FLAT:??_C@_04DKMG@Desc?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pchDBDesc$[ebp]
	push	edx
	call	_GetAddrForAttribute@16

; 4055 :    zsprintf( szLine, "%s Alter script for %s -- %s %s",
; 4056 :              COMMENT_START, pchDBName, pchDBDesc, COMMENT_END );

	push	OFFSET FLAT:??_C@_02BOOO@?$CK?1?$AA@	; `string'
	mov	eax, DWORD PTR _pchDBDesc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pchDBName$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_02FCCF@?1?$CK?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0CA@EBOB@?$CFs?5Alter?5script?5for?5?$CFs?5?9?9?5?$CFs?5?$CFs?$AA@ ; `string'
	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 24					; 00000018H

; 4057 :    if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31419

; 4058 :       goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31419:

; 4059 : 
; 4060 :    GetAddrForAttribute( &pchDefaultOwner, vDTE,
; 4061 :                         "TE_DBMS_Source", "DefaultOwner" );

	push	OFFSET FLAT:??_C@_0N@HJOL@DefaultOwner?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pchDefaultOwner$[ebp]
	push	ecx
	call	_GetAddrForAttribute@16

; 4062 :    if ( pchDefaultOwner == 0 || pchDefaultOwner[ 0 ] == 0 )

	cmp	DWORD PTR _pchDefaultOwner$[ebp], 0
	je	SHORT $L31421
	mov	edx, DWORD PTR _pchDefaultOwner$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $L31420
$L31421:

; 4063 :       pchDefaultOwner = 0;

	mov	DWORD PTR _pchDefaultOwner$[ebp], 0
$L31420:

; 4064 : 
; 4065 :    // Turn off the "MatchFound" flag for all the tables/columns.
; 4066 :    vBoth[ 0 ] = vDTE;

	mov	ecx, DWORD PTR _vDTE$[ebp]
	mov	DWORD PTR _vBoth$[ebp], ecx

; 4067 :    vBoth[ 1 ] = vDB;

	mov	edx, DWORD PTR _vDB$[ebp]
	mov	DWORD PTR _vBoth$[ebp+4], edx

; 4068 :    for ( k = 0; k < 2; k++ )

	mov	WORD PTR _k$[ebp], 0
	jmp	SHORT $L31422
$L31423:
	mov	ax, WORD PTR _k$[ebp]
	add	ax, 1
	mov	WORD PTR _k$[ebp], ax
$L31422:
	movsx	ecx, WORD PTR _k$[ebp]
	cmp	ecx, 2
	jge	$L31424

; 4070 :       for ( nRC = SetCursorFirstEntity( vBoth[ k ], "TE_TablRec", 0 );
; 4071 :             nRC >= zCURSOR_SET;
; 4072 :             nRC = SetCursorNextEntity( vBoth[ k ], "TE_TablRec", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	movsx	edx, WORD PTR _k$[ebp]
	mov	eax, DWORD PTR _vBoth$[ebp+edx*4]
	push	eax
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31425
$L31426:
	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	movsx	ecx, WORD PTR _k$[ebp]
	mov	edx, DWORD PTR _vBoth$[ebp+ecx*4]
	push	edx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31425:
	movsx	eax, WORD PTR _nRC$[ebp]
	test	eax, eax
	jl	$L31427

; 4074 :          SetAttributeFromString( vBoth[ k ], "TE_TablRec", "MatchFound", "N" );

	push	OFFSET FLAT:??_C@_01OAK@N?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	movsx	ecx, WORD PTR _k$[ebp]
	mov	edx, DWORD PTR _vBoth$[ebp+ecx*4]
	push	edx
	call	_SetAttributeFromString@16

; 4075 : 
; 4076 :          for ( nRC = SetCursorFirstEntity( vBoth[ k ], "TE_FieldDataRel", 0 );
; 4077 :                nRC >= zCURSOR_SET;
; 4078 :                nRC = SetCursorNextEntity( vBoth[ k ], "TE_FieldDataRel", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	movsx	eax, WORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _vBoth$[ebp+eax*4]
	push	ecx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31429
$L31430:
	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	movsx	edx, WORD PTR _k$[ebp]
	mov	eax, DWORD PTR _vBoth$[ebp+edx*4]
	push	eax
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31429:
	movsx	ecx, WORD PTR _nRC$[ebp]
	test	ecx, ecx
	jl	SHORT $L31431

; 4080 :             SetAttributeFromString( vBoth[ k ], "TE_FieldDataRel",
; 4081 :                                     "MatchFound", "N" );

	push	OFFSET FLAT:??_C@_01OAK@N?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	movsx	edx, WORD PTR _k$[ebp]
	mov	eax, DWORD PTR _vBoth$[ebp+edx*4]
	push	eax
	call	_SetAttributeFromString@16

; 4082 :          }

	jmp	SHORT $L31430
$L31431:

; 4083 :       }

	jmp	$L31426
$L31427:

; 4084 :    }

	jmp	$L31423
$L31424:

; 4085 : 
; 4086 :    // Now look for matches.
; 4087 :    for ( nRC = SetCursorFirstEntity( vDTE, "TE_TablRec", 0 );
; 4088 :          nRC >= zCURSOR_SET;
; 4089 :          nRC = SetCursorNextEntity( vDTE, "TE_TablRec", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31432
$L31433:
	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31432:
	movsx	eax, WORD PTR _nRC$[ebp]
	test	eax, eax
	jl	$L31434

; 4091 :       zPCHAR pchTableName;
; 4092 : 
; 4093 :       if ( SetCursorFirstEntityByAttr( vDB, "TE_TablRec", "Name",
; 4094 :                                        vDTE, "TE_TablRec",
; 4095 :                                        "Name", 0 ) < zCURSOR_SET )

	push	0
	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDB$[ebp]
	push	edx
	call	_SetCursorFirstEntityByAttr@28
	movsx	eax, ax
	test	eax, eax
	jge	SHORT $L31436

; 4097 :          continue;

	jmp	SHORT $L31433
$L31436:

; 4099 : 
; 4100 :       GetAddrForAttribute( &pchTableName, vDB, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDB$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pchTableName$31435[ebp]
	push	edx
	call	_GetAddrForAttribute@16

; 4101 :       SetAttributeFromString( vDTE, "TE_TablRec", "MatchFound", "Y" );

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetAttributeFromString@16

; 4102 :       SetAttributeFromString( vDB,  "TE_TablRec", "MatchFound", "Y" );

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDB$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4103 : 
; 4104 :       for ( nRC = SetCursorFirstEntity( vDTE, "TE_FieldDataRel", 0 );
; 4105 :             nRC >= zCURSOR_SET;
; 4106 :             nRC = SetCursorNextEntity( vDTE, "TE_FieldDataRel", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31437
$L31438:
	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31437:
	movsx	ecx, WORD PTR _nRC$[ebp]
	test	ecx, ecx
	jl	$L31439

; 4108 :          zLONG  lDB_Lth;
; 4109 :          zLONG  lDTE_Lth;
; 4110 :          zCHAR  szDB_Type[ 10 ];
; 4111 :          zCHAR  szDTE_Type[ 10 ];
; 4112 :          zPCHAR pchColName;
; 4113 : 
; 4114 :          // Check to see if there is a field in the DB with the same
; 4115 :          // name.
; 4116 :          if ( SetCursorFirstEntityByAttr( vDB, "TE_FieldDataRel", "Name",
; 4117 :                                           vDTE, "TE_FieldDataRel",
; 4118 :                                           "Name", 0 ) < zCURSOR_SET )

	push	0
	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDB$[ebp]
	push	eax
	call	_SetCursorFirstEntityByAttr@28
	movsx	ecx, ax
	test	ecx, ecx
	jge	SHORT $L31445

; 4120 :             // Nope.  No match found, continue with the next one.
; 4121 :             continue;

	jmp	SHORT $L31438
$L31445:

; 4123 : 
; 4124 :          GetAddrForAttribute( &pchColName, vDB, "TE_FieldDataRel", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDB$[ebp]
	push	edx
	lea	eax, DWORD PTR _pchColName$31444[ebp]
	push	eax
	call	_GetAddrForAttribute@16

; 4125 :          GetIntegerFromAttribute( &lDB_Lth,  vDB, "TE_FieldDataRel", "Length" );

	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDB$[ebp]
	push	ecx
	lea	edx, DWORD PTR _lDB_Lth$31440[ebp]
	push	edx
	call	_GetIntegerFromAttribute@16

; 4126 :          GetIntegerFromAttribute( &lDTE_Lth, vDTE, "TE_FieldDataRel", "Length" );

	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lDTE_Lth$31441[ebp]
	push	ecx
	call	_GetIntegerFromAttribute@16

; 4127 :          GetStringFromAttribute( szDB_Type,  vDB, "TE_FieldDataRel", "DataType" );

	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDB$[ebp]
	push	edx
	lea	eax, DWORD PTR _szDB_Type$31442[ebp]
	push	eax
	call	_GetStringFromAttribute@16

; 4128 :          GetStringFromAttribute( szDTE_Type, vDTE, "TE_FieldDataRel", "DataType" );

	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szDTE_Type$31443[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 4129 : 
; 4130 :          // Some datatypes need to be massaged before we compare them.
; 4131 :          #if defined( ACCESS ) || defined( MYSQL ) || defined( ODBC ) || \
; 4132 :              defined( POSTGRESQL ) || defined( SQLSERVER )
; 4133 : 
; 4134 :             switch ( szDB_Type[ 0 ] )
; 4135 :             {

	mov	al, BYTE PTR _szDB_Type$31442[ebp]
	mov	BYTE PTR -2232+[ebp], al
	cmp	BYTE PTR -2232+[ebp], 68		; 00000044H
	je	SHORT $L31450
	cmp	BYTE PTR -2232+[ebp], 73		; 00000049H
	je	SHORT $L31450
	cmp	BYTE PTR -2232+[ebp], 84		; 00000054H
	je	SHORT $L31450
	jmp	SHORT $L31447
$L31450:

; 4136 :                case zTYPE_DATE:
; 4137 :                case zTYPE_TIME:
; 4138 :                case zTYPE_DATETIME:
; 4139 :                   // In access, all date/time/timestamps are stored as the same
; 4140 :                   // datatype, so we need to set things up so they compare the same.
; 4141 :                   szDB_Type[ 0 ] = szDTE_Type[ 0 ];

	mov	cl, BYTE PTR _szDTE_Type$31443[ebp]
	mov	BYTE PTR _szDB_Type$31442[ebp], cl
$L31447:

; 4144 : 
; 4145 :             // We only care about the length for string types.
; 4146 :             if ( szDB_Type[ 0 ] != zTYPE_STRING || szDB_Type[ 0 ] != zTYPE_FIXEDCHAR )

	movsx	edx, BYTE PTR _szDB_Type$31442[ebp]
	cmp	edx, 83					; 00000053H
	jne	SHORT $L31452
	movsx	eax, BYTE PTR _szDB_Type$31442[ebp]
	cmp	eax, 70					; 00000046H
	je	SHORT $L31451
$L31452:

; 4147 :                lDB_Lth = lDTE_Lth;

	mov	ecx, DWORD PTR _lDTE_Lth$31441[ebp]
	mov	DWORD PTR _lDB_Lth$31440[ebp], ecx
$L31451:

; 4148 : 
; 4149 :          #endif
; 4150 : 
; 4151 :          if ( lDB_Lth != lDTE_Lth || zstrcmp( szDB_Type, szDTE_Type ) != 0 )

	mov	edx, DWORD PTR _lDB_Lth$31440[ebp]
	cmp	edx, DWORD PTR _lDTE_Lth$31441[ebp]
	jne	SHORT $L31460
	movsx	eax, BYTE PTR _szDB_Type$31442[ebp]
	movsx	ecx, BYTE PTR _szDTE_Type$31443[ebp]
	cmp	eax, ecx
	jne	SHORT $L32371
	lea	edx, DWORD PTR _szDTE_Type$31443[ebp]
	push	edx
	lea	eax, DWORD PTR _szDB_Type$31442[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	mov	DWORD PTR -2236+[ebp], eax
	jmp	SHORT $L32372
$L32371:
	movsx	ecx, BYTE PTR _szDB_Type$31442[ebp]
	movsx	edx, BYTE PTR _szDTE_Type$31443[ebp]
	sub	ecx, edx
	xor	eax, eax
	test	ecx, ecx
	setle	al
	dec	eax
	and	eax, 2
	add	eax, -1
	mov	DWORD PTR -2236+[ebp], eax
$L32372:
	cmp	DWORD PTR -2236+[ebp], 0
	je	SHORT $L31459
$L31460:

; 4153 :             #if 0
; 4154 :                zCHAR sz[ 500 ];
; 4155 : 
; 4156 :                zsprintf( sz, "%s.%s  TE Datatype = %s, Length = %d",
; 4157 :                          pchTableName, pchColName, szDTE_Type, lDTE_Lth );
; 4158 :                TraceLineS( sz, "" );
; 4159 :                zsprintf( sz, "%s.%s  DB Datatype = %s, Length = %d",
; 4160 :                          pchTableName, pchColName, szDB_Type, lDB_Lth );
; 4161 :                TraceLineS( sz, "" );
; 4162 :             #endif
; 4163 : 
; 4164 :             // Column is different somehow.
; 4165 :             SetAttributeFromString( vDTE, "TE_FieldDataRel", "MatchFound", "D" );

	push	OFFSET FLAT:??_C@_01PJM@D?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4166 :             SetAttributeFromString( vDB,  "TE_FieldDataRel", "MatchFound", "D" );

	push	OFFSET FLAT:??_C@_01PJM@D?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDB$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4168 :          else

	jmp	SHORT $L31462
$L31459:

; 4170 :             SetAttributeFromString( vDTE, "TE_FieldDataRel", "MatchFound", "Y" );

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetAttributeFromString@16

; 4171 :             SetAttributeFromString( vDB,  "TE_FieldDataRel", "MatchFound", "Y" );

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDB$[ebp]
	push	ecx
	call	_SetAttributeFromString@16
$L31462:

; 4173 : 
; 4174 :       }  // For each TE_FieldDataRel

	jmp	$L31438
$L31439:

; 4175 : 
; 4176 :    }  // For each TE_TablRec

	jmp	$L31433
$L31434:

; 4177 : 
; 4178 :    //
; 4179 :    // Print results.
; 4180 :    //
; 4181 : 
; 4182 :    // Create tables.
; 4183 :    for ( nRC = SetCursorFirstEntity( vDTE, "TE_TablRec", 0 );
; 4184 :          nRC >= zCURSOR_SET;
; 4185 :          nRC = SetCursorNextEntity( vDTE, "TE_TablRec", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31463
$L31464:
	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31463:
	movsx	ecx, WORD PTR _nRC$[ebp]
	test	ecx, ecx
	jl	$L31465

; 4187 :       GetStringFromAttribute( szTableName, vDTE, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _szTableName$[ebp]
	push	eax
	call	_GetStringFromAttribute@16

; 4188 : 
; 4189 :       // If table is in the DB, we don't need to create it.
; 4190 :       if ( CompareAttributeToString( vDTE, "TE_TablRec", "MatchFound", "N" ) != 0 )

	push	OFFSET FLAT:??_C@_01OAK@N?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_CompareAttributeToString@16
	movsx	edx, ax
	test	edx, edx
	je	SHORT $L31466

; 4191 :          continue;

	jmp	SHORT $L31464
$L31466:

; 4192 : 
; 4193 :       if ( fnBuildCreateTable( vDTE, f ) == -1 )

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_fnBuildCreateTable@8
	movsx	edx, ax
	cmp	edx, -1
	jne	SHORT $L31467

; 4194 :          goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31467:

; 4195 : 
; 4196 :       if ( fnBuildCreateMainIndex( vDTE, f ) == -1 )

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_fnBuildCreateMainIndex@8
	movsx	edx, ax
	cmp	edx, -1
	jne	SHORT $L31468

; 4197 :          goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31468:

; 4198 : 
; 4199 :       #if COMMIT_EVERY_TABLE
; 4200 :          if ( fnWriteLine( vDTE, f, COMMIT_STR ) < 0 )
; 4201 :             return( -1 );
; 4202 :       #endif
; 4203 : 
; 4204 :       // Create the indexes for the FKs.
; 4205 :       for ( nRC = SetCursorFirstEntity( vDTE, "TE_FieldDataRel", 0 );
; 4206 :             nRC >= zCURSOR_SET;
; 4207 :             nRC = SetCursorNextEntity( vDTE, "TE_FieldDataRel", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31469
$L31470:
	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31469:
	movsx	edx, WORD PTR _nRC$[ebp]
	test	edx, edx
	jl	SHORT $L31471

; 4209 :          zPCHAR pchKeyType;
; 4210 : 
; 4211 :          GetAddrForAttribute( &pchKeyType, vDTE, "TE_FieldDataRel",
; 4212 :                               "DataOrRelfieldOrSet" );

	push	OFFSET FLAT:??_C@_0BE@ODFA@DataOrRelfieldOrSet?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pchKeyType$31472[ebp]
	push	ecx
	call	_GetAddrForAttribute@16

; 4213 :          if ( pchKeyType[ 0 ] == 'R' )

	mov	edx, DWORD PTR _pchKeyType$31472[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 82					; 00000052H
	jne	SHORT $L31474

; 4215 :             if ( fnBuildFK_Index( vDTE, f ) == -1 )

	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_fnBuildFK_Index@8
	movsx	eax, ax
	cmp	eax, -1
	jne	SHORT $L31474

; 4216 :                goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31474:

; 4227 : 
; 4228 :       }  // For each TE_FieldDataRel

	jmp	SHORT $L31470
$L31471:

; 4229 : 
; 4230 :    }  // For each TE_TablRec

	jmp	$L31464
$L31465:

; 4231 : 
; 4232 :    // Add columns to tables.
; 4233 :    for ( nRC = SetCursorFirstEntity( vDTE, "TE_TablRec", 0 );
; 4234 :          nRC >= zCURSOR_SET;
; 4235 :          nRC = SetCursorNextEntity( vDTE, "TE_TablRec", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31475
$L31476:
	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31475:
	movsx	eax, WORD PTR _nRC$[ebp]
	test	eax, eax
	jl	$L31477

; 4237 :       zBOOL bFirstAlterOfTable;
; 4238 : 
; 4239 :       GetStringFromAttribute( szTableName, vDTE, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTableName$[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 4240 : 
; 4241 :       if ( CompareAttributeToString( vDTE, "TE_TablRec", "MatchFound", "N" ) == 0 )

	push	OFFSET FLAT:??_C@_01OAK@N?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_CompareAttributeToString@16
	movsx	ecx, ax
	test	ecx, ecx
	jne	SHORT $L31479

; 4243 :          // We alread created the table, so continue with the next one.
; 4244 :          continue;

	jmp	SHORT $L31476
$L31479:

; 4246 : 
; 4247 :       bFirstAlterOfTable = TRUE;

	mov	BYTE PTR _bFirstAlterOfTable$31478[ebp], 1

; 4248 :       for ( nRC = SetCursorFirstEntity( vDTE, "TE_FieldDataRel", 0 );
; 4249 :             nRC >= zCURSOR_SET;
; 4250 :             nRC = SetCursorNextEntity( vDTE, "TE_FieldDataRel", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31480
$L31481:
	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31480:
	movsx	ecx, WORD PTR _nRC$[ebp]
	test	ecx, ecx
	jl	$L31482

; 4252 :          zPCHAR pchMatchFound;
; 4253 : 
; 4254 :          GetAddrForAttribute( &pchMatchFound,
; 4255 :                               vDTE, "TE_FieldDataRel", "MatchFound" );

	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _pchMatchFound$31483[ebp]
	push	eax
	call	_GetAddrForAttribute@16

; 4256 : 
; 4257 :          if ( pchMatchFound[ 0 ] == 'N' )

	mov	ecx, DWORD PTR _pchMatchFound$31483[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 78					; 0000004eH
	jne	$L31495

; 4259 :             zPCHAR pchKeyType;
; 4260 : 
; 4261 :             // Add a blank line to seperate columns from different tables.
; 4262 :             if ( bFirstAlterOfTable )

	mov	eax, DWORD PTR _bFirstAlterOfTable$31478[ebp]
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	$L31491

; 4264 :                zCHAR szEntityName[ zZEIDON_NAME_LTH + 1 ];
; 4265 : 
; 4266 :                bFirstAlterOfTable = FALSE;

	mov	BYTE PTR _bFirstAlterOfTable$31478[ebp], 0

; 4267 : 
; 4268 : 			   // KJS 10/16/14 - When I have selected "Keep Physical Characteristics..." for the datasource, and the
; 4269 : 			   // rebuild tables/rels and then "Build Sync DDL", I get to this point and have TE_TablRecs where there
; 4270 : 			   // is no ER_ENTITY. I am not sure why I don't seem to get that when "Keep ..." is not set.
; 4271 : 			   if ( CheckExistenceOfEntity( vDTE, "ER_Entity" ) == zCURSOR_SET )

	push	OFFSET FLAT:??_C@_09CNO@ER_Entity?$AA@	; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_CheckExistenceOfEntity@8
	movsx	edx, ax
	test	edx, edx
	jne	SHORT $L31491

; 4273 :                GetStringFromAttribute( szEntityName, vDTE, "ER_Entity", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_09CNO@ER_Entity?$AA@	; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szEntityName$31487[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 4274 : 
; 4275 :                if ( fnWriteLine( vDTE, f, "" ) < 0 )

	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31489

; 4276 :                   goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31489:

; 4277 : 
; 4278 :                zsprintf( szLine, "%s Entity %s %s",
; 4279 :                          COMMENT_START, szEntityName, COMMENT_END );

	push	OFFSET FLAT:??_C@_02BOOO@?$CK?1?$AA@	; `string'
	lea	ecx, DWORD PTR _szEntityName$31487[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_02FCCF@?1?$CK?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@LFLL@?$CFs?5Entity?5?$CFs?5?$CFs?$AA@ ; `string'
	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 4280 :                if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31491

; 4281 :                   goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31491:

; 4284 : 
; 4285 :             GetStringFromAttribute( szColumnName, vDTE, "TE_FieldDataRel", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szColumnName$[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 4286 : 
; 4287 :             zsprintf( szLine, "ALTER TABLE %s " ADD_COLUMN_STMT " ", szTableName );

	lea	edx, DWORD PTR _szTableName$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0BE@FPJB@ALTER?5TABLE?5?$CFs?5ADD?5?$AA@ ; `string'
	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 4288 :             fnBuildColumn( vDTE, f, szLine );

	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_fnBuildColumn@12

; 4289 :             zstrcat( szLine, LINE_TERMINATOR );

	push	OFFSET FLAT:??_C@_01FAJB@?$DL?$AA@	; `string'
	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 4290 :             if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31493

; 4291 :                goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31493:

; 4292 : 
; 4293 :             // If the attribute is not a rel field try the next one.
; 4294 :             GetAddrForAttribute( &pchKeyType, vDTE, "TE_FieldDataRel",
; 4295 :                                  "DataOrRelfieldOrSet" );

	push	OFFSET FLAT:??_C@_0BE@ODFA@DataOrRelfieldOrSet?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _pchKeyType$31485[ebp]
	push	eax
	call	_GetAddrForAttribute@16

; 4296 :             if ( pchKeyType[ 0 ] != 'R' )

	mov	ecx, DWORD PTR _pchKeyType$31485[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 82					; 00000052H
	je	SHORT $L31494

; 4297 :                continue;

	jmp	$L31481
$L31494:

; 4298 : 
; 4299 :             if ( fnBuildFK_Index( vDTE, f ) == -1 )

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_fnBuildFK_Index@8
	movsx	edx, ax
	cmp	edx, -1
	jne	SHORT $L31495

; 4300 :                goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31495:

; 4302 : 
; 4303 :       }  // For each TE_FieldDataRel

	jmp	$L31481
$L31482:

; 4304 : 
; 4305 :       #if COMMIT_EVERY_TABLE
; 4306 :          // Commit the table if we altered it.
; 4307 :          if ( bFirstAlterOfTable == FALSE && fnWriteLine( vDTE, f, COMMIT_STR ) < 0 )
; 4308 :             return( -1 );
; 4309 :       #endif
; 4310 : 
; 4311 :    }  // For each TE_TablRec

	jmp	$L31476
$L31477:

; 4312 : 
; 4313 :    // Drop tables.
; 4314 :    bTableDropped = FALSE;

	mov	BYTE PTR _bTableDropped$[ebp], 0

; 4315 :    for ( nRC = SetCursorFirstEntity( vDB, "TE_TablRec", 0 );
; 4316 :          nRC >= zCURSOR_SET;
; 4317 :          nRC = SetCursorNextEntity( vDB, "TE_TablRec", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDB$[ebp]
	push	eax
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31496
$L31497:
	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDB$[ebp]
	push	ecx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31496:
	movsx	edx, WORD PTR _nRC$[ebp]
	test	edx, edx
	jl	$L31498

; 4319 :       GetStringFromAttribute( szTableName, vDB, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDB$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szTableName$[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 4320 :       RemoveBrackets( szTableName );

	lea	edx, DWORD PTR _szTableName$[ebp]
	push	edx
	call	_RemoveBrackets
	add	esp, 4

; 4321 : 
; 4322 :       if ( CompareAttributeToString( vDB, "TE_TablRec", "MatchFound", "Y" ) != 0 )

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDB$[ebp]
	push	eax
	call	_CompareAttributeToString@16
	movsx	ecx, ax
	test	ecx, ecx
	je	SHORT $L31499

; 4324 :          zsprintf( szLine, "DROP TABLE %s %s", szTableName,
; 4325 :                    LINE_TERMINATOR );

	push	OFFSET FLAT:??_C@_01FAJB@?$DL?$AA@	; `string'
	lea	edx, DWORD PTR _szTableName$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0BB@MKDI@DROP?5TABLE?5?$CFs?5?$CFs?$AA@ ; `string'
	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H

; 4326 : 
; 4327 :          if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31501

; 4328 :             goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31501:

; 4329 : 
; 4330 :          bTableDropped = TRUE;

	mov	BYTE PTR _bTableDropped$[ebp], 1
$L31499:

; 4332 : 
; 4333 :    }  // For each TE_TablRec

	jmp	$L31497
$L31498:

; 4334 : 
; 4335 :    #if COMMIT_EVERY_TABLE
; 4336 :       if ( bTableDropped && fnWriteLine( vDTE, f, COMMIT_STR ) < 0 )
; 4337 :          return( -1 );
; 4338 :    #endif
; 4339 : 
; 4340 :    // Drop/alter columns from tables.
; 4341 :    for ( nRC = SetCursorFirstEntity( vDB, "TE_TablRec", 0 );
; 4342 :          nRC >= zCURSOR_SET;
; 4343 :          nRC = SetCursorNextEntity( vDB, "TE_TablRec", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDB$[ebp]
	push	ecx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31502
$L31503:
	push	0
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDB$[ebp]
	push	edx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31502:
	movsx	eax, WORD PTR _nRC$[ebp]
	test	eax, eax
	jl	$L31504

; 4345 :       zBOOL bFirstAlterForTable;
; 4346 : 
; 4347 :       GetStringFromAttribute( szTableName, vDB, "TE_TablRec", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDB$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTableName$[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 4348 :       RemoveBrackets( szTableName );

	lea	eax, DWORD PTR _szTableName$[ebp]
	push	eax
	call	_RemoveBrackets
	add	esp, 4

; 4349 : 
; 4350 :       if ( CompareAttributeToString( vDB, "TE_TablRec", "MatchFound", "Y" ) != 0 )

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDB$[ebp]
	push	ecx
	call	_CompareAttributeToString@16
	movsx	edx, ax
	test	edx, edx
	je	SHORT $L31506

; 4352 :          // Table deleted, go on to next one.
; 4353 :          continue;

	jmp	SHORT $L31503
$L31506:

; 4355 : 
; 4356 :       // Set the cursor in the TE to match the one in the DB.
; 4357 :       SetCursorFirstEntityByAttr( vDTE, "TE_TablRec", "Name",
; 4358 :                                   vDB,  "TE_TablRec", "Name", 0 );

	push	0
	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vDB$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetCursorFirstEntityByAttr@28

; 4359 : 
; 4360 :       GetStringFromAttribute( szOwner, vDTE, "TE_TablRec", "SQL_TableOwner" );

	push	OFFSET FLAT:??_C@_0P@CNMG@SQL_TableOwner?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _szOwner$[ebp]
	push	eax
	call	_GetStringFromAttribute@16

; 4361 :       if ( szOwner[ 0 ] == 0 && pchDefaultOwner )

	movsx	ecx, BYTE PTR _szOwner$[ebp]
	test	ecx, ecx
	jne	SHORT $L31507
	cmp	DWORD PTR _pchDefaultOwner$[ebp], 0
	je	SHORT $L31507

; 4362 :          zstrcpy( szOwner, pchDefaultOwner );

	mov	edx, DWORD PTR _pchDefaultOwner$[ebp]
	push	edx
	lea	eax, DWORD PTR _szOwner$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
$L31507:

; 4363 : 
; 4364 :       if ( szOwner[ 0 ] )

	movsx	ecx, BYTE PTR _szOwner$[ebp]
	test	ecx, ecx
	je	SHORT $L31508

; 4365 :          zstrcat( szOwner, "." );

	push	OFFSET FLAT:??_C@_01PJCK@?4?$AA@	; `string'
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
$L31508:

; 4366 : 
; 4367 :       bFirstAlterForTable = TRUE;

	mov	BYTE PTR _bFirstAlterForTable$31505[ebp], 1

; 4368 :       for ( nRC = SetCursorFirstEntity( vDB, "TE_FieldDataRel", 0 );
; 4369 :             nRC >= zCURSOR_SET;
; 4370 :             nRC = SetCursorNextEntity( vDB, "TE_FieldDataRel", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDB$[ebp]
	push	eax
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31509
$L31510:
	push	0
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDB$[ebp]
	push	ecx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31509:
	movsx	edx, WORD PTR _nRC$[ebp]
	test	edx, edx
	jl	$L31511

; 4372 :          zSHORT nIndexDroppedCount;
; 4373 : 
; 4374 :          // If a match was found for the column, we don't need to do anything.
; 4375 :          if ( CompareAttributeToString( vDB, "TE_FieldDataRel",
; 4376 :                                         "MatchFound", "Y" ) == 0 )

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDB$[ebp]
	push	eax
	call	_CompareAttributeToString@16
	movsx	ecx, ax
	test	ecx, ecx
	jne	SHORT $L31513

; 4378 :             continue;

	jmp	SHORT $L31510
$L31513:

; 4380 : 
; 4381 :          // Print out a comment if this is the first ALTER for the current
; 4382 :          // table.
; 4383 :          if ( bFirstAlterForTable )

	mov	edx, DWORD PTR _bFirstAlterForTable$31505[ebp]
	and	edx, 255				; 000000ffH
	test	edx, edx
	je	$L31517

; 4385 :             zCHAR szEntityName[ zZEIDON_NAME_LTH + 1 ];
; 4386 : 
; 4387 :             bFirstAlterForTable = FALSE;

	mov	BYTE PTR _bFirstAlterForTable$31505[ebp], 0

; 4388 :             GetStringFromAttribute( szEntityName, vDTE, "ER_Entity", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_09CNO@ER_Entity?$AA@	; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szEntityName$31515[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 4389 : 
; 4390 :             if ( fnWriteLine( vDTE, f, "" ) < 0 )

	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31516

; 4391 :                goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31516:

; 4392 : 
; 4393 :             zsprintf( szLine, "%s Entity %s %s",
; 4394 :                       COMMENT_START, szEntityName, COMMENT_END );

	push	OFFSET FLAT:??_C@_02BOOO@?$CK?1?$AA@	; `string'
	lea	ecx, DWORD PTR _szEntityName$31515[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_02FCCF@?1?$CK?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@LFLL@?$CFs?5Entity?5?$CFs?5?$CFs?$AA@ ; `string'
	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 4395 :             if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31517

; 4396 :                goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31517:

; 4398 : 
; 4399 :          GetStringFromAttribute( szColumnName, vDB, "TE_FieldDataRel", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDB$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szColumnName$[ebp]
	push	ecx
	call	_GetStringFromAttribute@16

; 4400 : 
; 4401 :          // Check to see if there is an index on the column.  If there is,
; 4402 :          // then we need to drop it.
; 4403 :          nIndexDroppedCount = 0;

	mov	WORD PTR _nIndexDroppedCount$31512[ebp], 0

; 4404 :          for ( nRC = SetCursorFirstEntityByString( vDB, "TE_FieldDataRelKey",
; 4405 :                                                    "Name", szColumnName,
; 4406 :                                                    "TE_TablRec" );
; 4407 :                nRC >= zCURSOR_SET;
; 4408 :                nRC = SetCursorNextEntityByString( vDB, "TE_FieldDataRelKey",
; 4409 :                                                   "Name", szColumnName,
; 4410 :                                                   "TE_TablRec" ) )

	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	lea	edx, DWORD PTR _szColumnName$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BD@EGMP@TE_FieldDataRelKey?$AA@ ; `string'
	mov	eax, DWORD PTR _vDB$[ebp]
	push	eax
	call	_SetCursorFirstEntityByString@20
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31518
$L31519:
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	lea	ecx, DWORD PTR _szColumnName$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BD@EGMP@TE_FieldDataRelKey?$AA@ ; `string'
	mov	edx, DWORD PTR _vDB$[ebp]
	push	edx
	call	_SetCursorNextEntityByString@20
	mov	WORD PTR _nRC$[ebp], ax
$L31518:
	movsx	eax, WORD PTR _nRC$[ebp]
	test	eax, eax
	jl	SHORT $L31520

; 4412 :             zCHAR szIndex[ MAX_TABLENAME_LTH + 1 ];
; 4413 : 
; 4414 :             GetStringFromAttribute( szIndex, vDB, "TE_TablRecKey", "IndexName" );

	push	OFFSET FLAT:??_C@_09CEBI@IndexName?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0O@LKEB@TE_TablRecKey?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDB$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szIndex$31521[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 4415 :             fnBuildDropIndex( vDB, szIndex, szOwner, szTableName, f );

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szTableName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szOwner$[ebp]
	push	edx
	lea	eax, DWORD PTR _szIndex$31521[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDB$[ebp]
	push	ecx
	call	_fnBuildDropIndex@20

; 4416 :             nIndexDroppedCount++;

	mov	dx, WORD PTR _nIndexDroppedCount$31512[ebp]
	add	dx, 1
	mov	WORD PTR _nIndexDroppedCount$31512[ebp], dx

; 4417 :          }

	jmp	SHORT $L31519
$L31520:

; 4418 : 
; 4419 :          // Check to see if the column needs to be altered or dropped.
; 4420 :          if ( CompareAttributeToString( vDB, "TE_FieldDataRel",
; 4421 :                                         "MatchFound", "N" ) == 0 )

	push	OFFSET FLAT:??_C@_01OAK@N?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDB$[ebp]
	push	eax
	call	_CompareAttributeToString@16
	movsx	ecx, ax
	test	ecx, ecx
	jne	SHORT $L31522

; 4423 :             // Drop the column.
; 4424 :             zsprintf( szLine, "ALTER TABLE %s%s " DROP_COLUMN_STMT " %s %s",
; 4425 :                       szOwner, szTableName, szColumnName, LINE_TERMINATOR );

	push	OFFSET FLAT:??_C@_01FAJB@?$DL?$AA@	; `string'
	lea	edx, DWORD PTR _szColumnName$[ebp]
	push	edx
	lea	eax, DWORD PTR _szTableName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szOwner$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_0CD@OHJM@ALTER?5TABLE?5?$CFs?$CFs?5DROP?5COLUMN?5?$CFs?5@ ; `string'
	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 24					; 00000018H

; 4426 : 
; 4427 :             if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31524

; 4428 :                goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31524:

; 4430 :          else

	jmp	$L31544
$L31522:

; 4431 :          if ( CompareAttributeToString( vDB, "TE_FieldDataRel",
; 4432 :                                         "MatchFound", "D" ) == 0 )

	push	OFFSET FLAT:??_C@_01PJM@D?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0L@FFM@MatchFound?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDB$[ebp]
	push	eax
	call	_CompareAttributeToString@16
	movsx	ecx, ax
	test	ecx, ecx
	jne	$L31544

; 4434 :             zPCHAR pchKeyType;
; 4435 : 
; 4436 :             // Alter the column to match the datatype in the TE.
; 4437 :             zsprintf( szLine, "ALTER TABLE %s%-*s ALTER COLUMN ",
; 4438 :                       szOwner, (int) MAX_TABLENAME_LTH, szTableName );

	lea	edx, DWORD PTR _szTableName$[ebp]
	push	edx
	push	64					; 00000040H
	lea	eax, DWORD PTR _szOwner$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0CB@MGNG@ALTER?5TABLE?5?$CFs?$CF?9?$CKs?5ALTER?5COLUMN?5@ ; `string'
	lea	ecx, DWORD PTR _szLine$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H

; 4439 : 
; 4440 :             fnBuildColumn( vDB, f, szLine );

	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDB$[ebp]
	push	ecx
	call	_fnBuildColumn@12

; 4441 :             zstrcat( szLine, LINE_TERMINATOR );

	push	OFFSET FLAT:??_C@_01FAJB@?$DL?$AA@	; `string'
	lea	edx, DWORD PTR _szLine$[ebp]
	push	edx
	call	_strcat
	add	esp, 8

; 4442 : 
; 4443 :             if ( fnWriteLine( vDTE, f, szLine ) < 0 )

	lea	eax, DWORD PTR _szLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31530

; 4444 :                goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31530:

; 4445 : 
; 4446 :             // Check to see if we need to re-create any indexes.
; 4447 :             GetAddrForAttribute( &pchKeyType, vDTE, "TE_FieldDataRel",
; 4448 :                                  "DataOrRelfieldOrSet" );

	push	OFFSET FLAT:??_C@_0BE@ODFA@DataOrRelfieldOrSet?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pchKeyType$31527[ebp]
	push	ecx
	call	_GetAddrForAttribute@16

; 4449 :             if ( pchKeyType[ 0 ] == 'R' )

	mov	edx, DWORD PTR _pchKeyType$31527[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 82					; 00000052H
	jne	SHORT $L31531

; 4451 :                if ( fnBuildFK_Index( vDTE, f ) == -1 )

	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_fnBuildFK_Index@8
	movsx	eax, ax
	cmp	eax, -1
	jne	SHORT $L31532

; 4452 :                  goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31532:

; 4453 : 
; 4454 :                // We re-created one of the indexes dropped earlier so decrement
; 4455 :                // count so we'll know if we recreated all the indexes.
; 4456 :                nIndexDroppedCount--;

	mov	cx, WORD PTR _nIndexDroppedCount$31512[ebp]
	sub	cx, 1
	mov	WORD PTR _nIndexDroppedCount$31512[ebp], cx
$L31531:

; 4458 : 
; 4459 :             // If no more indexes need to be recreated, go on to the next col.
; 4460 :             if ( nIndexDroppedCount == 0 )

	movsx	edx, WORD PTR _nIndexDroppedCount$31512[ebp]
	test	edx, edx
	jne	SHORT $L31533

; 4461 :                continue;

	jmp	$L31510
$L31533:

; 4462 : 
; 4463 :             // Check to see if the column we altered is contained in the list of
; 4464 :             // identifiers for the table.  If it is we need to recreate
; 4465 :             // the indexes that were dropped above.
; 4466 :             for ( nRC = SetCursorFirstEntityByString( vDTE, "TE_FieldDataRelKey",
; 4467 :                                                       "Name", szColumnName,
; 4468 :                                                       "TE_TablRec" );
; 4469 : 
; 4470 :                   nRC >= zCURSOR_SET;
; 4471 :                   nRC = SetCursorNextEntityByString( vDTE, "TE_FieldDataRelKey",
; 4472 :                                                      "Name", szColumnName,
; 4473 :                                                       "TE_TablRec" ) )

	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	lea	eax, DWORD PTR _szColumnName$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BD@EGMP@TE_FieldDataRelKey?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetCursorFirstEntityByString@20
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31534
$L31535:
	push	OFFSET FLAT:??_C@_0L@NCMM@TE_TablRec?$AA@ ; `string'
	lea	edx, DWORD PTR _szColumnName$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BD@EGMP@TE_FieldDataRelKey?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetCursorNextEntityByString@20
	mov	WORD PTR _nRC$[ebp], ax
$L31534:
	movsx	ecx, WORD PTR _nRC$[ebp]
	test	ecx, ecx
	jl	SHORT $L31536

; 4475 :                if ( fnBuildIndexFromTablRecKey( vDTE, FALSE, f ) == -1 )

	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_fnBuildIndexFromTablRecKey@12
	movsx	ecx, ax
	cmp	ecx, -1
	jne	SHORT $L31537

; 4476 :                   goto EndOfFunction;

	jmp	$EndOfFunction$31417
$L31537:

; 4477 : 
; 4478 :                // We re-created one of the indexes dropped earlier so decrement
; 4479 :                // count so we'll know if we recreated all the indexes.
; 4480 :                nIndexDroppedCount--;

	mov	dx, WORD PTR _nIndexDroppedCount$31512[ebp]
	sub	dx, 1
	mov	WORD PTR _nIndexDroppedCount$31512[ebp], dx

; 4481 :             }

	jmp	SHORT $L31535
$L31536:

; 4482 : 
; 4483 :             if ( nIndexDroppedCount )

	movsx	eax, WORD PTR _nIndexDroppedCount$31512[ebp]
	test	eax, eax
	je	$L31544

; 4485 :                zCHAR szMsg[ 1000 ];
; 4486 : 
; 4487 :                // An index has been dropped for this column because it has been
; 4488 :                // modified but it is not a FK so we don't normally create an
; 4489 :                // index on it.  We'll display a warning and try to create an
; 4490 :                // index for the column.
; 4491 :                zsprintf( szMsg, "WARNING: The data type for the column %s.%s "
; 4492 :                          "has been changed and therefore had an index deleted.  "
; 4493 :                          "The column is NOT a key and therefore the index was "
; 4494 :                          "added by the DBA.  An attempt has been made to "
; 4495 :                          "recreate the index in the DDL.  Look for 'WARNING' "
; 4496 :                          "in the DDL file",
; 4497 :                          szTableName, szColumnName );

	lea	ecx, DWORD PTR _szColumnName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTableName$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0BAI@KIFF@WARNING?3?5The?5data?5type?5for?5the?5c@ ; `string'
	lea	eax, DWORD PTR _szMsg$31539[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H

; 4498 :                SysMessageBox( vDTE, "DDL Generationg Warning", szMsg, 0 );

	push	0
	lea	ecx, DWORD PTR _szMsg$31539[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_0BI@HFPH@DDL?5Generationg?5Warning?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysMessageBox@16

; 4499 : 
; 4500 :                zsprintf( szMsg, "%s WARNING--Following index may not have the "
; 4501 :                          " same the columns as the original index: %s",
; 4502 :                          COMMENT_START, COMMENT_END );

	push	OFFSET FLAT:??_C@_02BOOO@?$CK?1?$AA@	; `string'
	push	OFFSET FLAT:??_C@_02FCCF@?1?$CK?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0FJ@KCOE@?$CFs?5WARNING?9?9Following?5index?5may?5@ ; `string'
	lea	eax, DWORD PTR _szMsg$31539[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H

; 4503 :                if ( fnWriteLine( vDTE, f, szMsg ) < 0 )

	lea	ecx, DWORD PTR _szMsg$31539[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SysWriteLine@12
	test	eax, eax
	jge	SHORT $L31543

; 4504 :                   goto EndOfFunction;

	jmp	SHORT $EndOfFunction$31417
$L31543:

; 4505 : 
; 4506 :                if ( fnBuildFK_Index( vDTE, f ) == -1 )

	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_fnBuildFK_Index@8
	movsx	eax, ax
	cmp	eax, -1
	jne	SHORT $L31544

; 4507 :                  goto EndOfFunction;

	jmp	SHORT $EndOfFunction$31417
$L31544:

; 4510 : 
; 4511 :       }  // For each TE_FieldDataRel

	jmp	$L31510
$L31511:

; 4512 : 
; 4513 :       #if COMMIT_EVERY_TABLE
; 4514 :          // Commit the table if we altered it.
; 4515 :          if ( bFirstAlterForTable == FALSE && fnWriteLine( vDTE, f, COMMIT_STR ) < 0 )
; 4516 :             return( -1 );
; 4517 :       #endif
; 4518 : 
; 4519 :    }  // For each TE_TablRec

	jmp	$L31503
$L31504:

; 4520 : 
; 4521 :    // If we get here, then everything's ok.
; 4522 :    nReturn = 0;

	mov	WORD PTR _nReturn$[ebp], 0
$EndOfFunction$31417:

; 4523 : 
; 4524 : EndOfFunction:
; 4525 :    if ( f >= 0 )

	cmp	DWORD PTR _f$[ebp], 0
	jl	SHORT $L31545

; 4526 :       SysCloseFile( vSubtask, f, 0 );

	push	0
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vSubtask$[ebp]
	push	edx
	call	_SysCloseFile@12
$L31545:

; 4527 : 
; 4528 :    // Drop the view copies.
; 4529 :    DropView( vDTE );

	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_DropView@4

; 4530 :    DropView( vEMD );

	mov	ecx, DWORD PTR _vEMD$[ebp]
	push	ecx
	call	_DropView@4

; 4531 : 
; 4532 :    return( nReturn );

	mov	ax, WORD PTR _nReturn$[ebp]
$L31384:

; 4533 : 
; 4534 : } // BuildSyncDDL

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_BuildSyncDDL@20 ENDP
_TEXT	ENDS
PUBLIC	_LoadDataTypes@4
PUBLIC	??_C@_0N@INLJ@DB_DataTypes?$AA@			; `string'
PUBLIC	??_C@_01PDAJ@S?$AA@				; `string'
PUBLIC	??_C@_0N@CCA@InternalName?$AA@			; `string'
PUBLIC	??_C@_06PINC@String?$AA@			; `string'
PUBLIC	??_C@_0N@NAC@ExternalName?$AA@			; `string'
PUBLIC	??_C@_01FLCE@L?$AA@				; `string'
PUBLIC	??_C@_07HDOI@Integer?$AA@			; `string'
PUBLIC	??_C@_01PBLD@M?$AA@				; `string'
PUBLIC	??_C@_07DBJI@Decimal?$AA@			; `string'
PUBLIC	??_C@_01KGOM@T?$AA@				; `string'
PUBLIC	??_C@_09KMOL@Timestamp?$AA@			; `string'
PUBLIC	??_C@_01FIAI@X?$AA@				; `string'
PUBLIC	??_C@_0M@BADB@TimeStampEx?$AA@			; `string'
PUBLIC	??_C@_04OMLL@Date?$AA@				; `string'
PUBLIC	??_C@_01FLOP@I?$AA@				; `string'
PUBLIC	??_C@_04OAHI@Time?$AA@				; `string'
PUBLIC	??_C@_01FKLC@F?$AA@				; `string'
PUBLIC	??_C@_09GOGB@FixedChar?$AA@			; `string'
PUBLIC	??_C@_0BA@IMGI@Blob?5?$CIlongblob?$CJ?$AA@	; `string'
PUBLIC	??_C@_01PDMC@V?$AA@				; `string'
PUBLIC	??_C@_0BA@NGGL@Text?5?$CIlongtext?$CJ?$AA@	; `string'
PUBLIC	??_C@_01PFH@A?$AA@				; `string'
PUBLIC	??_C@_0BH@NNJD@SERIAL?5?$CIautoincrement?$CJ?$AA@ ; `string'
PUBLIC	??_C@_01MHL@U?$AA@				; `string'
PUBLIC	??_C@_04JPF@UUID?$AA@				; `string'
PUBLIC	??_C@_01KEJN@O?$AA@				; `string'
PUBLIC	??_C@_07KEJK@Boolean?$AA@			; `string'
EXTRN	_CreateEntity@12:NEAR
;	COMDAT ??_C@_0N@INLJ@DB_DataTypes?$AA@
; File C:\10C\a\oe\KZHSQLXB.C
_DATA	SEGMENT
??_C@_0N@INLJ@DB_DataTypes?$AA@ DB 'DB_DataTypes', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PDAJ@S?$AA@
_DATA	SEGMENT
??_C@_01PDAJ@S?$AA@ DB 'S', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@CCA@InternalName?$AA@
_DATA	SEGMENT
??_C@_0N@CCA@InternalName?$AA@ DB 'InternalName', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_06PINC@String?$AA@
_DATA	SEGMENT
??_C@_06PINC@String?$AA@ DB 'String', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@NAC@ExternalName?$AA@
_DATA	SEGMENT
??_C@_0N@NAC@ExternalName?$AA@ DB 'ExternalName', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FLCE@L?$AA@
_DATA	SEGMENT
??_C@_01FLCE@L?$AA@ DB 'L', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_07HDOI@Integer?$AA@
_DATA	SEGMENT
??_C@_07HDOI@Integer?$AA@ DB 'Integer', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PBLD@M?$AA@
_DATA	SEGMENT
??_C@_01PBLD@M?$AA@ DB 'M', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_07DBJI@Decimal?$AA@
_DATA	SEGMENT
??_C@_07DBJI@Decimal?$AA@ DB 'Decimal', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KGOM@T?$AA@
_DATA	SEGMENT
??_C@_01KGOM@T?$AA@ DB 'T', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_09KMOL@Timestamp?$AA@
_DATA	SEGMENT
??_C@_09KMOL@Timestamp?$AA@ DB 'Timestamp', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FIAI@X?$AA@
_DATA	SEGMENT
??_C@_01FIAI@X?$AA@ DB 'X', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@BADB@TimeStampEx?$AA@
_DATA	SEGMENT
??_C@_0M@BADB@TimeStampEx?$AA@ DB 'TimeStampEx', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_04OMLL@Date?$AA@
_DATA	SEGMENT
??_C@_04OMLL@Date?$AA@ DB 'Date', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FLOP@I?$AA@
_DATA	SEGMENT
??_C@_01FLOP@I?$AA@ DB 'I', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_04OAHI@Time?$AA@
_DATA	SEGMENT
??_C@_04OAHI@Time?$AA@ DB 'Time', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01FKLC@F?$AA@
_DATA	SEGMENT
??_C@_01FKLC@F?$AA@ DB 'F', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_09GOGB@FixedChar?$AA@
_DATA	SEGMENT
??_C@_09GOGB@FixedChar?$AA@ DB 'FixedChar', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@IMGI@Blob?5?$CIlongblob?$CJ?$AA@
_DATA	SEGMENT
??_C@_0BA@IMGI@Blob?5?$CIlongblob?$CJ?$AA@ DB 'Blob (longblob)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PDMC@V?$AA@
_DATA	SEGMENT
??_C@_01PDMC@V?$AA@ DB 'V', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@NGGL@Text?5?$CIlongtext?$CJ?$AA@
_DATA	SEGMENT
??_C@_0BA@NGGL@Text?5?$CIlongtext?$CJ?$AA@ DB 'Text (longtext)', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_01PFH@A?$AA@
_DATA	SEGMENT
??_C@_01PFH@A?$AA@ DB 'A', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BH@NNJD@SERIAL?5?$CIautoincrement?$CJ?$AA@
_DATA	SEGMENT
??_C@_0BH@NNJD@SERIAL?5?$CIautoincrement?$CJ?$AA@ DB 'SERIAL (autoincreme'
	DB	'nt)', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_01MHL@U?$AA@
_DATA	SEGMENT
??_C@_01MHL@U?$AA@ DB 'U', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_04JPF@UUID?$AA@
_DATA	SEGMENT
??_C@_04JPF@UUID?$AA@ DB 'UUID', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_01KEJN@O?$AA@
_DATA	SEGMENT
??_C@_01KEJN@O?$AA@ DB 'O', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_07KEJK@Boolean?$AA@
_DATA	SEGMENT
??_C@_07KEJK@Boolean?$AA@ DB 'Boolean', 00H		; `string'
_DATA	ENDS
_TEXT	SEGMENT
_vType$ = 8
_LoadDataTypes@4 PROC NEAR

; 4538 : {

	push	ebp
	mov	ebp, esp

; 4539 :    //
; 4540 :    // Following are standard types.
; 4541 :    //
; 4542 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );

	push	2
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	eax, DWORD PTR _vType$[ebp]
	push	eax
	call	_CreateEntity@12

; 4543 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "S" );

	push	OFFSET FLAT:??_C@_01PDAJ@S?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0N@CCA@InternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	ecx, DWORD PTR _vType$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4544 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName",
; 4545 :                            "String" );

	push	OFFSET FLAT:??_C@_06PINC@String?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@NAC@ExternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	edx, DWORD PTR _vType$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4546 : 
; 4547 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );

	push	2
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	eax, DWORD PTR _vType$[ebp]
	push	eax
	call	_CreateEntity@12

; 4548 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "L" );

	push	OFFSET FLAT:??_C@_01FLCE@L?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0N@CCA@InternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	ecx, DWORD PTR _vType$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4549 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName",
; 4550 :                            "Integer" );

	push	OFFSET FLAT:??_C@_07HDOI@Integer?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@NAC@ExternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	edx, DWORD PTR _vType$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4551 : 
; 4552 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );

	push	2
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	eax, DWORD PTR _vType$[ebp]
	push	eax
	call	_CreateEntity@12

; 4553 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "M" );

	push	OFFSET FLAT:??_C@_01PBLD@M?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0N@CCA@InternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	ecx, DWORD PTR _vType$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4554 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName",
; 4555 :                            "Decimal" );

	push	OFFSET FLAT:??_C@_07DBJI@Decimal?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@NAC@ExternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	edx, DWORD PTR _vType$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4556 : 
; 4557 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );

	push	2
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	eax, DWORD PTR _vType$[ebp]
	push	eax
	call	_CreateEntity@12

; 4558 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "T" );

	push	OFFSET FLAT:??_C@_01KGOM@T?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0N@CCA@InternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	ecx, DWORD PTR _vType$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4559 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName",
; 4560 :                            "Timestamp" );

	push	OFFSET FLAT:??_C@_09KMOL@Timestamp?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@NAC@ExternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	edx, DWORD PTR _vType$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4561 : 
; 4562 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );

	push	2
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	eax, DWORD PTR _vType$[ebp]
	push	eax
	call	_CreateEntity@12

; 4563 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "X" );

	push	OFFSET FLAT:??_C@_01FIAI@X?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0N@CCA@InternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	ecx, DWORD PTR _vType$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4564 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName",
; 4565 :                            "TimeStampEx" );

	push	OFFSET FLAT:??_C@_0M@BADB@TimeStampEx?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@NAC@ExternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	edx, DWORD PTR _vType$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4566 : 
; 4567 : #if defined( SQLSERVER ) && !defined( QUINSOFT )
; 4568 :    /*
; 4569 :    ** The ODBC-driver for SqlServer doesn't support SQL_DATE and SQL_TIME
; 4570 :    */
; 4571 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );
; 4572 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "T" );
; 4573 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "Date" );
; 4574 : 
; 4575 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );
; 4576 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "T" );
; 4577 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "Time" );
; 4578 : #else
; 4579 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );

	push	2
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	eax, DWORD PTR _vType$[ebp]
	push	eax
	call	_CreateEntity@12

; 4580 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "D" );

	push	OFFSET FLAT:??_C@_01PJM@D?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0N@CCA@InternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	ecx, DWORD PTR _vType$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4581 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "Date" );

	push	OFFSET FLAT:??_C@_04OMLL@Date?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@NAC@ExternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	edx, DWORD PTR _vType$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4582 : 
; 4583 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );

	push	2
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	eax, DWORD PTR _vType$[ebp]
	push	eax
	call	_CreateEntity@12

; 4584 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "I" );

	push	OFFSET FLAT:??_C@_01FLOP@I?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0N@CCA@InternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	ecx, DWORD PTR _vType$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4585 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "Time" );

	push	OFFSET FLAT:??_C@_04OAHI@Time?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@NAC@ExternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	edx, DWORD PTR _vType$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4586 : #endif
; 4587 : 
; 4588 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );

	push	2
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	eax, DWORD PTR _vType$[ebp]
	push	eax
	call	_CreateEntity@12

; 4589 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "F" );

	push	OFFSET FLAT:??_C@_01FKLC@F?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0N@CCA@InternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	ecx, DWORD PTR _vType$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4590 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "FixedChar" );

	push	OFFSET FLAT:??_C@_09GOGB@FixedChar?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@NAC@ExternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	edx, DWORD PTR _vType$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4591 : 
; 4592 : #if defined( ACCESS )
; 4593 : 
; 4594 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );
; 4595 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "B" );
; 4596 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName",
; 4597 :                            "Blob (Memo)" );     // Blob name.
; 4598 : 
; 4599 :    //
; 4600 :    // Following are DB-specific types.
; 4601 :    //
; 4602 : 
; 4603 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );
; 4604 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "V" );
; 4605 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "Memo" );
; 4606 : 
; 4607 : #elif defined( DB2 )
; 4608 : 
; 4609 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );
; 4610 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "B" );
; 4611 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "Blob" );
; 4612 : 
; 4613 :    //
; 4614 :    // Following are DB-specific types.
; 4615 :    //
; 4616 : 
; 4617 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );
; 4618 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "V" );
; 4619 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "CLOB" );
; 4620 : 
; 4621 : #elif defined( SQLBASE ) || defined( ODBC )
; 4622 : 
; 4623 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );
; 4624 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "B" );
; 4625 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName",
; 4626 :                            "Blob (VarChar)" );     // Blob name.
; 4627 : 
; 4628 :    //
; 4629 :    // Following are DB-specific types.
; 4630 :    //
; 4631 : 
; 4632 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );
; 4633 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "V" );
; 4634 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "VarChar" );
; 4635 : 
; 4636 : #elif defined( MYSQL )
; 4637 : 
; 4638 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );

	push	2
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	eax, DWORD PTR _vType$[ebp]
	push	eax
	call	_CreateEntity@12

; 4639 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "B" );

	push	OFFSET FLAT:??_C@_01PAOO@B?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0N@CCA@InternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	ecx, DWORD PTR _vType$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4640 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName",
; 4641 :                            "Blob (longblob)" );       // Blob name.

	push	OFFSET FLAT:??_C@_0BA@IMGI@Blob?5?$CIlongblob?$CJ?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@NAC@ExternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	edx, DWORD PTR _vType$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4642 : 
; 4643 :    //
; 4644 :    // Following are DB-specific types.
; 4645 :    //
; 4646 : 
; 4647 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );

	push	2
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	eax, DWORD PTR _vType$[ebp]
	push	eax
	call	_CreateEntity@12

; 4648 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "V" );

	push	OFFSET FLAT:??_C@_01PDMC@V?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0N@CCA@InternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	ecx, DWORD PTR _vType$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4649 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "Text (longtext)" );

	push	OFFSET FLAT:??_C@_0BA@NGGL@Text?5?$CIlongtext?$CJ?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@NAC@ExternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	edx, DWORD PTR _vType$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4650 : 
; 4651 :    // Create a data type that will be autoincrement in MySql
; 4652 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );

	push	2
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	eax, DWORD PTR _vType$[ebp]
	push	eax
	call	_CreateEntity@12

; 4653 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "A" );

	push	OFFSET FLAT:??_C@_01PFH@A?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0N@CCA@InternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	ecx, DWORD PTR _vType$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4654 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName",
; 4655 :                            "SERIAL (autoincrement)" );

	push	OFFSET FLAT:??_C@_0BH@NNJD@SERIAL?5?$CIautoincrement?$CJ?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@NAC@ExternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	edx, DWORD PTR _vType$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4656 : 
; 4657 :    // UUID
; 4658 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );

	push	2
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	eax, DWORD PTR _vType$[ebp]
	push	eax
	call	_CreateEntity@12

; 4659 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "U" );

	push	OFFSET FLAT:??_C@_01MHL@U?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0N@CCA@InternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	ecx, DWORD PTR _vType$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4660 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "UUID" );

	push	OFFSET FLAT:??_C@_04JPF@UUID?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@NAC@ExternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	edx, DWORD PTR _vType$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4661 : 
; 4662 :    // BOOLEAN
; 4663 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );

	push	2
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	eax, DWORD PTR _vType$[ebp]
	push	eax
	call	_CreateEntity@12

; 4664 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "O" );

	push	OFFSET FLAT:??_C@_01KEJN@O?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0N@CCA@InternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	ecx, DWORD PTR _vType$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4665 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "Boolean" );

	push	OFFSET FLAT:??_C@_07KEJK@Boolean?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@NAC@ExternalName?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0N@INLJ@DB_DataTypes?$AA@ ; `string'
	mov	edx, DWORD PTR _vType$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4666 : 
; 4667 : #elif defined( POSTGRESQL ) || defined( SQLSERVER )
; 4668 : 
; 4669 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );
; 4670 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "B" );
; 4671 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName",
; 4672 :                            "Blob (bytea)" );       // Blob name.
; 4673 : 
; 4674 :    //
; 4675 :    // Following are DB-specific types.
; 4676 :    //
; 4677 : 
; 4678 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );
; 4679 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "V" );
; 4680 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "Text" );
; 4681 : 
; 4682 :    // Create a data type that will be autoincrement in Postgresql
; 4683 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );
; 4684 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "A" );
; 4685 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName",
; 4686 :                            "SERIAL (autoincrement)" );
; 4687 :    
; 4688 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );
; 4689 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "G" );
; 4690 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "Bigint" );
; 4691 : 
; 4692 :    // UUID
; 4693 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );
; 4694 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "U" );
; 4695 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "UUID" );
; 4696 : 
; 4697 :    // BOOLEAN
; 4698 :    CreateEntity( vType, "DB_DataTypes", zPOS_LAST );
; 4699 :    SetAttributeFromString( vType, "DB_DataTypes", "InternalName", "O" );
; 4700 :    SetAttributeFromString( vType, "DB_DataTypes", "ExternalName", "Boolean" );
; 4701 : 
; 4702 : #endif
; 4703 : 
; 4704 :    return( 0 );

	xor	ax, ax

; 4705 : 
; 4706 : } // LoadDataTypes

	pop	ebp
	ret	4
_LoadDataTypes@4 ENDP
_TEXT	ENDS
PUBLIC	_SetDataType@8
PUBLIC	??_C@_06CDGA@Domain?$AA@			; `string'
PUBLIC	??_C@_0N@CMME@GeneratedKey?$AA@			; `string'
PUBLIC	??_C@_03LBCJ@Lth?$AA@				; `string'
PUBLIC	??_C@_0N@IKDH@ER_Attribute?$AA@			; `string'
PUBLIC	??_C@_0N@FPPC@MaxStringLth?$AA@			; `string'
PUBLIC	??_C@_0CD@CCFO@?$CITE?$CJ?5Invalid?5Physical?5Data?5type?5@ ; `string'
PUBLIC	??_C@_0BM@EEGE@Invalid?5Physical?5Data?5type?4?$AA@ ; `string'
PUBLIC	??_C@_09PLDP@Zeidon?5TE?$AA@			; `string'
EXTRN	_SetAttributeFromInteger@16:NEAR
EXTRN	_SetAttributeFromAttribute@24:NEAR
EXTRN	_TraceLineS@8:NEAR
EXTRN	__imp___stricmp:NEAR
;	COMDAT ??_C@_06CDGA@Domain?$AA@
; File C:\10C\a\oe\KZHSQLXB.C
_DATA	SEGMENT
??_C@_06CDGA@Domain?$AA@ DB 'Domain', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@CMME@GeneratedKey?$AA@
_DATA	SEGMENT
??_C@_0N@CMME@GeneratedKey?$AA@ DB 'GeneratedKey', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_03LBCJ@Lth?$AA@
_DATA	SEGMENT
??_C@_03LBCJ@Lth?$AA@ DB 'Lth', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@IKDH@ER_Attribute?$AA@
_DATA	SEGMENT
??_C@_0N@IKDH@ER_Attribute?$AA@ DB 'ER_Attribute', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@FPPC@MaxStringLth?$AA@
_DATA	SEGMENT
??_C@_0N@FPPC@MaxStringLth?$AA@ DB 'MaxStringLth', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CD@CCFO@?$CITE?$CJ?5Invalid?5Physical?5Data?5type?5@
_DATA	SEGMENT
??_C@_0CD@CCFO@?$CITE?$CJ?5Invalid?5Physical?5Data?5type?5@ DB '(TE) Inva'
	DB	'lid Physical Data type = ', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@EEGE@Invalid?5Physical?5Data?5type?4?$AA@
_DATA	SEGMENT
??_C@_0BM@EEGE@Invalid?5Physical?5Data?5type?4?$AA@ DB 'Invalid Physical '
	DB	'Data type.', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_09PLDP@Zeidon?5TE?$AA@
_DATA	SEGMENT
??_C@_09PLDP@Zeidon?5TE?$AA@ DB 'Zeidon TE', 00H	; `string'
_DATA	ENDS
_TEXT	SEGMENT
_vDTE$ = 8
_bSetDefault$ = 12
_pchDataType$ = -8
_lLth$ = -4
_bTimestampAsString$ = -12
_pchDomainName$31600 = -16
_vTZTEDBLO$31601 = -20
_vTZDBHODO$31602 = -28
_vDBH_Data$31603 = -24
_szDBH_DataObjectName$31604 = -64
_SetDataType@8 PROC NEAR

; 4728 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 4729 :    zPCHAR pchDataType;
; 4730 :    zLONG  lLth;
; 4731 :    zBOOL  bTimestampAsString = FALSE;

	mov	BYTE PTR _bTimestampAsString$[ebp], 0

; 4732 : 
; 4733 :    if ( bSetDefault )

	mov	eax, DWORD PTR _bSetDefault$[ebp]
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	$L31625

; 4735 :       zPCHAR pchDomainName;
; 4736 :       zVIEW  vTZTEDBLO;
; 4737 :       zVIEW  vTZDBHODO = 0;

	mov	DWORD PTR _vTZDBHODO$31602[ebp], 0

; 4738 :       zVIEW  vDBH_Data = 0;

	mov	DWORD PTR _vDBH_Data$31603[ebp], 0

; 4739 :       zCHAR  szDBH_DataObjectName[ zZEIDON_NAME_LTH + 1 ];
; 4740 : 
; 4741 :       // If it exists get the object that defines the dbhandler type.
; 4742 :       GetViewByName( &vTZTEDBLO, "TZTEDBLO", vDTE, zLEVEL_TASK );  // vDTE added dks 2009.11.11

	push	2
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_08IAKB@TZTEDBLO?$AA@	; `string'
	lea	edx, DWORD PTR _vTZTEDBLO$31601[ebp]
	push	edx
	call	_GetViewByName@16

; 4743 :       if ( vTZTEDBLO )

	cmp	DWORD PTR _vTZTEDBLO$31601[ebp], 0
	je	SHORT $L31605

; 4744 :          SetCursorFirstEntityByAttr( vTZTEDBLO, "TE_DBMS_Source", "DBMS",
; 4745 :                                      vDTE,      "TE_DBMS_Source", "DBMS", 0 );

	push	0
	push	OFFSET FLAT:??_C@_04EALC@DBMS?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_04EALC@DBMS?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	ecx, DWORD PTR _vTZTEDBLO$31601[ebp]
	push	ecx
	call	_SetCursorFirstEntityByAttr@28
$L31605:

; 4746 : 
; 4747 :       // Try to get the OI that contains DBH-specific data.
; 4748 :       SetOI_FromBlob( &vDBH_Data, szDBH_DataObjectName, vDTE, vDTE,
; 4749 :                       "TE_DBMS_Source", "DBH_Data", zNOI_OKAY );

	push	512					; 00000200H
	push	OFFSET FLAT:??_C@_08DKGC@DBH_Data?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szDBH_DataObjectName$31604[ebp]
	push	ecx
	lea	edx, DWORD PTR _vDBH_Data$31603[ebp]
	push	edx
	call	_SetOI_FromBlob@28

; 4750 : 
; 4751 :       #if defined( ACCESS ) || defined( ODBC )
; 4752 : 
; 4753 :          // Try to get the ODBC definition.
; 4754 :          SetOI_FromBlob( &vTZDBHODO, 0, vDTE, vTZTEDBLO,
; 4755 :                          "TE_DBMS_Source", "DBH_Data", zNOI_OKAY );
; 4756 : 
; 4757 :          // Check to see if there is DBH data set in the TE.
; 4758 :          if ( vDBH_Data )
; 4759 :          {
; 4760 :             bTimestampAsString =
; 4761 :                          ( CompareAttributeToString( vDBH_Data, "ODBC",
; 4762 :                                                      "TimestampAsString",
; 4763 :                                                      "Y" ) == 0 );
; 4764 :          }
; 4765 :          else
; 4766 :          // Check to see if there is DBH data set in the DB List object.
; 4767 :          if ( vTZDBHODO )
; 4768 :          {
; 4769 :                bTimestampAsString =
; 4770 :                          ( CompareAttributeToString( vTZDBHODO, "ODBC",
; 4771 :                                                      "TimestampAsString",
; 4772 :                                                      "Y" ) == 0 );
; 4773 :          }
; 4774 : 
; 4775 :       #endif
; 4776 : 
; 4777 :       // Set the default data type from the ER attribute domain.  If the
; 4778 :       // domain name is "Date" or "Time" then use SqlBase date/time types.
; 4779 :       GetAddrForAttribute( &pchDomainName, vDTE, "Domain", "Name" );

	push	OFFSET FLAT:??_C@_04EFNI@Name?$AA@	; `string'
	push	OFFSET FLAT:??_C@_06CDGA@Domain?$AA@	; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pchDomainName$31600[ebp]
	push	ecx
	call	_GetAddrForAttribute@16

; 4780 : 
; 4781 : #if defined( SQLSERVER ) && !defined( QUINSOFT )
; 4782 :       if ( zstrcmpi( pchDomainName, "Date" ) == 0 ||
; 4783 :            zstrcmpi( pchDomainName, "Time" ) == 0 )
; 4784 :       {
; 4785 :          SetAttributeFromString( vDTE, "TE_FieldDataRel", "DataType", "T" );
; 4786 :       }
; 4787 :       else
; 4788 :       if ( zstrcmpi( pchDomainName, "TimeStampEx" ) == 0 )
; 4789 :          SetAttributeFromString( vDTE, "TE_FieldDataRel", "DataType", "X" );
; 4790 :       else
; 4791 :          // Domain is not Date or Time, so just set the default data type the
; 4792 :          // same as the domain's data type.
; 4793 :          SetAttributeFromAttribute( vDTE, "TE_FieldDataRel", "DataType",
; 4794 :                                     vDTE, "Domain", "DataType" );
; 4795 : #else
; 4796 :       if ( zstrcmpi( pchDomainName, "Date" ) == 0 )

	push	OFFSET FLAT:??_C@_04OMLL@Date?$AA@	; `string'
	mov	edx, DWORD PTR _pchDomainName$31600[ebp]
	push	edx
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L31607

; 4797 :          SetAttributeFromString( vDTE, "TE_FieldDataRel", "DataType", "D" );

	push	OFFSET FLAT:??_C@_01PJM@D?$AA@		; `string'
	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetAttributeFromString@16

; 4798 :       else

	jmp	$L31619
$L31607:

; 4799 :       if ( zstrcmpi( pchDomainName, "Time" ) == 0 )

	push	OFFSET FLAT:??_C@_04OAHI@Time?$AA@	; `string'
	mov	ecx, DWORD PTR _pchDomainName$31600[ebp]
	push	ecx
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L31609

; 4800 :          SetAttributeFromString( vDTE, "TE_FieldDataRel", "DataType", "I" );

	push	OFFSET FLAT:??_C@_01FLOP@I?$AA@		; `string'
	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4801 :       else

	jmp	$L31619
$L31609:

; 4802 :       if ( zstrcmpi( pchDomainName, "TimeStampEx" ) == 0 )

	push	OFFSET FLAT:??_C@_0M@BADB@TimeStampEx?$AA@ ; `string'
	mov	eax, DWORD PTR _pchDomainName$31600[ebp]
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L31611

; 4803 :          SetAttributeFromString( vDTE, "TE_FieldDataRel", "DataType", "X" );

	push	OFFSET FLAT:??_C@_01FIAI@X?$AA@		; `string'
	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4804 : #if defined( MYSQL ) || defined( POSTGRESQL )
; 4805 :       else

	jmp	$L31619
$L31611:

; 4806 :       // If domain is GeneratedKey then use "SERIAL" for default datatype.
; 4807 :       if ( zstrcmpi( pchDomainName, "GeneratedKey" ) == 0 )

	push	OFFSET FLAT:??_C@_0N@CMME@GeneratedKey?$AA@ ; `string'
	mov	edx, DWORD PTR _pchDomainName$31600[ebp]
	push	edx
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L31613

; 4809 :          SetAttributeFromString( vDTE, "TE_FieldDataRel", "DataType", "A" );

	push	OFFSET FLAT:??_C@_01PFH@A?$AA@		; `string'
	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetAttributeFromString@16

; 4811 :       else

	jmp	$L31619
$L31613:

; 4812 :       if ( zstrcmpi( pchDomainName, "UUID" ) == 0 )

	push	OFFSET FLAT:??_C@_04JPF@UUID?$AA@	; `string'
	mov	ecx, DWORD PTR _pchDomainName$31600[ebp]
	push	ecx
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L31616

; 4814 :          SetAttributeFromString( vDTE, "TE_FieldDataRel", "DataType", "U" );

	push	OFFSET FLAT:??_C@_01MHL@U?$AA@		; `string'
	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4816 :       else

	jmp	SHORT $L31619
$L31616:

; 4817 :       if ( zstrcmpi( pchDomainName, "Boolean" ) == 0 )

	push	OFFSET FLAT:??_C@_07KEJK@Boolean?$AA@	; `string'
	mov	eax, DWORD PTR _pchDomainName$31600[ebp]
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $L31618

; 4819 :          SetAttributeFromString( vDTE, "TE_FieldDataRel", "DataType", "O" );

	push	OFFSET FLAT:??_C@_01KEJN@O?$AA@		; `string'
	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetAttributeFromString@16

; 4821 : #endif
; 4822 :       else

	jmp	SHORT $L31619
$L31618:

; 4823 :          // Domain is not Date or Time, so just set the default data type the
; 4824 :          // same as the domain's data type.
; 4825 :          SetAttributeFromAttribute( vDTE, "TE_FieldDataRel", "DataType",
; 4826 :                                     vDTE, "Domain", "DataType" );

	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_06CDGA@Domain?$AA@	; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetAttributeFromAttribute@24
$L31619:

; 4827 : #endif
; 4828 : 
; 4829 :       // Strings with a length > 254 must have a data type of VarChar.
; 4830 :       GetAddrForAttribute( &pchDataType, vDTE, "Domain", "DataType" );

	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_06CDGA@Domain?$AA@	; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pchDataType$[ebp]
	push	edx
	call	_GetAddrForAttribute@16

; 4831 :       if ( pchDataType[ 0 ] == zTYPE_STRING )

	mov	eax, DWORD PTR _pchDataType$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 83					; 00000053H
	jne	SHORT $L31625

; 4833 :          GetIntegerFromAttribute( &lLth, vDTE, "ER_Attribute", "Lth" );

	push	OFFSET FLAT:??_C@_03LBCJ@Lth?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@IKDH@ER_Attribute?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _lLth$[ebp]
	push	eax
	call	_GetIntegerFromAttribute@16

; 4834 :          if ( lLth == 0  )

	cmp	DWORD PTR _lLth$[ebp], 0
	jne	SHORT $L31623

; 4835 :             GetIntegerFromAttribute( &lLth, vDTE, "Domain", "MaxStringLth" );

	push	OFFSET FLAT:??_C@_0N@FPPC@MaxStringLth?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_06CDGA@Domain?$AA@	; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _lLth$[ebp]
	push	edx
	call	_GetIntegerFromAttribute@16
$L31623:

; 4836 : 
; 4837 :          if ( lLth > MAX_LTH_FOR_STRING )

	cmp	DWORD PTR _lLth$[ebp], 254		; 000000feH
	jle	SHORT $L31625

; 4838 :             SetAttributeFromString( vDTE, "TE_FieldDataRel", "DataType", "V" );

	push	OFFSET FLAT:??_C@_01PDMC@V?$AA@		; `string'
	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetAttributeFromString@16
$L31625:

; 4847 : 
; 4848 :    // Get the data type.
; 4849 :    GetAddrForAttribute( &pchDataType, vDTE, "TE_FieldDataRel", "DataType" );

	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pchDataType$[ebp]
	push	edx
	call	_GetAddrForAttribute@16

; 4850 : 
; 4851 :    // Now set the length according to the physical data type.
; 4852 :    switch ( pchDataType[ 0 ] )
; 4853 :    {

	mov	eax, DWORD PTR _pchDataType$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR -68+[ebp], ecx
	mov	edx, DWORD PTR -68+[ebp]
	sub	edx, 65					; 00000041H
	mov	DWORD PTR -68+[ebp], edx
	cmp	DWORD PTR -68+[ebp], 23			; 00000017H
	ja	$L31651
	mov	ecx, DWORD PTR -68+[ebp]
	xor	eax, eax
	mov	al, BYTE PTR $L32375[ecx]
	jmp	DWORD PTR $L32376[eax*4]
$L31630:

; 4854 : 
; 4855 :       case zTYPE_STRING:
; 4856 :       case 'V':
; 4857 :       case zTYPE_FIXEDCHAR:
; 4858 :          GetIntegerFromAttribute( &lLth, vDTE, "ER_Attribute", "Lth" );

	push	OFFSET FLAT:??_C@_03LBCJ@Lth?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@IKDH@ER_Attribute?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	lea	eax, DWORD PTR _lLth$[ebp]
	push	eax
	call	_GetIntegerFromAttribute@16

; 4859 :          if ( lLth == 0  )

	cmp	DWORD PTR _lLth$[ebp], 0
	jne	SHORT $L31631

; 4860 :             GetIntegerFromAttribute( &lLth, vDTE, "Domain", "MaxStringLth" );

	push	OFFSET FLAT:??_C@_0N@FPPC@MaxStringLth?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_06CDGA@Domain?$AA@	; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _lLth$[ebp]
	push	edx
	call	_GetIntegerFromAttribute@16
$L31631:

; 4861 : 
; 4862 :          SetAttributeFromInteger( vDTE, "TE_FieldDataRel", "Length", lLth );

	mov	eax, DWORD PTR _lLth$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetAttributeFromInteger@16

; 4863 :          break;

	jmp	$L31627
$L31632:

; 4864 : 
; 4865 :       case zTYPE_BLOB:
; 4866 : 
; 4867 : #if defined( DB2 )
; 4868 :          // DB2 needs a blob length.
; 4869 :          GetIntegerFromAttribute( &lLth, vDTE, "ER_Attribute", "Lth" );
; 4870 :          if ( lLth == 0  )
; 4871 :             GetIntegerFromAttribute( &lLth, vDTE, "Domain", "MaxStringLth" );
; 4872 : 
; 4873 :          if ( lLth == 0  )
; 4874 :             lLth = 65536;   // Default length for blobs.
; 4875 : 
; 4876 :          SetAttributeFromInteger( vDTE, "TE_FieldDataRel", "Length", lLth );
; 4877 : #else
; 4878 :          SetAttributeFromAttribute( vDTE, "TE_FieldDataRel", "Length",
; 4879 :                                     vDTE, "ER_Attribute",    "Lth" );

	push	OFFSET FLAT:??_C@_03LBCJ@Lth?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@IKDH@ER_Attribute?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetAttributeFromAttribute@24

; 4880 : #endif
; 4881 : 
; 4882 :          break;

	jmp	$L31627
$L31633:

; 4883 : 
; 4884 :       case 'O':                // For Boolean
; 4885 :          SetAttributeFromInteger( vDTE, "TE_FieldDataRel", "Length", 1 );

	push	1
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetAttributeFromInteger@16

; 4886 :          break;

	jmp	$L31627
$L31634:

; 4887 : 	
; 4888 :       case 'A':                // For SERIAL/AUTOINCREMENT
; 4889 :       case zTYPE_INTEGER:
; 4890 :          SetAttributeFromInteger( vDTE, "TE_FieldDataRel", "Length", 4 );

	push	4
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetAttributeFromInteger@16

; 4891 :          break;

	jmp	$L31627
$L31635:

; 4892 : 
; 4893 :       case 'U':                // For UUID
; 4894 :          SetAttributeFromInteger( vDTE, "TE_FieldDataRel", "Length", 16 );

	push	16					; 00000010H
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetAttributeFromInteger@16

; 4895 :          break;

	jmp	$L31627
$L31636:

; 4896 : 
; 4897 :       case zTYPE_DECIMAL:
; 4898 :          GetIntegerFromAttribute( &lLth, vDTE, "ER_Attribute", "Lth" );

	push	OFFSET FLAT:??_C@_03LBCJ@Lth?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@IKDH@ER_Attribute?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _lLth$[ebp]
	push	edx
	call	_GetIntegerFromAttribute@16

; 4899 :          if ( lLth == 0  )

	cmp	DWORD PTR _lLth$[ebp], 0
	jne	SHORT $L31638

; 4901 :             GetIntegerFromAttribute( &lLth, vDTE, "Domain", "MaxStringLth" );

	push	OFFSET FLAT:??_C@_0N@FPPC@MaxStringLth?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_06CDGA@Domain?$AA@	; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lLth$[ebp]
	push	ecx
	call	_GetIntegerFromAttribute@16

; 4902 :             if ( lLth == 0 )

	cmp	DWORD PTR _lLth$[ebp], 0
	jne	SHORT $L31638

; 4903 :                lLth = sizeof( zDECIMAL );

	mov	DWORD PTR _lLth$[ebp], 40		; 00000028H
$L31638:

; 4905 :          SetAttributeFromInteger( vDTE, "TE_FieldDataRel", "Length", lLth );

	mov	edx, DWORD PTR _lLth$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetAttributeFromInteger@16

; 4906 :          break;

	jmp	$L31627
$L31640:

; 4907 : 
; 4908 :       case zTYPE_DATETIME:
; 4909 :       case zTYPE_TIME:
; 4910 :          if ( bTimestampAsString )

	mov	ecx, DWORD PTR _bTimestampAsString$[ebp]
	and	ecx, 255				; 000000ffH
	test	ecx, ecx
	je	SHORT $L31641

; 4912 :             // This is only true when we are setting the default value of the
; 4913 :             // data type.  Change the datatype to be a string.
; 4914 :             SetAttributeFromString( vDTE, "TE_FieldDataRel", "DataType", "S" );

	push	OFFSET FLAT:??_C@_01PDAJ@S?$AA@		; `string'
	push	OFFSET FLAT:??_C@_08FNON@DataType?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetAttributeFromString@16

; 4915 :             SetAttributeFromInteger( vDTE, "TE_FieldDataRel", "Length", 25 );

	push	25					; 00000019H
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetAttributeFromInteger@16

; 4917 :          else

	jmp	SHORT $L31644
$L31641:

; 4919 :             switch ( pchDataType[ 0 ] )
; 4920 :             {

	mov	ecx, DWORD PTR _pchDataType$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR -72+[ebp], dl
	cmp	BYTE PTR -72+[ebp], 73			; 00000049H
	je	SHORT $L31648
	cmp	BYTE PTR -72+[ebp], 84			; 00000054H
	je	SHORT $L31647
	jmp	SHORT $L31644
$L31647:

; 4921 :                case zTYPE_DATETIME:
; 4922 :                   SetAttributeFromInteger( vDTE, "TE_FieldDataRel", "Length", 4 );

	push	4
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetAttributeFromInteger@16

; 4923 :                   break;

	jmp	SHORT $L31644
$L31648:

; 4924 : 
; 4925 :                case zTYPE_TIME:
; 4926 :                   SetAttributeFromInteger( vDTE, "TE_FieldDataRel", "Length", 8 );

	push	8
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	call	_SetAttributeFromInteger@16
$L31644:

; 4930 : 
; 4931 :          break;

	jmp	SHORT $L31627
$L31649:

; 4932 : 
; 4933 :       case zTYPE_DATE:
; 4934 :          SetAttributeFromInteger( vDTE, "TE_FieldDataRel", "Length", 4 );

	push	4
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SetAttributeFromInteger@16

; 4935 :          break;

	jmp	SHORT $L31627
$L31650:

; 4936 : 
; 4937 :       case 'X':
; 4938 :          SetAttributeFromInteger( vDTE, "TE_FieldDataRel", "Length", 30 );

	push	30					; 0000001eH
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BA@PJGE@TE_FieldDataRel?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	call	_SetAttributeFromInteger@16

; 4939 :          break;

	jmp	SHORT $L31627
$L31651:

; 4940 : 
; 4941 :       default:
; 4942 :          TraceLineS( "(TE) Invalid Physical Data type = ", pchDataType );

	mov	ecx, DWORD PTR _pchDataType$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_0CD@CCFO@?$CITE?$CJ?5Invalid?5Physical?5Data?5type?5@ ; `string'
	call	_TraceLineS@8

; 4943 :          SysMessageBox( vDTE, "Zeidon TE", "Invalid Physical Data type.", 1 );

	push	1
	push	OFFSET FLAT:??_C@_0BM@EEGE@Invalid?5Physical?5Data?5type?4?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_09PLDP@Zeidon?5TE?$AA@ ; `string'
	mov	edx, DWORD PTR _vDTE$[ebp]
	push	edx
	call	_SysMessageBox@16

; 4944 :          return( 0 );

	xor	ax, ax
	jmp	SHORT $L31595
$L31627:

; 4946 : 
; 4947 :    return( 0 );

	xor	ax, ax
$L31595:

; 4948 : 
; 4949 : } // SetDataType

	mov	esp, ebp
	pop	ebp
	ret	8
$L32376:
	DD	$L31634
	DD	$L31632
	DD	$L31649
	DD	$L31630
	DD	$L31640
	DD	$L31636
	DD	$L31633
	DD	$L31635
	DD	$L31650
	DD	$L31651
$L32375:
	DB	0
	DB	1
	DB	9
	DB	2
	DB	9
	DB	3
	DB	9
	DB	9
	DB	4
	DB	9
	DB	9
	DB	0
	DB	5
	DB	9
	DB	6
	DB	9
	DB	9
	DB	9
	DB	3
	DB	4
	DB	7
	DB	3
	DB	9
	DB	8
_SetDataType@8 ENDP
_TEXT	ENDS
PUBLIC	_fnChangeReservedName@4
PUBLIC	??_C@_02IALC@z_?$AA@				; `string'
;	COMDAT ??_C@_02IALC@z_?$AA@
; File C:\10C\a\oe\KZHSQLXB.C
_DATA	SEGMENT
??_C@_02IALC@z_?$AA@ DB 'z_', 00H			; `string'
_DATA	ENDS
_TEXT	SEGMENT
_pchName$ = 8
_k$ = -8
_j$ = -4
_szTemp$31665 = -108
_fnChangeReservedName@4 PROC NEAR

; 4954 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	edi

; 4955 :    zSHORT   k, j;
; 4956 : 
; 4957 :    // List of reserved names is terminated by a empty string.
; 4958 :    for ( k = 0; szReservedName[ k ][ 0 ]; k++ )

	mov	WORD PTR _k$[ebp], 0
	jmp	SHORT $L31661
$L31662:
	mov	ax, WORD PTR _k$[ebp]
	add	ax, 1
	mov	WORD PTR _k$[ebp], ax
$L31661:
	movsx	ecx, WORD PTR _k$[ebp]
	mov	edx, DWORD PTR _szReservedName[ecx*4]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $L31663

; 4960 :       j = zstrcmpi( szReservedName[ k ], pchName );

	mov	ecx, DWORD PTR _pchName$[ebp]
	push	ecx
	movsx	edx, WORD PTR _k$[ebp]
	mov	eax, DWORD PTR _szReservedName[edx*4]
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	mov	WORD PTR _j$[ebp], ax

; 4961 :       if ( j == 0 )

	movsx	ecx, WORD PTR _j$[ebp]
	test	ecx, ecx
	jne	SHORT $L31664

; 4963 :          zCHAR szTemp[ 100 ] = "z_";

	mov	dx, WORD PTR ??_C@_02IALC@z_?$AA@
	mov	WORD PTR _szTemp$31665[ebp], dx
	mov	al, BYTE PTR ??_C@_02IALC@z_?$AA@+2
	mov	BYTE PTR _szTemp$31665[ebp+2], al
	mov	ecx, 24					; 00000018H
	xor	eax, eax
	lea	edi, DWORD PTR _szTemp$31665[ebp+3]
	rep stosd
	stosb

; 4964 : 
; 4965 :          // Since we know that all the reserved words are at least 2 chars
; 4966 :          // shorter then the max column/table length, then don't worry about
; 4967 :          // compressing the name.
; 4968 :          zstrcat( szTemp, pchName );

	mov	ecx, DWORD PTR _pchName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTemp$31665[ebp]
	push	edx
	call	_strcat
	add	esp, 8

; 4969 :          zstrcpy( pchName, szTemp );

	lea	eax, DWORD PTR _szTemp$31665[ebp]
	push	eax
	mov	ecx, DWORD PTR _pchName$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 4970 :          return;

	jmp	SHORT $L31663
$L31664:

; 4972 : 
; 4973 :       // Reserved words are listed in alphabetical order.  If the compare
; 4974 :       // returned a value greater than 0, then pchName comes before the current
; 4975 :       // szReservedName, which means there cannot be a match.
; 4976 :       if ( j > 0 )

	movsx	edx, WORD PTR _j$[ebp]
	test	edx, edx
	jle	SHORT $L31667

; 4977 :          return;

	jmp	SHORT $L31663
$L31667:

; 4978 :    }

	jmp	$L31662
$L31663:

; 4979 : }

	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	4
_fnChangeReservedName@4 ENDP
_TEXT	ENDS
PUBLIC	_TranslateToUnderscoreCase@12
EXTRN	_SysTranslateString@8:NEAR
_TEXT	SEGMENT
_pchSrc$ = 8
_pchTarget$ = 12
_cMetaType$ = 16
_vDBH_Data$ = -16
_l$ = -20
_targetEnd$ = -280
_original$ = -8
_p$ = -4
_sz$ = -276
_nMaxLth$ = -12
_TranslateToUnderscoreCase@12 PROC NEAR

; 5011 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH

; 5012 :    zVIEW  vDBH_Data = 0;

	mov	DWORD PTR _vDBH_Data$[ebp], 0

; 5013 :    //zCHAR  szDBH_DataObjectName[ zZEIDON_NAME_LTH + 1 ];
; 5014 :    //zCHAR  szCreateUnderscore[ 2 ];
; 5015 :    zLONG  l;
; 5016 :    zPCHAR targetEnd; // = pchTarget + targetLth - 1; // Point to last char in target buffer.
; 5017 :    zPCHAR original = pchSrc;

	mov	eax, DWORD PTR _pchSrc$[ebp]
	mov	DWORD PTR _original$[ebp], eax

; 5018 :    zPCHAR p;
; 5019 :    zCHAR  sz[ 256 ];
; 5020 :    zSHORT nMaxLth;      // Used to keep track of duplicate names.
; 5021 : 
; 5022 :    switch ( cMetaType )
; 5023 :    {

	mov	cl, BYTE PTR _cMetaType$[ebp]
	mov	BYTE PTR -284+[ebp], cl
	cmp	BYTE PTR -284+[ebp], 65			; 00000041H
	je	SHORT $L31691
	cmp	BYTE PTR -284+[ebp], 69			; 00000045H
	je	SHORT $L31687
	jmp	SHORT $L31695
$L31687:

; 5024 :       case 'E':      // Meta type is Entity
; 5025 : 
; 5026 :          // Try getting the max length from the DBH-Specific OI.  If one is
; 5027 :          // not specified use the default length.
; 5028 :          if ( vDBH_Data &&
; 5029 :               GetIntegerFromAttribute( &l, vDBH_Data, "ODBC",
; 5030 :                                        "MaxTableNameLength" ) != -1 )

	cmp	DWORD PTR _vDBH_Data$[ebp], 0
	je	SHORT $L31688
	push	OFFSET FLAT:??_C@_0BD@KOPE@MaxTableNameLength?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_04JENC@ODBC?$AA@	; `string'
	mov	edx, DWORD PTR _vDBH_Data$[ebp]
	push	edx
	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	call	_GetIntegerFromAttribute@16
	movsx	ecx, ax
	cmp	ecx, -1
	je	SHORT $L31688

; 5032 :             nMaxLth = (zSHORT) l;

	mov	dx, WORD PTR _l$[ebp]
	mov	WORD PTR _nMaxLth$[ebp], dx

; 5034 :          else

	jmp	SHORT $L31690
$L31688:

; 5035 :             nMaxLth = MAX_TABLENAME_LTH;

	mov	WORD PTR _nMaxLth$[ebp], 64		; 00000040H
$L31690:

; 5036 : 
; 5037 :          break;

	jmp	SHORT $L31684
$L31691:

; 5038 : 
; 5039 :       case 'A':      // Meta type is Attribute
; 5040 : 
; 5041 :          // Try getting the max length from the DBH-Specific OI.  If one is
; 5042 :          // not specified use the default length.
; 5043 :          if ( vDBH_Data &&
; 5044 :               GetIntegerFromAttribute( &l, vDBH_Data, "ODBC",
; 5045 :                                        "MaxColumnNameLength" ) != -1 )

	cmp	DWORD PTR _vDBH_Data$[ebp], 0
	je	SHORT $L31692
	push	OFFSET FLAT:??_C@_0BE@GNCH@MaxColumnNameLength?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_04JENC@ODBC?$AA@	; `string'
	mov	eax, DWORD PTR _vDBH_Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _l$[ebp]
	push	ecx
	call	_GetIntegerFromAttribute@16
	movsx	edx, ax
	cmp	edx, -1
	je	SHORT $L31692

; 5047 :             nMaxLth = (zSHORT) l;

	mov	ax, WORD PTR _l$[ebp]
	mov	WORD PTR _nMaxLth$[ebp], ax

; 5049 :          else

	jmp	SHORT $L31694
$L31692:

; 5050 :             nMaxLth = MAX_COLUMNNAME_LTH;

	mov	WORD PTR _nMaxLth$[ebp], 64		; 00000040H
$L31694:

; 5051 : 
; 5052 :          break;

	jmp	SHORT $L31684
$L31695:

; 5053 : 
; 5054 : 	  default:
; 5055 : 	     zstrcpy( pchTarget, pchSrc );

	mov	ecx, DWORD PTR _pchSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pchTarget$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8

; 5056 : 		 return 0;

	xor	ax, ax
	jmp	$L31675
$L31684:

; 5058 : 
; 5059 :    if ( nMaxLth >= BUFF_SIZE )

	movsx	eax, WORD PTR _nMaxLth$[ebp]
	cmp	eax, 256				; 00000100H
	jl	SHORT $L31696

; 5060 :       nMaxLth = BUFF_SIZE - 1;

	mov	WORD PTR _nMaxLth$[ebp], 255		; 000000ffH
$L31696:

; 5061 : 
; 5062 :   targetEnd = pchTarget + nMaxLth - 1;

	movsx	ecx, WORD PTR _nMaxLth$[ebp]
	mov	edx, DWORD PTR _pchTarget$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _targetEnd$[ebp], eax

; 5063 : 
; 5064 :   // Defensive programming...
; 5065 :   *targetEnd = 0;

	mov	ecx, DWORD PTR _targetEnd$[ebp]
	mov	BYTE PTR [ecx], 0

; 5066 : 
; 5067 :   if ( (zSHORT) zstrlen( pchSrc ) >= nMaxLth )

	mov	edx, DWORD PTR _pchSrc$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	movsx	eax, ax
	movsx	ecx, WORD PTR _nMaxLth$[ebp]
	cmp	eax, ecx
	jl	SHORT $L31698

; 5068 :      return zCALL_ERROR;

	mov	ax, -16					; fffffff0H
	jmp	$L31675
$L31698:

; 5069 : 
; 5070 :   zstrcpy( sz, pchSrc );

	mov	edx, DWORD PTR _pchSrc$[ebp]
	push	edx
	lea	eax, DWORD PTR _sz$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 5071 : 
; 5072 :   //p = pchTarget;
; 5073 :   p = sz;

	lea	ecx, DWORD PTR _sz$[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 5074 : 
; 5075 :   // Copy first char to target.
; 5076 :   *p++ = *pchSrc++;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _pchSrc$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR _pchSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pchSrc$[ebp], eax
$L31700:

; 5077 :   while ( *pchSrc != 0 )

	mov	ecx, DWORD PTR _pchSrc$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$L31701

; 5079 :       // Do we have enough space to add two more chars?
; 5080 :     if ( p + 2 > targetEnd )

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _targetEnd$[ebp]
	jbe	SHORT $L31702

; 5081 :   	  return -16;

	mov	ax, -16					; fffffff0H
	jmp	$L31675
$L31702:

; 5082 : 
; 5083 :     if ( *pchSrc >= 'A' && *pchSrc <= 'Z' )

	mov	ecx, DWORD PTR _pchSrc$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 65					; 00000041H
	jl	SHORT $L31707
	mov	eax, DWORD PTR _pchSrc$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 90					; 0000005aH
	jg	SHORT $L31707

; 5085 : 	  // We have a capital letter.  Is previous letter upper?
; 5086 : 	  if ( *(p-1) < 'A' || *(p-1) > 'Z' )

	mov	edx, DWORD PTR _p$[ebp]
	movsx	eax, BYTE PTR [edx-1]
	cmp	eax, 65					; 00000041H
	jl	SHORT $L31705
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx-1]
	cmp	edx, 90					; 0000005aH
	jle	SHORT $L31704
$L31705:

; 5087 : 	    // No, so copy _.
; 5088 : 	    *p++ = '_';

	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 95			; 0000005fH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx

; 5089 : 	  else

	jmp	SHORT $L31707
$L31704:

; 5090 : 	    // Previous letter is also upper.  Insert _ if next char is lower.
; 5091 : 	    if ( ( *(pchSrc+1) < 'A' || *(pchSrc+1) > 'Z' ) && *(pchSrc+1) != 0 )

	mov	edx, DWORD PTR _pchSrc$[ebp]
	movsx	eax, BYTE PTR [edx+1]
	cmp	eax, 65					; 00000041H
	jl	SHORT $L31708
	mov	ecx, DWORD PTR _pchSrc$[ebp]
	movsx	edx, BYTE PTR [ecx+1]
	cmp	edx, 90					; 0000005aH
	jle	SHORT $L31707
$L31708:
	mov	eax, DWORD PTR _pchSrc$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $L31707

; 5092 : 			*p++ = '_';

	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], 95			; 0000005fH
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$L31707:

; 5094 :       *p++ = *pchSrc++;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _pchSrc$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _pchSrc$[ebp]
	add	edx, 1
	mov	DWORD PTR _pchSrc$[ebp], edx

; 5095 :     }

	jmp	$L31700
$L31701:

; 5096 : //
; 5097 :   *p++ = 0;

	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx

; 5098 :   
; 5099 :   // Now convert to all lower.
; 5100 :   SysTranslateString( p, 'L' );

	push	76					; 0000004cH
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_SysTranslateString@8

; 5101 :   zstrcpy( pchTarget, sz );

	lea	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pchTarget$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 5102 : 
; 5103 :   return 0;

	xor	ax, ax
$L31675:

; 5104 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TranslateToUnderscoreCase@12 ENDP
_TEXT	ENDS
PUBLIC	??_C@_02IKBN@B_?$AA@				; `string'
PUBLIC	??_C@_02IPGJ@Bc?$AA@				; `string'
PUBLIC	_GenerateName@12
PUBLIC	??_C@_0CA@CEEE@TranslateNamesToLowerUnderscore?$AA@ ; `string'
EXTRN	__imp____mb_cur_max:DWORD
EXTRN	__imp___pctype:DWORD
EXTRN	__imp___isctype:NEAR
_BSS	SEGMENT
_?nNameCount@?1??GenerateName@@9@9 DW 01H DUP (?)
	ALIGN	4

_?nMaxLth@?1??GenerateName@@9@9 DW 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0CA@CEEE@TranslateNamesToLowerUnderscore?$AA@
; File C:\10C\a\oe\KZHSQLXB.C
_DATA	SEGMENT
??_C@_0CA@CEEE@TranslateNamesToLowerUnderscore?$AA@ DB 'TranslateNamesToL'
	DB	'owerUnderscore', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02IKBN@B_?$AA@
_DATA	SEGMENT
??_C@_02IKBN@B_?$AA@ DB 'B_', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_02IPGJ@Bc?$AA@
_DATA	SEGMENT
??_C@_02IPGJ@Bc?$AA@ DB 'Bc', 00H			; `string'
_DATA	ENDS
_TEXT	SEGMENT
_nLth$31746 = -60
_vDTE$ = 8
_pchName$ = 12
_cMetaType$ = 16
_vDBH_Data$ = -4
_szDBH_DataObjectName$ = -40
_szCreateUnderscore$ = -52
_pch1$ = -48
_pch2$ = -56
_l$ = -44
_GenerateName@12 PROC NEAR

; 5137 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H

; 5138 :    static zSHORT nNameCount;   // Used to keep track of duplicate names.
; 5139 :    static zSHORT nMaxLth;      // Used to keep track of duplicate names.
; 5140 : 
; 5141 :    zVIEW  vDBH_Data = 0;

	mov	DWORD PTR _vDBH_Data$[ebp], 0

; 5142 :    zCHAR  szDBH_DataObjectName[ zZEIDON_NAME_LTH + 1 ];
; 5143 :    zCHAR  szCreateUnderscore[ 2 ];
; 5144 :    zPCHAR pch1;
; 5145 :    zPCHAR pch2;
; 5146 :    zLONG  l;
; 5147 : 
; 5148 :    // Try to get the OI that contains DBH-specific data.
; 5149 :    SetOI_FromBlob( &vDBH_Data, szDBH_DataObjectName, vDTE, vDTE,
; 5150 :                    "TE_DBMS_Source", "DBH_Data", zNOI_OKAY );

	push	512					; 00000200H
	push	OFFSET FLAT:??_C@_08DKGC@DBH_Data?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	eax, DWORD PTR _vDTE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szDBH_DataObjectName$[ebp]
	push	edx
	lea	eax, DWORD PTR _vDBH_Data$[ebp]
	push	eax
	call	_SetOI_FromBlob@28

; 5151 : 
; 5152 :    // Eliminate invalid chars.
; 5153 :    for ( pch1 = pch2 = pchName; *pch2; pch2++ )

	mov	ecx, DWORD PTR _pchName$[ebp]
	mov	DWORD PTR _pch2$[ebp], ecx
	mov	edx, DWORD PTR _pch2$[ebp]
	mov	DWORD PTR _pch1$[ebp], edx
	jmp	SHORT $L31727
$L31728:
	mov	eax, DWORD PTR _pch2$[ebp]
	add	eax, 1
	mov	DWORD PTR _pch2$[ebp], eax
$L31727:
	mov	ecx, DWORD PTR _pch2$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $L31729

; 5155 :       // Even though SQLBase allows '@', '#', and '$' we don't generate them.
; 5156 :       if ( zisalnum( *pch2 ) || *pch2 == '_' )

	mov	eax, DWORD PTR __imp____mb_cur_max
	cmp	DWORD PTR [eax], 1
	jle	SHORT $L32380
	push	263					; 00000107H
	mov	ecx, DWORD PTR _pch2$[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	edx
	call	DWORD PTR __imp___isctype
	add	esp, 8
	mov	DWORD PTR -64+[ebp], eax
	jmp	SHORT $L32381
$L32380:
	mov	eax, DWORD PTR _pch2$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR __imp___pctype
	mov	eax, DWORD PTR [edx]
	xor	edx, edx
	mov	dx, WORD PTR [eax+ecx*2]
	and	edx, 263				; 00000107H
	mov	DWORD PTR -64+[ebp], edx
$L32381:
	cmp	DWORD PTR -64+[ebp], 0
	jne	SHORT $L31731
	mov	eax, DWORD PTR _pch2$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 95					; 0000005fH
	jne	SHORT $L31730
$L31731:

; 5157 :          *pch1++ = *pch2;  // Copy valid char.

	mov	edx, DWORD PTR _pch1$[ebp]
	mov	eax, DWORD PTR _pch2$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _pch1$[ebp]
	add	edx, 1
	mov	DWORD PTR _pch1$[ebp], edx
$L31730:

; 5158 :    }

	jmp	SHORT $L31728
$L31729:

; 5159 : 
; 5160 :    // Null-terminate string.
; 5161 :    pch1[ 0 ] = 0;

	mov	eax, DWORD PTR _pch1$[ebp]
	mov	BYTE PTR [eax], 0

; 5162 : 
; 5163 :    // KJS 08/07/14 - DG wants to be able to create names Like EntityName to entity_name. This is the ini setting.
; 5164 :    GetStringFromAttribute (szCreateUnderscore, vDTE, "TE_DBMS_Source", "TranslateNamesToLowerUnderscore");

	push	OFFSET FLAT:??_C@_0CA@CEEE@TranslateNamesToLowerUnderscore?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	ecx, DWORD PTR _vDTE$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szCreateUnderscore$[ebp]
	push	edx
	call	_GetStringFromAttribute@16

; 5165 : 
; 5166 :    switch ( cMetaType )
; 5167 :    {

	mov	al, BYTE PTR _cMetaType$[ebp]
	mov	BYTE PTR -68+[ebp], al
	cmp	BYTE PTR -68+[ebp], 65			; 00000041H
	je	SHORT $L31741
	cmp	BYTE PTR -68+[ebp], 69			; 00000045H
	je	SHORT $L31737
	cmp	BYTE PTR -68+[ebp], 88			; 00000058H
	je	$L31745
	jmp	$L31734
$L31737:

; 5168 :       case 'E':      // Meta type is Entity
; 5169 :          nNameCount = 1;

	mov	WORD PTR _?nNameCount@?1??GenerateName@@9@9, 1

; 5170 : 
; 5171 :          // Try getting the max length from the DBH-Specific OI.  If one is
; 5172 :          // not specified use the default length.
; 5173 :          if ( vDBH_Data &&
; 5174 :               GetIntegerFromAttribute( &l, vDBH_Data, "ODBC",
; 5175 :                                        "MaxTableNameLength" ) != -1 )

	cmp	DWORD PTR _vDBH_Data$[ebp], 0
	je	SHORT $L31738
	push	OFFSET FLAT:??_C@_0BD@KOPE@MaxTableNameLength?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_04JENC@ODBC?$AA@	; `string'
	mov	ecx, DWORD PTR _vDBH_Data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _l$[ebp]
	push	edx
	call	_GetIntegerFromAttribute@16
	movsx	eax, ax
	cmp	eax, -1
	je	SHORT $L31738

; 5177 :             nMaxLth = (zSHORT) l;

	mov	cx, WORD PTR _l$[ebp]
	mov	WORD PTR _?nMaxLth@?1??GenerateName@@9@9, cx

; 5179 :          else

	jmp	SHORT $L31740
$L31738:

; 5180 :             nMaxLth = MAX_TABLENAME_LTH;

	mov	WORD PTR _?nMaxLth@?1??GenerateName@@9@9, 64 ; 00000040H
$L31740:

; 5181 : 
; 5182 :          break;

	jmp	$L31734
$L31741:

; 5183 : 
; 5184 :       case 'A':      // Meta type is Attribute
; 5185 :          nNameCount = 1;

	mov	WORD PTR _?nNameCount@?1??GenerateName@@9@9, 1

; 5186 : 
; 5187 :          // Try getting the max length from the DBH-Specific OI.  If one is
; 5188 :          // not specified use the default length.
; 5189 :          if ( vDBH_Data &&
; 5190 :               GetIntegerFromAttribute( &l, vDBH_Data, "ODBC",
; 5191 :                                        "MaxColumnNameLength" ) != -1 )

	cmp	DWORD PTR _vDBH_Data$[ebp], 0
	je	SHORT $L31742
	push	OFFSET FLAT:??_C@_0BE@GNCH@MaxColumnNameLength?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_04JENC@ODBC?$AA@	; `string'
	mov	edx, DWORD PTR _vDBH_Data$[ebp]
	push	edx
	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	call	_GetIntegerFromAttribute@16
	movsx	ecx, ax
	cmp	ecx, -1
	je	SHORT $L31742

; 5193 :             nMaxLth = (zSHORT) l;

	mov	dx, WORD PTR _l$[ebp]
	mov	WORD PTR _?nMaxLth@?1??GenerateName@@9@9, dx

; 5195 :          else

	jmp	SHORT $L31744
$L31742:

; 5196 :             nMaxLth = MAX_COLUMNNAME_LTH;

	mov	WORD PTR _?nMaxLth@?1??GenerateName@@9@9, 64 ; 00000040H
$L31744:

; 5197 : 
; 5198 :          break;

	jmp	SHORT $L31734
$L31745:

; 5202 :          zSHORT nLth;
; 5203 : 
; 5204 :          // When generating new names, we just tack on an incrementing
; 5205 :          // number.  For example, "ColName" becomes "ColName02", "ColName02"
; 5206 :          // becomes "ColName03", etc.
; 5207 : 
; 5208 :          nNameCount++;

	mov	ax, WORD PTR _?nNameCount@?1??GenerateName@@9@9
	add	ax, 1
	mov	WORD PTR _?nNameCount@?1??GenerateName@@9@9, ax

; 5209 :          nLth = zstrlen( pchName );

	mov	ecx, DWORD PTR _pchName$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	WORD PTR _nLth$31746[ebp], ax

; 5210 :          if ( nNameCount > 2 )

	movsx	edx, WORD PTR _?nNameCount@?1??GenerateName@@9@9
	cmp	edx, 2
	jle	SHORT $L31747

; 5211 :             nLth = nLth - 2;

	movsx	eax, WORD PTR _nLth$31746[ebp]
	sub	eax, 2
	mov	WORD PTR _nLth$31746[ebp], ax

; 5212 :          else

	jmp	SHORT $L31749
$L31747:

; 5213 :          if ( nLth > nMaxLth - 2 )

	movsx	ecx, WORD PTR _nLth$31746[ebp]
	movsx	edx, WORD PTR _?nMaxLth@?1??GenerateName@@9@9
	sub	edx, 2
	cmp	ecx, edx
	jle	SHORT $L31749

; 5214 :             nLth = nMaxLth - 2;

	movsx	eax, WORD PTR _?nMaxLth@?1??GenerateName@@9@9
	sub	eax, 2
	mov	WORD PTR _nLth$31746[ebp], ax
$L31749:

; 5215 : 
; 5216 :          zsprintf( pchName + nLth, "%02d", nNameCount );

	movsx	ecx, WORD PTR _?nNameCount@?1??GenerateName@@9@9
	push	ecx
	push	OFFSET FLAT:??_C@_04LGDF@?$CF02d?$AA@	; `string'
	movsx	edx, WORD PTR _nLth$31746[ebp]
	mov	eax, DWORD PTR _pchName$[ebp]
	add	eax, edx
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH

; 5217 : 
; 5218 :          // We know name is short enough and no reserved words contain numbers
; 5219 :          // so just return.
; 5220 :          return( 0 );

	xor	ax, ax
	jmp	SHORT $L31716
$L31734:

; 5223 : 
; 5224 :    if ( nMaxLth >= BUFF_SIZE )

	movsx	ecx, WORD PTR _?nMaxLth@?1??GenerateName@@9@9
	cmp	ecx, 256				; 00000100H
	jl	SHORT $L31750

; 5225 :       nMaxLth = BUFF_SIZE - 1;

	mov	WORD PTR _?nMaxLth@?1??GenerateName@@9@9, 255 ; 000000ffH
$L31750:

; 5226 : 
; 5227 :    // Compress the name if it needs it.
; 5228 :    UfCompressName( pchName,   // Original name.
; 5229 :                    pchName,   // New (shorter) name.
; 5230 :                    nMaxLth,   // Max length of string.
; 5231 :                    "",        // Remove embedded spaces.
; 5232 :                    "",        // Ignore '_' (for now).
; 5233 :                    "Bc",      // Remove lower-case vowels starting from back.
; 5234 :                    "B_",      // Remove '_' starting from back.
; 5235 :                    0 );       // Stop when the name is short enough.

	push	0
	push	OFFSET FLAT:??_C@_02IKBN@B_?$AA@	; `string'
	push	OFFSET FLAT:??_C@_02IPGJ@Bc?$AA@	; `string'
	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	push	OFFSET FLAT:??_C@_00A@?$AA@		; `string'
	mov	dx, WORD PTR _?nMaxLth@?1??GenerateName@@9@9
	push	edx
	mov	eax, DWORD PTR _pchName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pchName$[ebp]
	push	ecx
	call	_UfCompressName@32

; 5236 : 
; 5237 :    if ( szCreateUnderscore[ 0 ] == 'Y' )

	movsx	edx, BYTE PTR _szCreateUnderscore$[ebp]
	cmp	edx, 89					; 00000059H
	jne	SHORT $L31753

; 5238 :       // KJS 08/07/14 - Change string to all lower-case if we are creating table/column names with underscore.
; 5239 :       SysTranslateString( pchName, 'L' );

	push	76					; 0000004cH
	mov	eax, DWORD PTR _pchName$[ebp]
	push	eax
	call	_SysTranslateString@8

; 5240 :    else

	jmp	SHORT $L31754
$L31753:

; 5241 :       // Change string to all upper-case.
; 5242 :       SysTranslateString( pchName, 'U' );

	push	85					; 00000055H
	mov	ecx, DWORD PTR _pchName$[ebp]
	push	ecx
	call	_SysTranslateString@8
$L31754:

; 5243 : 
; 5244 :    // Make sure generated name doesn't match a reserved word.
; 5245 :    fnChangeReservedName( pchName );

	mov	edx, DWORD PTR _pchName$[ebp]
	push	edx
	call	_fnChangeReservedName@4

; 5246 : 
; 5247 :    return( 0 );

	xor	ax, ax
$L31716:

; 5248 : 
; 5249 : } // GenerateName

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_GenerateName@12 ENDP
_TEXT	ENDS
PUBLIC	_fnSortDataFields@4
PUBLIC	??_C@_0L@PPLE@DATARECORD?$AA@			; `string'
PUBLIC	??_C@_0M@PNOD@CHILDENTITY?$AA@			; `string'
PUBLIC	??_C@_09JEIA@DATAFIELD?$AA@			; `string'
PUBLIC	??_C@_07MPNE@FLDTYPE?$AA@			; `string'
PUBLIC	??_C@_0L@CDIB@XVAATT_TOK?$AA@			; `string'
PUBLIC	??_C@_06BLIJ@ATTRIB?$AA@			; `string'
EXTRN	_SetViewFromView@8:NEAR
EXTRN	_SetViewToSubobject@8:NEAR
EXTRN	_MoveSubobject@24:NEAR
EXTRN	_SetCursorPrevEntity@12:NEAR
EXTRN	_SetCursorLastEntity@12:NEAR
EXTRN	_SetCursorAbsolutePosition@12:NEAR
EXTRN	_GetAbsolutePositionForEntity@12:NEAR
EXTRN	_DefineHierarchicalCursor@8:NEAR
EXTRN	_DropHierarchicalCursor@4:NEAR
EXTRN	_SetCursorNextEntityHierarchical@12:NEAR
;	COMDAT ??_C@_0L@PPLE@DATARECORD?$AA@
; File C:\10C\a\oe\KZHSQLXB.C
_DATA	SEGMENT
??_C@_0L@PPLE@DATARECORD?$AA@ DB 'DATARECORD', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0M@PNOD@CHILDENTITY?$AA@
_DATA	SEGMENT
??_C@_0M@PNOD@CHILDENTITY?$AA@ DB 'CHILDENTITY', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09JEIA@DATAFIELD?$AA@
_DATA	SEGMENT
??_C@_09JEIA@DATAFIELD?$AA@ DB 'DATAFIELD', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_07MPNE@FLDTYPE?$AA@
_DATA	SEGMENT
??_C@_07MPNE@FLDTYPE?$AA@ DB 'FLDTYPE', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@CDIB@XVAATT_TOK?$AA@
_DATA	SEGMENT
??_C@_0L@CDIB@XVAATT_TOK?$AA@ DB 'XVAATT_TOK', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_06BLIJ@ATTRIB?$AA@
_DATA	SEGMENT
??_C@_06BLIJ@ATTRIB?$AA@ DB 'ATTRIB', 00H		; `string'
_DATA	ENDS
_TEXT	SEGMENT
_vTZZOXODO$ = 8
_usReturnLevel$ = -52
_nRC$ = -48
_szEntityName$ = -44
_vXOD$ = -4
_vXOD2$ = -8
_lPos$31769 = -56
_fnSortDataFields@4 PROC NEAR

; 7113 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 7114 :    zUSHORT usReturnLevel;
; 7115 :    zSHORT  nRC;
; 7116 :    zCHAR   szEntityName[ 33 ];
; 7117 :    zVIEW   vXOD;
; 7118 :    zVIEW   vXOD2;
; 7119 : 
; 7120 :    // If there is no DATARECORD for the root entity then there is nothing
; 7121 :    // to do (this LOD has no physical info).
; 7122 :    if ( CheckExistenceOfEntity( vTZZOXODO, "DATARECORD" ) != zCURSOR_SET )

	push	OFFSET FLAT:??_C@_0L@PPLE@DATARECORD?$AA@ ; `string'
	mov	eax, DWORD PTR _vTZZOXODO$[ebp]
	push	eax
	call	_CheckExistenceOfEntity@8
	movsx	ecx, ax
	test	ecx, ecx
	je	SHORT $L31764

; 7123 :       return( 0 );

	xor	ax, ax
	jmp	$L31758
$L31764:

; 7124 : 
; 7125 :    CreateViewFromViewForTask( &vTZZOXODO, vTZZOXODO, 0 );

	push	0
	mov	edx, DWORD PTR _vTZZOXODO$[ebp]
	push	edx
	lea	eax, DWORD PTR _vTZZOXODO$[ebp]
	push	eax
	call	_CreateViewFromViewForTask@12

; 7126 :    CreateViewFromViewForTask( &vXOD, vTZZOXODO, 0 );

	push	0
	mov	ecx, DWORD PTR _vTZZOXODO$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vXOD$[ebp]
	push	edx
	call	_CreateViewFromViewForTask@12

; 7127 :    CreateViewFromViewForTask( &vXOD2, vTZZOXODO, 0 );

	push	0
	mov	eax, DWORD PTR _vTZZOXODO$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vXOD2$[ebp]
	push	ecx
	call	_CreateViewFromViewForTask@12

; 7128 : 
; 7129 :    // Initialize DATARECORD into szEntityName so that we reference the first
; 7130 :    // ENTITY.
; 7131 :    zstrcpy( szEntityName, "DATARECORD" );

	push	OFFSET FLAT:??_C@_0L@PPLE@DATARECORD?$AA@ ; `string'
	lea	edx, DWORD PTR _szEntityName$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8

; 7132 : 
; 7133 :    for ( nRC = DefineHierarchicalCursor( vTZZOXODO, "DATARECORD" );
; 7134 :          nRC >= zCURSOR_SET;
; 7135 :          nRC = SetCursorNextEntityHierarchical( &usReturnLevel,
; 7136 :                                                 szEntityName, vTZZOXODO ) )

	push	OFFSET FLAT:??_C@_0L@PPLE@DATARECORD?$AA@ ; `string'
	mov	eax, DWORD PTR _vTZZOXODO$[ebp]
	push	eax
	call	_DefineHierarchicalCursor@8
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31766
$L31767:
	mov	ecx, DWORD PTR _vTZZOXODO$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szEntityName$[ebp]
	push	edx
	lea	eax, DWORD PTR _usReturnLevel$[ebp]
	push	eax
	call	_SetCursorNextEntityHierarchical@12
	mov	WORD PTR _nRC$[ebp], ax
$L31766:
	movsx	ecx, WORD PTR _nRC$[ebp]
	test	ecx, ecx
	jl	$L31768

; 7138 :       zLONG lPos;
; 7139 : 
; 7140 :       if ( nRC == zCURSOR_SET_RECURSIVECHILD )

	movsx	edx, WORD PTR _nRC$[ebp]
	cmp	edx, 2
	jne	SHORT $L31770

; 7141 :          SetViewToSubobject( vTZZOXODO, "CHILDENTITY" );

	push	OFFSET FLAT:??_C@_0M@PNOD@CHILDENTITY?$AA@ ; `string'
	mov	eax, DWORD PTR _vTZZOXODO$[ebp]
	push	eax
	call	_SetViewToSubobject@8
$L31770:

; 7142 : 
; 7143 :       if ( zstrcmp( szEntityName, "DATARECORD" ) != 0 )

	movsx	ecx, BYTE PTR _szEntityName$[ebp]
	movsx	edx, BYTE PTR ??_C@_0L@PPLE@DATARECORD?$AA@
	cmp	ecx, edx
	jne	SHORT $L32383
	push	OFFSET FLAT:??_C@_0L@PPLE@DATARECORD?$AA@ ; `string'
	lea	eax, DWORD PTR _szEntityName$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	mov	DWORD PTR -60+[ebp], eax
	jmp	SHORT $L32384
$L32383:
	movsx	ecx, BYTE PTR _szEntityName$[ebp]
	movsx	edx, BYTE PTR ??_C@_0L@PPLE@DATARECORD?$AA@
	sub	ecx, edx
	xor	eax, eax
	test	ecx, ecx
	setle	al
	dec	eax
	and	eax, 2
	add	eax, -1
	mov	DWORD PTR -60+[ebp], eax
$L32384:
	cmp	DWORD PTR -60+[ebp], 0
	je	SHORT $L31778

; 7144 :          continue;

	jmp	$L31767
$L31778:

; 7145 : 
; 7146 :       GetAbsolutePositionForEntity( &lPos, vTZZOXODO, "DATARECORD" );

	push	OFFSET FLAT:??_C@_0L@PPLE@DATARECORD?$AA@ ; `string'
	mov	ecx, DWORD PTR _vTZZOXODO$[ebp]
	push	ecx
	lea	edx, DWORD PTR _lPos$31769[ebp]
	push	edx
	call	_GetAbsolutePositionForEntity@12

; 7147 :       SetCursorAbsolutePosition( szEntityName, vXOD, lPos );

	mov	eax, DWORD PTR _lPos$31769[ebp]
	push	eax
	mov	ecx, DWORD PTR _vXOD$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szEntityName$[ebp]
	push	edx
	call	_SetCursorAbsolutePosition@12

; 7148 : 
; 7149 :       // Move blob fields to the end.  We'll start at the end and go back
; 7150 :       // to the beginning. We'll skip the very last entity since it's already
; 7151 :       // last.
; 7152 :       SetCursorLastEntity( vXOD, "DATAFIELD", 0 );

	push	0
	push	OFFSET FLAT:??_C@_09JEIA@DATAFIELD?$AA@	; `string'
	mov	eax, DWORD PTR _vXOD$[ebp]
	push	eax
	call	_SetCursorLastEntity@12

; 7153 :       nRC = SetCursorPrevEntity( vXOD, "DATAFIELD", 0 );

	push	0
	push	OFFSET FLAT:??_C@_09JEIA@DATAFIELD?$AA@	; `string'
	mov	ecx, DWORD PTR _vXOD$[ebp]
	push	ecx
	call	_SetCursorPrevEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31781:

; 7154 :       while ( nRC >= zCURSOR_SET )

	movsx	edx, WORD PTR _nRC$[ebp]
	test	edx, edx
	jl	SHORT $L31782

; 7156 :          SetViewFromView( vXOD2, vXOD );

	mov	eax, DWORD PTR _vXOD$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vXOD2$[ebp]
	push	ecx
	call	_SetViewFromView@8

; 7157 :          nRC = SetCursorPrevEntity( vXOD, "DATAFIELD", 0 );

	push	0
	push	OFFSET FLAT:??_C@_09JEIA@DATAFIELD?$AA@	; `string'
	mov	edx, DWORD PTR _vXOD$[ebp]
	push	edx
	call	_SetCursorPrevEntity@12
	mov	WORD PTR _nRC$[ebp], ax

; 7158 : 
; 7159 :          if ( CompareAttributeToString( vXOD2, "DATAFIELD", "FLDTYPE",
; 7160 :                                         "V" ) == 0 ||
; 7161 :               CompareAttributeToString( vXOD2, "DATAFIELD", "FLDTYPE",
; 7162 :                                         "B" ) == 0 )

	push	OFFSET FLAT:??_C@_01PDMC@V?$AA@		; `string'
	push	OFFSET FLAT:??_C@_07MPNE@FLDTYPE?$AA@	; `string'
	push	OFFSET FLAT:??_C@_09JEIA@DATAFIELD?$AA@	; `string'
	mov	eax, DWORD PTR _vXOD2$[ebp]
	push	eax
	call	_CompareAttributeToString@16
	movsx	ecx, ax
	test	ecx, ecx
	je	SHORT $L31784
	push	OFFSET FLAT:??_C@_01PAOO@B?$AA@		; `string'
	push	OFFSET FLAT:??_C@_07MPNE@FLDTYPE?$AA@	; `string'
	push	OFFSET FLAT:??_C@_09JEIA@DATAFIELD?$AA@	; `string'
	mov	edx, DWORD PTR _vXOD2$[ebp]
	push	edx
	call	_CompareAttributeToString@16
	movsx	eax, ax
	test	eax, eax
	jne	SHORT $L31783
$L31784:

; 7164 :             // Move current DATAFIELD to the end.
; 7165 :             MoveSubobject( vXOD2, "DATAFIELD", vXOD2, "DATAFIELD",
; 7166 :                            zPOS_LAST, zREPOS_PREV );

	push	4
	push	2
	push	OFFSET FLAT:??_C@_09JEIA@DATAFIELD?$AA@	; `string'
	mov	ecx, DWORD PTR _vXOD2$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_09JEIA@DATAFIELD?$AA@	; `string'
	mov	edx, DWORD PTR _vXOD2$[ebp]
	push	edx
	call	_MoveSubobject@24
$L31783:

; 7168 :       }

	jmp	$L31781
$L31782:

; 7169 : 
; 7170 :       // Move Keys fields to the beginning.  We'll start at the end and go back
; 7171 :       // to the beginning. We'll skip the very first entity since it's already
; 7172 :       // first.
; 7173 :       SetViewFromView( vXOD2, vXOD );

	mov	eax, DWORD PTR _vXOD$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vXOD2$[ebp]
	push	ecx
	call	_SetViewFromView@8

; 7174 :       SetCursorFirstEntity( vXOD, "DATAFIELD", 0 );

	push	0
	push	OFFSET FLAT:??_C@_09JEIA@DATAFIELD?$AA@	; `string'
	mov	edx, DWORD PTR _vXOD$[ebp]
	push	edx
	call	_SetCursorFirstEntity@12

; 7175 :       nRC = SetCursorNextEntity( vXOD, "DATAFIELD", 0 );

	push	0
	push	OFFSET FLAT:??_C@_09JEIA@DATAFIELD?$AA@	; `string'
	mov	eax, DWORD PTR _vXOD$[ebp]
	push	eax
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31788:

; 7176 :       while ( nRC >= zCURSOR_SET )

	movsx	ecx, WORD PTR _nRC$[ebp]
	test	ecx, ecx
	jl	$L31789

; 7178 :          // Find the correct ATTRIB entity.
; 7179 :          SetCursorFirstEntityByAttr( vXOD, "ATTRIB", "XVAATT_TOK",
; 7180 :                                      vXOD, "DATAFIELD", "XVAATT_TOK", 0 );

	push	0
	push	OFFSET FLAT:??_C@_0L@CDIB@XVAATT_TOK?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_09JEIA@DATAFIELD?$AA@	; `string'
	mov	edx, DWORD PTR _vXOD$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_0L@CDIB@XVAATT_TOK?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_06BLIJ@ATTRIB?$AA@	; `string'
	mov	eax, DWORD PTR _vXOD$[ebp]
	push	eax
	call	_SetCursorFirstEntityByAttr@28

; 7181 : 
; 7182 :          SetViewFromView( vXOD2, vXOD );

	mov	ecx, DWORD PTR _vXOD$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vXOD2$[ebp]
	push	edx
	call	_SetViewFromView@8

; 7183 :          nRC = SetCursorNextEntity( vXOD, "DATAFIELD", 0 );

	push	0
	push	OFFSET FLAT:??_C@_09JEIA@DATAFIELD?$AA@	; `string'
	mov	eax, DWORD PTR _vXOD$[ebp]
	push	eax
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax

; 7184 : 
; 7185 :          // If the attribute is a key move it to the beginning.
; 7186 :          if ( CompareAttributeToString( vXOD2, "ATTRIB", "KEY", "Y" ) == 0 )

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_03PHBO@KEY?$AA@	; `string'
	push	OFFSET FLAT:??_C@_06BLIJ@ATTRIB?$AA@	; `string'
	mov	ecx, DWORD PTR _vXOD2$[ebp]
	push	ecx
	call	_CompareAttributeToString@16
	movsx	edx, ax
	test	edx, edx
	jne	SHORT $L31792

; 7188 : 
; 7189 :             // Move current DATAFIELD to the beginning.
; 7190 :             MoveSubobject( vXOD2, "DATAFIELD", vXOD2, "DATAFIELD",
; 7191 :                            zPOS_FIRST, zREPOS_NEXT );

	push	3
	push	1
	push	OFFSET FLAT:??_C@_09JEIA@DATAFIELD?$AA@	; `string'
	mov	eax, DWORD PTR _vXOD2$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_09JEIA@DATAFIELD?$AA@	; `string'
	mov	ecx, DWORD PTR _vXOD2$[ebp]
	push	ecx
	call	_MoveSubobject@24
$L31792:

; 7193 :       }

	jmp	$L31788
$L31789:

; 7194 :    }

	jmp	$L31767
$L31768:

; 7195 : 
; 7196 :    DropHierarchicalCursor( vTZZOXODO );

	mov	edx, DWORD PTR _vTZZOXODO$[ebp]
	push	edx
	call	_DropHierarchicalCursor@4

; 7197 :    DropView( vXOD );

	mov	eax, DWORD PTR _vXOD$[ebp]
	push	eax
	call	_DropView@4

; 7198 :    DropView( vXOD2 );

	mov	ecx, DWORD PTR _vXOD2$[ebp]
	push	ecx
	call	_DropView@4

; 7199 :    DropView( vTZZOXODO );

	mov	edx, DWORD PTR _vTZZOXODO$[ebp]
	push	edx
	call	_DropView@4

; 7200 : 
; 7201 :    return( 0 );

	xor	ax, ax
$L31758:

; 7202 : }

	mov	esp, ebp
	pop	ebp
	ret	4
_fnSortDataFields@4 ENDP
_TEXT	ENDS
PUBLIC	_fnSetEntityInformation@12
PUBLIC	??_C@_0BB@NHDL@LOD_EntityParent?$AA@		; `string'
PUBLIC	??_C@_0BI@FMLJ@TE_DBMS_SourceForEntity?$AA@	; `string'
PUBLIC	??_C@_0BD@GNEF@SQL_JoinWithParent?$AA@		; `string'
PUBLIC	??_C@_0L@KKLH@POD_Entity?$AA@			; `string'
PUBLIC	??_C@_0O@FFFI@ER_RelLinkRec?$AA@		; `string'
PUBLIC	??_C@_07NHPD@CardMax?$AA@			; `string'
PUBLIC	??_C@_09PPA@ERENT_TOK?$AA@			; `string'
PUBLIC	??_C@_09DPNM@ERREL_TOK?$AA@			; `string'
PUBLIC	??_C@_0BA@DPMI@LOD_EntityChild?$AA@		; `string'
PUBLIC	??_C@_0N@NFHJ@ER_EntityRec?$AA@			; `string'
EXTRN	_CompareAttributeToInteger@16:NEAR
EXTRN	_ResetViewFromSubobject@4:NEAR
EXTRN	_SetCursorFirstEntityByInteger@20:NEAR
;	COMDAT ??_C@_0BB@NHDL@LOD_EntityParent?$AA@
; File C:\10C\a\oe\KZHSQLXB.C
_DATA	SEGMENT
??_C@_0BB@NHDL@LOD_EntityParent?$AA@ DB 'LOD_EntityParent', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BI@FMLJ@TE_DBMS_SourceForEntity?$AA@
_DATA	SEGMENT
??_C@_0BI@FMLJ@TE_DBMS_SourceForEntity?$AA@ DB 'TE_DBMS_SourceForEntity', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@GNEF@SQL_JoinWithParent?$AA@
_DATA	SEGMENT
??_C@_0BD@GNEF@SQL_JoinWithParent?$AA@ DB 'SQL_JoinWithParent', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@KKLH@POD_Entity?$AA@
_DATA	SEGMENT
??_C@_0L@KKLH@POD_Entity?$AA@ DB 'POD_Entity', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@FFFI@ER_RelLinkRec?$AA@
_DATA	SEGMENT
??_C@_0O@FFFI@ER_RelLinkRec?$AA@ DB 'ER_RelLinkRec', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_07NHPD@CardMax?$AA@
_DATA	SEGMENT
??_C@_07NHPD@CardMax?$AA@ DB 'CardMax', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09PPA@ERENT_TOK?$AA@
_DATA	SEGMENT
??_C@_09PPA@ERENT_TOK?$AA@ DB 'ERENT_TOK', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_09DPNM@ERREL_TOK?$AA@
_DATA	SEGMENT
??_C@_09DPNM@ERREL_TOK?$AA@ DB 'ERREL_TOK', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@DPMI@LOD_EntityChild?$AA@
_DATA	SEGMENT
??_C@_0BA@DPMI@LOD_EntityChild?$AA@ DB 'LOD_EntityChild', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@NFHJ@ER_EntityRec?$AA@
_DATA	SEGMENT
??_C@_0N@NFHJ@ER_EntityRec?$AA@ DB 'ER_EntityRec', 00H	; `string'
_DATA	ENDS
_TEXT	SEGMENT
_vTZZOLODO$ = 8
_vTZZOXODO$ = 12
_lDBMS_ZKey$ = 16
_nRC$ = -4
_lER_EntTok$31817 = -8
_lER_RelTok$31818 = -12
_fnSetEntityInformation@12 PROC NEAR

; 7207 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 7208 :    zSHORT nRC;
; 7209 : 
; 7210 :    // First, make sure we've got an entity with DB information.
; 7211 :    if ( CheckExistenceOfEntity( vTZZOXODO, "DATARECORD" ) < zCURSOR_SET )

	push	OFFSET FLAT:??_C@_0L@PPLE@DATARECORD?$AA@ ; `string'
	mov	eax, DWORD PTR _vTZZOXODO$[ebp]
	push	eax
	call	_CheckExistenceOfEntity@8
	movsx	ecx, ax
	test	ecx, ecx
	jge	SHORT $L31803

; 7212 :       return;

	jmp	$L31816
$L31803:

; 7213 : 
; 7214 :    // Find out if a POD_Entity exists for the DBMS.
; 7215 :    if ( SetCursorFirstEntityByInteger( vTZZOLODO, "TE_DBMS_SourceForEntity",
; 7216 :                                        "ZKey", lDBMS_ZKey,
; 7217 :                                        "LOD_EntityParent" ) == zCURSOR_SET )

	push	OFFSET FLAT:??_C@_0BB@NHDL@LOD_EntityParent?$AA@ ; `string'
	mov	edx, DWORD PTR _lDBMS_ZKey$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_04BBDM@ZKey?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0BI@FMLJ@TE_DBMS_SourceForEntity?$AA@ ; `string'
	mov	eax, DWORD PTR _vTZZOLODO$[ebp]
	push	eax
	call	_SetCursorFirstEntityByInteger@20
	movsx	ecx, ax
	test	ecx, ecx
	jne	SHORT $L31804

; 7219 :       // Got a POD_Entity.  Check the JOIN flag.
; 7220 :       if ( CompareAttributeToString( vTZZOLODO, "POD_Entity",
; 7221 :                                      "SQL_JoinWithParent", "Y" ) == 0 )

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0BD@GNEF@SQL_JoinWithParent?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0L@KKLH@POD_Entity?$AA@ ; `string'
	mov	edx, DWORD PTR _vTZZOLODO$[ebp]
	push	edx
	call	_CompareAttributeToString@16
	movsx	eax, ax
	test	eax, eax
	jne	SHORT $L31807

; 7223 :          SetAttributeFromString( vTZZOXODO, "DATARECORD", "JOIN", "Y" );

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_04JIJO@JOIN?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@PPLE@DATARECORD?$AA@ ; `string'
	mov	ecx, DWORD PTR _vTZZOXODO$[ebp]
	push	ecx
	call	_SetAttributeFromString@16
$L31807:

; 7226 :    else

	jmp	SHORT $L31811
$L31804:

; 7227 :    if ( CheckExistenceOfEntity( vTZZOLODO, "ER_RelLinkRec" ) == zCURSOR_SET &&
; 7228 :         CompareAttributeToInteger( vTZZOLODO, "ER_RelLinkRec",
; 7229 :                                    "CardMax", 1 ) == 0 )

	push	OFFSET FLAT:??_C@_0O@FFFI@ER_RelLinkRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vTZZOLODO$[ebp]
	push	edx
	call	_CheckExistenceOfEntity@8
	movsx	eax, ax
	test	eax, eax
	jne	SHORT $L31811
	push	1
	push	OFFSET FLAT:??_C@_07NHPD@CardMax?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0O@FFFI@ER_RelLinkRec?$AA@ ; `string'
	mov	ecx, DWORD PTR _vTZZOLODO$[ebp]
	push	ecx
	call	_CompareAttributeToInteger@16
	movsx	edx, ax
	test	edx, edx
	jne	SHORT $L31811

; 7231 :       // Join is defaulted to Y if the entity has a x-to-1 relationship
; 7232 :       // with it's parent.
; 7233 :       SetAttributeFromString( vTZZOXODO, "DATARECORD", "JOIN", "Y" );

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_04JIJO@JOIN?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0L@PPLE@DATARECORD?$AA@ ; `string'
	mov	eax, DWORD PTR _vTZZOXODO$[ebp]
	push	eax
	call	_SetAttributeFromString@16
$L31811:

; 7235 : 
; 7236 :    // Now do the same thing for any children.
; 7237 :    for ( nRC = SetCursorFirstEntity( vTZZOXODO, "CHILDENTITY", 0 );
; 7238 :          nRC >= zCURSOR_SET;
; 7239 :          nRC = SetCursorNextEntity( vTZZOXODO, "CHILDENTITY", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0M@PNOD@CHILDENTITY?$AA@ ; `string'
	mov	ecx, DWORD PTR _vTZZOXODO$[ebp]
	push	ecx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31814
$L31815:
	push	0
	push	OFFSET FLAT:??_C@_0M@PNOD@CHILDENTITY?$AA@ ; `string'
	mov	edx, DWORD PTR _vTZZOXODO$[ebp]
	push	edx
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31814:
	movsx	eax, WORD PTR _nRC$[ebp]
	test	eax, eax
	jl	$L31816

; 7241 :       zLONG lER_EntTok;
; 7242 :       zLONG lER_RelTok;
; 7243 : 
; 7244 :       GetIntegerFromAttribute( &lER_EntTok, vTZZOXODO, "CHILDENTITY",
; 7245 :                                "ERENT_TOK" );

	push	OFFSET FLAT:??_C@_09PPA@ERENT_TOK?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0M@PNOD@CHILDENTITY?$AA@ ; `string'
	mov	ecx, DWORD PTR _vTZZOXODO$[ebp]
	push	ecx
	lea	edx, DWORD PTR _lER_EntTok$31817[ebp]
	push	edx
	call	_GetIntegerFromAttribute@16

; 7246 :       GetIntegerFromAttribute( &lER_RelTok, vTZZOXODO, "CHILDENTITY",
; 7247 :                                "ERREL_TOK" );

	push	OFFSET FLAT:??_C@_09DPNM@ERREL_TOK?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0M@PNOD@CHILDENTITY?$AA@ ; `string'
	mov	eax, DWORD PTR _vTZZOXODO$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lER_RelTok$31818[ebp]
	push	ecx
	call	_GetIntegerFromAttribute@16

; 7248 : 
; 7249 :       // Find a matching entity in the LOD.
; 7250 :       for ( nRC = SetCursorFirstEntity( vTZZOLODO, "LOD_EntityChild", 0 );
; 7251 :             nRC >= zCURSOR_SET;
; 7252 :             nRC = SetCursorNextEntity( vTZZOLODO, "LOD_EntityChild", 0 ) )

	push	0
	push	OFFSET FLAT:??_C@_0BA@DPMI@LOD_EntityChild?$AA@ ; `string'
	mov	edx, DWORD PTR _vTZZOLODO$[ebp]
	push	edx
	call	_SetCursorFirstEntity@12
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $L31821
$L31822:
	push	0
	push	OFFSET FLAT:??_C@_0BA@DPMI@LOD_EntityChild?$AA@ ; `string'
	mov	eax, DWORD PTR _vTZZOLODO$[ebp]
	push	eax
	call	_SetCursorNextEntity@12
	mov	WORD PTR _nRC$[ebp], ax
$L31821:
	movsx	ecx, WORD PTR _nRC$[ebp]
	test	ecx, ecx
	jl	$L31823

; 7254 :          SetViewToSubobject( vTZZOLODO, "LOD_EntityChild" );

	push	OFFSET FLAT:??_C@_0BA@DPMI@LOD_EntityChild?$AA@ ; `string'
	mov	edx, DWORD PTR _vTZZOLODO$[ebp]
	push	edx
	call	_SetViewToSubobject@8

; 7255 : 
; 7256 :          if ( CheckExistenceOfEntity( vTZZOLODO,
; 7257 :                                       "ER_EntityRec" ) == zCURSOR_SET &&
; 7258 :               CompareAttributeToInteger( vTZZOLODO, "ER_EntityRec", "ZKey",
; 7259 :                                          lER_EntTok ) == 0 &&
; 7260 :               CheckExistenceOfEntity( vTZZOLODO,
; 7261 :                                       "ER_RelLinkRec" ) == zCURSOR_SET &&
; 7262 :               CompareAttributeToInteger( vTZZOLODO, "ER_RelLinkRec", "ZKey",
; 7263 :                                          lER_EntTok ) == 0 )

	push	OFFSET FLAT:??_C@_0N@NFHJ@ER_EntityRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vTZZOLODO$[ebp]
	push	eax
	call	_CheckExistenceOfEntity@8
	movsx	ecx, ax
	test	ecx, ecx
	jne	SHORT $L31825
	mov	edx, DWORD PTR _lER_EntTok$31817[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_04BBDM@ZKey?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0N@NFHJ@ER_EntityRec?$AA@ ; `string'
	mov	eax, DWORD PTR _vTZZOLODO$[ebp]
	push	eax
	call	_CompareAttributeToInteger@16
	movsx	ecx, ax
	test	ecx, ecx
	jne	SHORT $L31825
	push	OFFSET FLAT:??_C@_0O@FFFI@ER_RelLinkRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vTZZOLODO$[ebp]
	push	edx
	call	_CheckExistenceOfEntity@8
	movsx	eax, ax
	test	eax, eax
	jne	SHORT $L31825
	mov	ecx, DWORD PTR _lER_EntTok$31817[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_04BBDM@ZKey?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0O@FFFI@ER_RelLinkRec?$AA@ ; `string'
	mov	edx, DWORD PTR _vTZZOLODO$[ebp]
	push	edx
	call	_CompareAttributeToInteger@16
	movsx	eax, ax
	test	eax, eax
	jne	SHORT $L31825

; 7265 :             // We found the child entity that matches the CHILDENTITY
; 7266 :             // in the XOD.  Stop 'for' loop.
; 7267 :             break;

	jmp	SHORT $L31823
$L31825:

; 7269 : 
; 7270 :          // That wasn't the right child so reset the subobject.
; 7271 :          ResetViewFromSubobject( vTZZOLODO );

	mov	ecx, DWORD PTR _vTZZOLODO$[ebp]
	push	ecx
	call	_ResetViewFromSubobject@4

; 7272 :       }

	jmp	$L31822
$L31823:

; 7273 : 
; 7274 :       // Once we get here, "LOD_EntityParent" should match "CHILDENTITY".
; 7275 :       // Move "CHILDENTITY" up and call ourselves recursively.
; 7276 :       SetViewToSubobject( vTZZOXODO, "CHILDENTITY" );

	push	OFFSET FLAT:??_C@_0M@PNOD@CHILDENTITY?$AA@ ; `string'
	mov	edx, DWORD PTR _vTZZOXODO$[ebp]
	push	edx
	call	_SetViewToSubobject@8

; 7277 :       fnSetEntityInformation( vTZZOLODO, vTZZOXODO, lDBMS_ZKey );

	mov	eax, DWORD PTR _lDBMS_ZKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vTZZOXODO$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vTZZOLODO$[ebp]
	push	edx
	call	_fnSetEntityInformation@12

; 7278 : 
; 7279 :       // Now reset the cursors.
; 7280 :       ResetViewFromSubobject( vTZZOLODO );

	mov	eax, DWORD PTR _vTZZOLODO$[ebp]
	push	eax
	call	_ResetViewFromSubobject@4

; 7281 :       ResetViewFromSubobject( vTZZOXODO );

	mov	ecx, DWORD PTR _vTZZOXODO$[ebp]
	push	ecx
	call	_ResetViewFromSubobject@4

; 7282 :    }

	jmp	$L31815
$L31816:

; 7283 : 
; 7284 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_fnSetEntityInformation@12 ENDP
_TEXT	ENDS
PUBLIC	_PostXOD_BuildHook@20
PUBLIC	??_C@_08DKCM@TZDBHODO?$AA@			; `string'
PUBLIC	??_C@_0BD@KPGG@TimestampPrecision?$AA@		; `string'
PUBLIC	??_C@_06PIJH@OBJECT?$AA@			; `string'
EXTRN	_SetAttributeFromBlob@20:NEAR
EXTRN	_ResetView@4:NEAR
EXTRN	_memset:NEAR
;	COMDAT ??_C@_08DKCM@TZDBHODO?$AA@
; File C:\10C\a\oe\KZHSQLXB.C
_DATA	SEGMENT
??_C@_08DKCM@TZDBHODO?$AA@ DB 'TZDBHODO', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BD@KPGG@TimestampPrecision?$AA@
_DATA	SEGMENT
??_C@_0BD@KPGG@TimestampPrecision?$AA@ DB 'TimestampPrecision', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_06PIJH@OBJECT?$AA@
_DATA	SEGMENT
??_C@_06PIJH@OBJECT?$AA@ DB 'OBJECT', 00H		; `string'
_DATA	ENDS
_TEXT	SEGMENT
_vTZTEDBLO$ = 8
_vTZZOXODO$ = 12
_vTZZOLODO$ = 16
_vTZTENVRO_REF$ = 24
_szObjectName$ = -40
_vOI$ = -4
_lDBMS_ZKey$31851 = -44
_sData$31852 = -148
_PostXOD_BuildHook@20 PROC NEAR

; 7298 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H

; 7299 :    zCHAR szObjectName[ zZEIDON_NAME_LTH + 1 ];
; 7300 :    zVIEW vOI;
; 7301 : 
; 7302 :    // See if there is a blob stored in DBH_Data for the TE.
; 7303 :    SetOI_FromBlob( &vOI, szObjectName, vTZZOXODO, vTZTENVRO_REF,
; 7304 :                    "TE_DBMS_Source", "DBH_Data", zMULTIPLE );

	push	256					; 00000100H
	push	OFFSET FLAT:??_C@_08DKGC@DBH_Data?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	eax, DWORD PTR _vTZTENVRO_REF$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vTZZOXODO$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szObjectName$[ebp]
	push	edx
	lea	eax, DWORD PTR _vOI$[ebp]
	push	eax
	call	_SetOI_FromBlob@28

; 7305 : 
; 7306 :    if ( vOI == 0 )

	cmp	DWORD PTR _vOI$[ebp], 0
	jne	SHORT $L31841

; 7307 :        // No blob in the TE.  Get it from the DB list object.
; 7308 :       SetOI_FromBlob( &vOI, szObjectName, vTZZOXODO, vTZTEDBLO,
; 7309 :                       "TE_DBMS_Source", "DBH_Data", zMULTIPLE );

	push	256					; 00000100H
	push	OFFSET FLAT:??_C@_08DKGC@DBH_Data?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	ecx, DWORD PTR _vTZTEDBLO$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vTZZOXODO$[ebp]
	push	edx
	lea	eax, DWORD PTR _szObjectName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vOI$[ebp]
	push	ecx
	call	_SetOI_FromBlob@28
$L31841:

; 7310 : 
; 7311 :    if ( vOI == 0 )

	cmp	DWORD PTR _vOI$[ebp], 0
	jne	SHORT $L31842

; 7313 :       return( 0 );

	xor	ax, ax
	jmp	$L31838
$L31842:

; 7328 : 
; 7329 :    // Check for ODBC object.
; 7330 :    if ( zstrcmp( szObjectName, "TZDBHODO" ) == 0 )

	movsx	edx, BYTE PTR _szObjectName$[ebp]
	movsx	eax, BYTE PTR ??_C@_08DKCM@TZDBHODO?$AA@
	cmp	edx, eax
	jne	SHORT $L32387
	push	OFFSET FLAT:??_C@_08DKCM@TZDBHODO?$AA@	; `string'
	lea	ecx, DWORD PTR _szObjectName$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	mov	DWORD PTR -152+[ebp], eax
	jmp	SHORT $L32388
$L32387:
	movsx	edx, BYTE PTR _szObjectName$[ebp]
	movsx	eax, BYTE PTR ??_C@_08DKCM@TZDBHODO?$AA@
	sub	edx, eax
	xor	ecx, ecx
	test	edx, edx
	setle	cl
	dec	ecx
	and	ecx, 2
	add	ecx, -1
	mov	DWORD PTR -152+[ebp], ecx
$L32388:
	cmp	DWORD PTR -152+[ebp], 0
	jne	$L31849

; 7332 :       zLONG                 lDBMS_ZKey;
; 7333 :       ODBC_ObjectDataRecord sData;
; 7334 : 
; 7335 :       // For ODBC databases we need to sort the DataFields so that the VarChar
; 7336 :       // fields come last in each table.  We also need to put keys first.
; 7337 :       fnSortDataFields( vTZZOXODO );

	mov	edx, DWORD PTR _vTZZOXODO$[ebp]
	push	edx
	call	_fnSortDataFields@4

; 7338 : 
; 7339 :       // Set-up ODBC-specific information.
; 7340 :       zmemset( &sData, 0, sizeof( sData ) );

	push	104					; 00000068H
	push	0
	lea	eax, DWORD PTR _sData$31852[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 7341 :       GetIntegerFromAttribute( &sData.nTimestampPrecision,
; 7342 :                                vOI, "ODBC", "TimestampPrecision" );

	push	OFFSET FLAT:??_C@_0BD@KPGG@TimestampPrecision?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_04JENC@ODBC?$AA@	; `string'
	mov	ecx, DWORD PTR _vOI$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sData$31852[ebp]
	push	edx
	call	_GetIntegerFromAttribute@16

; 7343 :       sData.bStoreTimestampAsString =
; 7344 :             ( CompareAttributeToString( vOI, "ODBC",
; 7345 :                                         "TimestampAsString", "Y" ) == 0 );

	push	OFFSET FLAT:??_C@_01PCJP@Y?$AA@		; `string'
	push	OFFSET FLAT:??_C@_0BC@KJKI@TimestampAsString?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_04JENC@ODBC?$AA@	; `string'
	mov	eax, DWORD PTR _vOI$[ebp]
	push	eax
	call	_CompareAttributeToString@16
	movsx	ecx, ax
	neg	ecx
	sbb	ecx, ecx
	inc	ecx
	mov	BYTE PTR _sData$31852[ebp+4], cl

; 7346 : 
; 7347 :       SetAttributeFromBlob( vTZZOXODO, "OBJECT", "DBH_Data", (zPVOID) &sData,
; 7348 :                             sizeof( sData ) );

	push	104					; 00000068H
	lea	edx, DWORD PTR _sData$31852[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_08DKGC@DBH_Data?$AA@	; `string'
	push	OFFSET FLAT:??_C@_06PIJH@OBJECT?$AA@	; `string'
	mov	eax, DWORD PTR _vTZZOXODO$[ebp]
	push	eax
	call	_SetAttributeFromBlob@20

; 7349 : 
; 7350 :       // Go through the LOD and set dbh-specific information for each entity.
; 7351 :       ResetView( vTZZOLODO );

	mov	ecx, DWORD PTR _vTZZOLODO$[ebp]
	push	ecx
	call	_ResetView@4

; 7352 :       ResetView( vTZZOXODO );

	mov	edx, DWORD PTR _vTZZOXODO$[ebp]
	push	edx
	call	_ResetView@4

; 7353 : 
; 7354 :       // Set the cursor to the first non-hidden entity.
; 7355 :       SetCursorFirstEntity( vTZZOXODO, "OBJECT", 0 );

	push	0
	push	OFFSET FLAT:??_C@_06PIJH@OBJECT?$AA@	; `string'
	mov	eax, DWORD PTR _vTZZOXODO$[ebp]
	push	eax
	call	_SetCursorFirstEntity@12

; 7356 : 
; 7357 :       GetIntegerFromAttribute( &lDBMS_ZKey, vTZTENVRO_REF, "TE_DBMS_Source",
; 7358 :                                "ZKey" );

	push	OFFSET FLAT:??_C@_04BBDM@ZKey?$AA@	; `string'
	push	OFFSET FLAT:??_C@_0P@BCDD@TE_DBMS_Source?$AA@ ; `string'
	mov	ecx, DWORD PTR _vTZTENVRO_REF$[ebp]
	push	ecx
	lea	edx, DWORD PTR _lDBMS_ZKey$31851[ebp]
	push	edx
	call	_GetIntegerFromAttribute@16

; 7359 :       fnSetEntityInformation( vTZZOLODO, vTZZOXODO, lDBMS_ZKey );

	mov	eax, DWORD PTR _lDBMS_ZKey$31851[ebp]
	push	eax
	mov	ecx, DWORD PTR _vTZZOXODO$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vTZZOLODO$[ebp]
	push	edx
	call	_fnSetEntityInformation@12
$L31849:

; 7361 : 
; 7362 :    DropView( vOI );

	mov	eax, DWORD PTR _vOI$[ebp]
	push	eax
	call	_DropView@4

; 7363 : 
; 7364 :    return( 0 );

	xor	ax, ax
$L31838:

; 7365 : 
; 7366 : } // PostXOD_BuildHook

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_PostXOD_BuildHook@20 ENDP
_TEXT	ENDS
EXTRN	__imp__strchr:NEAR
_TEXT	SEGMENT
_pch$ = 8
_pchKlammer$ = -4
_RemoveBrackets PROC NEAR

; 7374 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 7375 :    zPCHAR pchKlammer;
; 7376 : 
; 7377 :    pchKlammer = strchr( pch, '[' );

	push	91					; 0000005bH
	mov	eax, DWORD PTR _pch$[ebp]
	push	eax
	call	DWORD PTR __imp__strchr
	add	esp, 8
	mov	DWORD PTR _pchKlammer$[ebp], eax

; 7378 :    if ( pchKlammer )

	cmp	DWORD PTR _pchKlammer$[ebp], 0
	je	SHORT $L31860
$L31862:

; 7380 :       // Klammern [] wegnehmen.
; 7381 :       while ( *(pchKlammer + 1) != ']' && *(pchKlammer + 1) )

	mov	ecx, DWORD PTR _pchKlammer$[ebp]
	movsx	edx, BYTE PTR [ecx+1]
	cmp	edx, 93					; 0000005dH
	je	SHORT $L31863
	mov	eax, DWORD PTR _pchKlammer$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $L31863

; 7383 :          *pchKlammer = *(pchKlammer + 1);

	mov	edx, DWORD PTR _pchKlammer$[ebp]
	mov	eax, DWORD PTR _pchKlammer$[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR [edx], cl

; 7384 :          pchKlammer++;

	mov	edx, DWORD PTR _pchKlammer$[ebp]
	add	edx, 1
	mov	DWORD PTR _pchKlammer$[ebp], edx

; 7385 :       }

	jmp	SHORT $L31862
$L31863:

; 7386 : 
; 7387 :       *pchKlammer = 0;

	mov	eax, DWORD PTR _pchKlammer$[ebp]
	mov	BYTE PTR [eax], 0
$L31860:

; 7389 : 
; 7390 : } // RemoveBrackets

	mov	esp, ebp
	pop	ebp
	ret	0
_RemoveBrackets ENDP
_TEXT	ENDS
END
