
/*************************************************************************************************
**    
**    OPERATION: GlobalOperGrpMerge
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
GlobalOperGrpMerge( VIEW        NewOperGrp BASED ON LOD TZOGSRCO,
                    STRING (50) OperGroupMetaName,
                    VIEW        SourceLPLR BASED ON LOD TZCMLPLO,
                    VIEW        vSubtask )

   VIEW OldOperGrp  BASED ON LOD TZOGSRCO
   VIEW CurrentLPLR BASED ON LOD TZCMLPLO
   VIEW TZZOLODO    BASED ON LOD TZZOLODO
   STRING ( 500 ) szSourceFileName  
   STRING ( 500 ) szVML_SourceFileName    
   STRING ( 500 ) szVML_TargetFileName  
   STRING ( 50 )  szSourceName
   STRING ( 50 )  szOperationName

   // Activate existing source meta OldOperGroup
   szSourceFileName = SourceLPLR.LPLR.MetaSrcDir + "\" + OperGroupMetaName + ".POG"

   // zIGNORE_ATTRIB_ERRORS=8192
   ActivateOI_FromFile( OldOperGrp, "TZOGSRCO", SourceLPLR,
                        szSourceFileName, zSINGLE + 8192 )
   NAME VIEW OldOperGrp "OldOperGrp"
   GET VIEW CurrentLPLR NAMED "TaskLPLR"
   szSourceName = OperGroupMetaName + "." + OldOperGrp.GlobalOperationGroup.Extension
   szVML_SourceFileName = SourceLPLR.LPLR.PgmSrcDir + "\" + szSourceName
   szVML_TargetFileName = CurrentLPLR.LPLR.PgmSrcDir + "\" + szSourceName

   IF NewOperGrp.GlobalOperationGroup DOES NOT EXIST

      // The Global Operation Group does not exist in the target, so simply copy everything over.

      CreateMetaEntity( vSubtask, NewOperGrp, "GlobalOperationGroup", zPOS_AFTER )
      SetMatchingAttributesByName( NewOperGrp, "GlobalOperationGroup", OldOperGrp, "GlobalOperationGroup", zSET_NULL )

      // Copy over the source file to the new LPLR directory, if there is a source file.
      // We will assume a source file exists if the SourceFile.Extension is not null.  If there
      // is actually no source file, the CopyFile does no harm.
      IF OldOperGrp.GlobalOperationGroup.Extension != ""
         SysCopyFile( vSubtask, szVML_SourceFileName, szVML_TargetFileName, TRUE )
      END

      FOR EACH OldOperGrp.Operation

         CreateMetaEntity( vSubtask, NewOperGrp, "Operation", zPOS_AFTER )
         SetMatchingAttributesByName ( NewOperGrp, "Operation", OldOperGrp,
                                       "Operation", zSET_NULL )

         FOR EACH OldOperGrp.Parameter
            // Make sure the ShortDesc in the Parameter is not null.
            IF OldOperGrp.Parameter.ShortDesc = ""
               OldOperGrp.Parameter.ShortDesc = "Parm"
            END
            CreateMetaEntity( vSubtask, NewOperGrp, "Parameter", zPOS_AFTER )
            SetMatchingAttributesByName( NewOperGrp, "Parameter", OldOperGrp,
                                         "Parameter", zSET_NULL )
         END

      END

   ELSE

      // The Global Operation Group exists in the target, so merge in any new Operations.
      // We will force over any Operations (both prototype and code) for any Operations not flagged as modified in target LPLR.
      FOR EACH OldOperGrp.Operation
         SET CURSOR FIRST NewOperGrp.Operation WHERE NewOperGrp.Operation.Name = OldOperGrp.Operation.Name
         IF RESULT < zCURSOR_SET
            CreateMetaEntity( vSubtask, NewOperGrp, "Operation", zPOS_AFTER )
            SetMatchingAttributesByName ( NewOperGrp, "Operation", OldOperGrp, "Operation", zSET_NULL )
         END

         // If the operation is new or modifiable, set new parameters and operation code.
         IF NewOperGrp.Operation.DoNotMergeFlag = ""
            FOR EACH NewOperGrp.Parameter
               DELETE ENTITY NewOperGrp.Parameter NONE
            END
            FOR EACH OldOperGrp.Parameter
               // Make sure the ShortDesc in the Parameter is not null.
               IF OldOperGrp.Parameter.ShortDesc = ""
                  OldOperGrp.Parameter.ShortDesc = "Parm"
               END
               CreateMetaEntity( vSubtask, NewOperGrp, "Parameter", zPOS_AFTER )
               SetMatchingAttributesByName( NewOperGrp, "Parameter", OldOperGrp, "Parameter", zSET_NULL )
            END

            // DonC change on 7/11/2024 because we currently only copy VML source files.
            // Copy Operation Code if the source is VML.
            IF NewOperGrp.GlobalOperationGroup.LanguageType = "V"
               szOperationName = NewOperGrp.Operation.Name 
               // We will temporarily use the TZZOLODO LOD definition so that we can reus the CopyNewOperationVML
               // operation tied to that LOD.
               TZZOLODO = NewOperGrp
               CopyNewOperationVML( TZZOLODO, szOperationName, szVML_SourceFileName, szVML_TargetFileName )
            END
         END
      END
   END

   DropObjectInstance( OldOperGrp )
   CommitMetaOI( vSubtask, NewOperGrp, 14 )   // 14 is zSOURCE_GOPGRP_META

END

/*************************************************************************************************
**    
**    OPERATION: GenerateXOG
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
GenerateXOG( VIEW OperationGroup BASED ON LOD TZOGSRCO )

   VIEW OperationXOG    BASED ON LOD TZZOXOGO
   VIEW OperationGroupT BASED ON LOD TZOGSRCO
   VIEW CurrentLPLR     BASED ON LOD TZCMLPLO
   STRING ( 513 ) XOG_FileName 
   STRING ( 513 ) POG_FileName
   STRING ( 200 ) szMsg
   INTEGER        lFile
   SHORT          nRC                 
   
   // Build the executable Global Object executable for all Operations in the LPLR.
   
   // Activate or initialize the XOG executable object.
   GET VIEW CurrentLPLR NAMED "TaskLPLR"
   XOG_FileName = CurrentLPLR.LPLR.ExecDir + "\" + CurrentLPLR.LPLR.Name + ".XOG"
   lFile = SysOpenFile( OperationGroup, XOG_FileName, COREFILE_READ )
   IF lFile < 0
      // Executable has not yet been generated.
      ACTIVATE OperationXOG EMPTY 
      CREATE ENTITY OperationXOG.TZZOXOGO 
      OperationXOG.TZZOXOGO.NAME = CurrentLPLR.LPLR.Name
   ELSE
      SysCloseFile( OperationGroup, lFile, 0 )
      // Get current executable File.
      ActivateOI_FromFile( OperationXOG, "TZZOXOGO", OperationGroup, XOG_FileName, zSINGLE )
      
      // Delete current source file entries.
      FOR EACH OperationXOG.GLOBALOPERATIONSOURCEFILE 
         DELETE ENTITY OperationXOG.GLOBALOPERATIONSOURCEFILE NONE 
      END
   END
   NAME VIEW OperationXOG "OperationXOG"
   
   // Build the executable components from each POG Operation.
   SET CURSOR FIRST CurrentLPLR.W_MetaType WHERE CurrentLPLR.W_MetaType.Type = 14   // 14 is Global Operation Group 
   FOR EACH CurrentLPLR.W_MetaDef 
      POG_FileName = CurrentLPLR.LPLR.MetaSrcDir + "\" + CurrentLPLR.W_MetaDef.Name + ".POG"
      nRC = ActivateOI_FromFile( OperationGroupT, "TZOGSRCO", OperationGroup, POG_FileName, zSINGLE + 8192 )
      IF nRC < 0
         szMsg = "Can't open POG file, " + POG_FileName
         IssueError( OperationGroup,0,0, szMsg )
         RETURN -1
      END
      // Create Source file entry.
      CREATE ENTITY OperationXOG.GLOBALOPERATIONSOURCEFILE 
      OperationXOG.GLOBALOPERATIONSOURCEFILE.NAME         = OperationGroupT.GlobalOperationGroup.Name 
      OperationXOG.GLOBALOPERATIONSOURCEFILE.LANGUAGETYPE = OperationGroupT.GlobalOperationGroup.LanguageType 
      
      // Create each Operation entry.
      FOR EACH OperationGroupT.Operation 
         CREATE ENTITY OperationXOG.OPERATION 
         OperationXOG.OPERATION.NAME = OperationGroupT.Operation.Name 
         OperationXOG.OPERATION.TYPE = OperationGroupT.Operation.Type 
         
         FOR EACH OperationGroupT.Parameter 
            CREATE ENTITY OperationXOG.PARAMETER 
            OperationXOG.PARAMETER.NAME     = OperationGroupT.Parameter.ShortDesc 
            OperationXOG.PARAMETER.DATATYPE = OperationGroupT.Parameter.DataType 
         END 
      END
   END
   CommitOI_ToFile( OperationXOG, XOG_FileName, zASCII )
   DropObjectInstance( OperationXOG )

END

/*************************************************************************************************
**    
**    OPERATION: GlobalOperGrpMerge
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
GlobalOperGrpMigrate( VIEW        NewOperGrp BASED ON LOD TZOGSRCO,
                      STRING (50) OperGroupMetaName,
                      VIEW        SourceLPLR BASED ON LOD TZCMLPLO,
                      VIEW        vSubtask )

   VIEW OldOperGrp  BASED ON LOD TZOGSRCO
   VIEW CurrentLPLR BASED ON LOD TZCMLPLO
   STRING ( 500 ) szSourceFileName  
   STRING ( 500 ) szVML_SourceFileName    
   STRING ( 500 ) szVML_TargetFileName  
   STRING ( 50 )  szSourceName
   STRING ( 256 ) szVML_Statement
   INTEGER nFileIn
   INTEGER nFileOut
   SHORT   nRC

   // Activate existing source meta OldOperGroup
   szSourceFileName = SourceLPLR.LPLR.MetaSrcDir + "\" + OperGroupMetaName + ".POG"
   nRC = ActivateOI_FromFile( OldOperGrp, "TZOGSRCO", SourceLPLR,
                              szSourceFileName, zSINGLE + 8192 )
   NAME VIEW OldOperGrp "OldOperGrp"
   GET VIEW CurrentLPLR NAMED "TaskLPLR"
   szSourceName = OperGroupMetaName + "." + OldOperGrp.GlobalOperationGroup.Extension
   szVML_SourceFileName = SourceLPLR.LPLR.PgmSrcDir + "\" + szSourceName
   szVML_TargetFileName = CurrentLPLR.LPLR.PgmSrcDir + "\" + szSourceName

   // It is assumed here the the Operation Group does NOT exist in the target LPLR, so simply copy everything over.

   CreateMetaEntity( vSubtask, NewOperGrp, "GlobalOperationGroup", zPOS_AFTER )
   SetMatchingAttributesByName( NewOperGrp, "GlobalOperationGroup", OldOperGrp, "GlobalOperationGroup", zSET_NULL )

   FOR EACH OldOperGrp.Operation

      CreateMetaEntity( vSubtask, NewOperGrp, "Operation", zPOS_AFTER )
      SetMatchingAttributesByName ( NewOperGrp, "Operation", OldOperGrp,
                                    "Operation", zSET_NULL )

      FOR EACH OldOperGrp.Parameter
         // Make sure the ShortDesc in the Parameter is not null.
         IF OldOperGrp.Parameter.ShortDesc = ""
            OldOperGrp.Parameter.ShortDesc = "Parm"
         END
         CreateMetaEntity( vSubtask, NewOperGrp, "Parameter", zPOS_AFTER )
         SetMatchingAttributesByName( NewOperGrp, "Parameter", OldOperGrp,
                                      "Parameter", zSET_NULL )
      END

   END
   CommitMetaOI( vSubtask, NewOperGrp, 14 )  // 14 is zSOURCE_GOPGRP_META
   
   // Copy over the source file to the new LPLR directory, if there is a VML source file.
   IF OldOperGrp.GlobalOperationGroup.Extension = "VML"
      nFileIn  = SysOpenFile( vSubtask, szVML_SourceFileName, COREFILE_READ )
      nFileOut = SysOpenFile( vSubtask, szVML_TargetFileName, COREFILE_WRITE )
      nRC = zSysReadLine( vSubtask, szVML_Statement, nFileIn, 256 )
      LOOP WHILE nRC = 1 
         SysWriteLine( vSubtask, nFileOut, szVML_Statement )
         nRC = zSysReadLine( vSubtask, szVML_Statement, nFileIn, 256 )
      END
      SysCloseFile( vSubtask, nFileIn, 0 )
      SysCloseFile( vSubtask, nFileOut, 0 )
   END

END