
/*************************************************************************************************
**
**    OPERATION: CHECK_ReorderAttributes
**
*************************************************************************************************/
DIALOG OPERATION
CHECK_ReorderAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TZADWWKO2 BASED ON LOD  TZADWWKO
   INTEGER nRC
   
   // Validate Row and Group values.
   nRC = VALIDATE_SearchAttributeDef( ViewToWindow )
   IF nRC < 0
      RETURN nRC
   END

   // Make sure that any Entity entries are properly positioned before their corresponding attributes.
   CreateViewFromView( TZADWWKO2, TZADWWKO )
   FOR EACH TZADWWKO.FlatSelectedSearchAttribute 
      IF TZADWWKO.FlatSelectedSearchAttribute.IndentEntityName != ""
         SET CURSOR FIRST TZADWWKO2.FlatSelectedSearchAttribute
                    WHERE TZADWWKO2.FlatSelectedSearchAttribute.EntityName = TZADWWKO.FlatSelectedSearchAttribute.EntityName
         IF TZADWWKO2.FlatSelectedSearchAttribute.IndentEntityName != TZADWWKO.FlatSelectedSearchAttribute.IndentEntityName
            // An Entity entry has been moved, so put it back.
            CREATE ENTITY TZADWWKO2.FlatSelectedSearchAttribute BEFORE
            SetMatchingAttributesByName( TZADWWKO2, "FlatSelectedSearchAttribute", TZADWWKO, "FlatSelectedSearchAttribute", zSET_ALL )
            DELETE ENTITY TZADWWKO.FlatSelectedSearchAttribute
         END
      END
   END
   SET CURSOR FIRST TZADWWKO.FlatSelectedSearchAttribute
   RefreshWindow( ViewToWindow )
   DropView( TZADWWKO2 )

END

/*************************************************************************************************
**
**    OPERATION: ACCEPT_AutoDesignGroup
**
*************************************************************************************************/
DIALOG OPERATION
ACCEPT_AutoDesignGroup( VIEW ViewToWindow )

   VIEW TZWINDOWL REGISTERED AS TZWINDOWL
   VIEW TZCONTROL REGISTERED AS TZCONTROL

   // Accept changes to the AutoDesignGroup subobject, but cancel the Control subobject, since we're
   // not making any changes to it and it's a temporal subobject.
   CancelSubobject( TZCONTROL, "Control" )
   AcceptSubobject( TZWINDOWL, "AutoDesignGroup" )

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_AutodesignCRMSubdialog
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_AutodesignCRMSubdialog( VIEW ViewToWindow )

   VIEW TaskLPLR    REGISTERED AS TaskLPLR
   VIEW TZADWWKO    BASED ON LOD  TZADWWKO
   VIEW AD_Base     BASED ON LOD  TZWDLGSO
   VIEW TZZOLFLO    BASED ON LOD  TZCMLPLO
   VIEW mConListLOD BASED ON LOD  TZZOLODO
   STRING ( 300 ) szAutodesignLPLR_Directory
   STRING ( 300 ) szMsg
   SHORT nRC
   
   // Make sure an Auto Design Base dialog can be loaded.
   GET VIEW AD_Base NAMED "AD_Base"
   IF RESULT < 0
      // The AD_Base object isn't in memory, so load it.
      nRC = ActivateAD_BaseL( AD_Base, ViewToWindow )
      IF nRC < 0
         RETURN nRC
      END
      NAME VIEW AD_Base "AD_Base"
   END
   
   // Make sure that the TZZOLFLO object of Meta LOD entries exists.
   GET VIEW TZZOLFLO NAMED "TZZOLFLO"
   IF RESULT < 0
      CreateViewFromView( TZZOLFLO, TaskLPLR )
      NAME VIEW TZZOLFLO "TZZOLFLO"
      SET CURSOR FIRST TZZOLFLO.W_MetaType WHERE TZZOLFLO.W_MetaType.Type = 7   // 7 is read view of LOD 
   END
   
   // Make sure that the mConList object exists in the LPLR.
   // Then create list of potential mConList Attributes.
   SET CURSOR FIRST TZZOLFLO.W_MetaDef WHERE TZZOLFLO.W_MetaDef.Name = "mConList"
   IF RESULT < 0
      MessageSend( ViewToWindow, "", "Autodesign CRM Find",
                   "The LPLR does not have the necessary object, 'mConList'.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   
   // The TZADWWKO object  should be created new.
   GET VIEW TZADWWKO NAMED "TZADWWKO"
   IF RESULT >= 0
      DropObjectInstance( TZADWWKO )
   END
   ACTIVATE TZADWWKO EMPTY 
   NAME VIEW TZADWWKO "TZADWWKO"
   CREATE ENTITY TZADWWKO.AutoDesignWork 
   CREATE ENTITY TZADWWKO.AutodesignSubdialog 
   TZADWWKO.AutodesignSubdialog.FindType = "CRM"
   CREATE ENTITY TZADWWKO.EntitySubGroup  
   InitializeL_SymbolType( TZADWWKO )
   
   // First activate the mConList Object.
   nRC = ActivateMetaOI_ByName( ViewToWindow, mConListLOD, 0, zREFER_LOD_META, zSINGLE, "mConList", 0 )
   NAME VIEW mConListLOD "mConListLOD"
   
   // Clear any existing TZADWWKO.ESG_FlatListPotentialAttribute2 entries and rebuild them from selected object.
   BuildAD_GroupPotAttrList( TZADWWKO, mConListLOD, "ContactList", "2" )

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_AutodesignObjectFindSubdlg
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_AutodesignObjectFindSubdlg( VIEW ViewToWindow )

   VIEW TaskLPLR REGISTERED AS TaskLPLR
   VIEW AD_Base  BASED ON LOD  TZWDLGSO
   VIEW TZZOLFLO BASED ON LOD  TZCMLPLO
   VIEW TZADWWKO BASED ON LOD  TZADWWKO
   STRING ( 300 ) szAutodesignLPLR_Directory
   STRING ( 300 ) szMsg
   SHORT nRC
   
   // Make sure an Auto Design Base dialog can be loaded.
   GET VIEW AD_Base NAMED "AD_Base"
   IF RESULT < 0
      // The AD_Base object isn't in memory, so load it.
      nRC = ActivateAD_BaseL( AD_Base, ViewToWindow )
      IF nRC < 0
         RETURN nRC
      END
      NAME VIEW AD_Base "AD_Base"
   END
   
   // The TZADWWKO object  should be created new.
   GET VIEW TZADWWKO NAMED "TZADWWKO"
   IF RESULT >= 0
      DropObjectInstance( TZADWWKO )
   END
   ACTIVATE TZADWWKO EMPTY 
   NAME VIEW TZADWWKO "TZADWWKO"
   CREATE ENTITY TZADWWKO.AutoDesignWork 
   CREATE ENTITY TZADWWKO.AutodesignSubdialog 
   TZADWWKO.AutodesignSubdialog.AD_AreaSuffix = "Object"
   CREATE ENTITY TZADWWKO.EntitySubGroup 
   InitializeL_SymbolType( TZADWWKO )
   
   // Make sure that the TZZOLFLO object of Meta LOD entries exists.
   GET VIEW TZZOLFLO NAMED "TZZOLFLO"
   IF RESULT < 0
      CreateViewFromView( TZZOLFLO, TaskLPLR )
      NAME VIEW TZZOLFLO "TZZOLFLO"
      SET CURSOR FIRST TZZOLFLO.W_MetaType WHERE TZZOLFLO.W_MetaType.Type = 7   // 7 is read view of LOD 
   END

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildAutodesignCRM_Subdialog
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildAutodesignCRM_Subdialog( VIEW ViewToWindow )

   VIEW TZWINDOWL   REGISTERED AS TZWINDOWL
   VIEW TZADWWKO    BASED ON LOD  TZADWWKO
   VIEW CL_Domain   BASED ON LOD  TZDGSRCO
   VIEW UpdateLOD   BASED ON LOD  TZZOLODO
   SHORT nRC

   // Set up work data necessary for autodesigning an AutodesignSubdialog.
   
   // Make sure TZADWWKO and the related autodesign objects exist in memory.
   GET VIEW TZADWWKO NAMED "TZADWWKO"
   IF RESULT < 0
      // The autodesign work objects need to be set up.
      
      // The TZADWWKO itself
      ACTIVATE TZADWWKO EMPTY 
      NAME VIEW TZADWWKO "TZADWWKO"
      CREATE ENTITY TZADWWKO.AutoDesignWork 
      CREATE ENTITY TZADWWKO.AutodesignSubdialog 
      CREATE ENTITY TZADWWKO.EntitySubGroup  
      InitializeL_SymbolType( TZADWWKO )
      
      // Remove any existing Autodesign entries from TZWINDOWL.
      IF TZWINDOWL.AutoDesignWindow EXISTS
         DELETE ENTITY TZWINDOWL.AutoDesignWindow  
      END
      CREATE ENTITY TZWINDOWL.AutoDesignWindow 
      CREATE ENTITY TZWINDOWL.AutoDesignGroup  
      
   ELSE
      // The Object exists, also make sure the AutoDesignWork entries exist.
      SET CURSOR FIRST TZADWWKO.AutoDesignWork
      IF RESULT < zCURSOR_SET
         CREATE ENTITY TZADWWKO.AutoDesignWork 
         CREATE ENTITY TZADWWKO.AutodesignSubdialog
      END
   END
   
   // Make sure the list of Contact List Domain Types exists.
   IF TZADWWKO.ContactListTypeDomain DOES NOT EXIST
      // Get the list of ContactListType Domain values.
      nRC = ActivateMetaOI_ByName( ViewToWindow, CL_Domain, 0, zREFER_DOMAIN_META, zSINGLE, "ContactListType", 0 )
      IF nRC <0
         MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                      "Domain ContactListType.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         RETURN -2
      END
      NAME VIEW CL_Domain "CL_Domain"
      CREATE ENTITY TZADWWKO.ContactListTypeDomain   // Create empty entry.
      FOR EACH CL_Domain.TableEntry 
         CREATE ENTITY TZADWWKO.ContactListTypeDomain 
         TZADWWKO.ContactListTypeDomain.DisplayedValue = CL_Domain.TableEntry.ExternalValue 
         TZADWWKO.ContactListTypeDomain.InternalType   = CL_Domain.TableEntry.InternalValue 
      END 
      DropObjectInstance( CL_Domain )
   END
   SET CURSOR FIRST TZADWWKO.ContactListTypeDomain
   
   // If an update LOD exists, make sure that we also name it TZZOLODO_Desc for the combobox.
   GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
   IF RESULT >= 0
      NAME VIEW UpdateLOD "TZZOLODO_Desc"     // We need this named view for the Root select combobox.
   END

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildAutodesignFindSubdialog
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildAutodesignFindSubdialog( VIEW ViewToWindow )

   VIEW TZWINDOWL   REGISTERED AS TZWINDOWL
   VIEW TZADWWKO    BASED ON LOD  TZADWWKO
   VIEW CL_Domain   BASED ON LOD  TZDGSRCO
   VIEW UpdateLOD   BASED ON LOD  TZZOLODO
   SHORT nRC

   // Set up work data necessary for autodesigning an AutodesignSubdialog.
   
   // Make sure TZADWWKO and the related autodesign objects exist in memory.
   GET VIEW TZADWWKO NAMED "TZADWWKO"
   IF RESULT < 0
      // The autodesign work objects need to be set up.
      
      // The TZADWWKO itself
      ACTIVATE TZADWWKO EMPTY 
      NAME VIEW TZADWWKO "TZADWWKO"
      CREATE ENTITY TZADWWKO.AutoDesignWork 
      CREATE ENTITY TZADWWKO.AutodesignSubdialog 
      CREATE ENTITY TZADWWKO.EntitySubGroup  
      InitializeL_SymbolType( TZADWWKO )
      
      // Remove any existing Autodesign entries from TZWINDOWL.
      IF TZWINDOWL.AutoDesignWindow EXISTS
         DELETE ENTITY TZWINDOWL.AutoDesignWindow  
      END
      CREATE ENTITY TZWINDOWL.AutoDesignWindow 
      CREATE ENTITY TZWINDOWL.AutoDesignGroup  
      
   ELSE
      // The Object exists, also make sure the AutoDesignWork entries exist.
      SET CURSOR FIRST TZADWWKO.AutoDesignWork
      IF RESULT < zCURSOR_SET
         CREATE ENTITY TZADWWKO.AutoDesignWork 
         CREATE ENTITY TZADWWKO.AutodesignSubdialog
      END
   END
   
   // If an update LOD exists, make sure that we also name it TZZOLODO_Desc for the combobox.
   GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
   IF RESULT >= 0
      NAME VIEW UpdateLOD "TZZOLODO_Desc"     // We need this named view for the Root select combobox.
   END

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_FindSearchObject
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_FindSearchObject( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW SearchLOD BASED ON LOD  TZZOLODO
   VIEW TZWINDOWL BASED ON LOD  TZWDLGSO
   STRING ( 50 ) szLOD_Name
   STRING ( 50 ) szEntityName
   SHORT nRC

   // For the selected object, build the TZADWWKO.ESG_FlatListPotentialAttribute entries for each Entity/Attribute in the object.
   
   // Make sure a Search object is selected.
   IF TZADWWKO.W_MetaDefSearchObject DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "The Search Object has not been selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN -2
   END

   // Activate the selected Search Object.
   GET VIEW SearchLOD NAMED "TZZOLOD1"
   IF RESULT >= 0
      DropObjectInstance( SearchLOD )
   END
   szLOD_Name = TZADWWKO.W_MetaDefSearchObject.Name 
   nRC = ActivateMetaOI_ByName( ViewToWindow, SearchLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
   NAME VIEW SearchLOD "TZZOLOD1" 
   
   // If this is CRM Find, make the search object the returned object.
   IF TZADWWKO.AutodesignSubdialog.FindType = "CRM"
      INCLUDE TZADWWKO.W_MetaDefReturnedObject FROM TZADWWKO.W_MetaDefSearchObject 
   END
   
   // Clear any existing TZADWWKO.ESG_FlatListPotentialAttribute entries and rebuild them from selected object.
   szEntityName = SearchLOD.LOD_EntityParent.Name 
   BuildAD_GroupPotAttrList( TZADWWKO, SearchLOD, szEntityName, "" )
   
   // Clear any existing TZADWWKO.PotentialExactMatchAttribute entries and rebuild them from the root Entity.
   SET CURSOR FIRST SearchLOD.LOD_Entity WHERE SearchLOD.LOD_Entity.ZKey = SearchLOD.LOD_EntityParent.ZKey  
   FOR EACH SearchLOD.LOD_Attribute 
      INCLUDE TZADWWKO.PotentialExactMatchAttribute FROM SearchLOD.LOD_Attribute 
   END

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_FindReturnedObject
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_FindReturnedObject( VIEW ViewToWindow )

   VIEW TZADWWKO    REGISTERED AS TZADWWKO
   VIEW ReturnedLOD BASED ON LOD  TZZOLODO
   STRING ( 50 ) szLOD_Name
   STRING ( 50 ) szEntityName
   SHORT nRC
   
   // Activate the selected ReturnedLOD and include it in the work object.
   // It will also be named "TZZOLODO_Return".
   GET VIEW ReturnedLOD NAMED "TZZOLODO_Return"
   IF RESULT >= 0
      DropObjectInstance( ReturnedLOD )
   END
   szLOD_Name = TZADWWKO.W_MetaDefReturnedObject.Name 
   nRC = ActivateMetaOI_ByName( ViewToWindow, ReturnedLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
   NAME VIEW ReturnedLOD "TZZOLODO_Return"
   
   // Clear any existing TZADWWKO.ESG_FlatListPotentialAttribute2 entries and rebuild them from selected object.
   szEntityName = ReturnedLOD.LOD_EntityParent.Name 
   BuildAD_GroupPotAttrList( TZADWWKO, ReturnedLOD, szEntityName, "2" )

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_FindDetailObject
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_FindDetailObject( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW UpdateLOD BASED ON LOD  TZZOLODO
   STRING ( 50 ) szLOD_Name
   SHORT nRC
   
   // Activate the selected UpdateLOD and include it in the work object.
   // It will also be named "TZZOLODO_Update".
   GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
   IF RESULT >= 0
      DropObjectInstance( UpdateLOD )
   END
   szLOD_Name = TZADWWKO.W_MetaDefUpdateObject.Name 
   nRC = ActivateMetaOI_ByName( ViewToWindow, UpdateLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
   NAME VIEW UpdateLOD "TZZOLODO_Update"
   NAME VIEW UpdateLOD "TZZOLODO_Desc"     // We need this named view for the Root select combobox.

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_ExactMatchAttribute
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_ExactMatchAttribute( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   
   // Include the selected ExactMatch Attribute and set its name.
   IF TZADWWKO.SelectedExactMatchAttribute EXISTS
      EXCLUDE TZADWWKO.SelectedExactMatchAttribute  
   END
   INCLUDE TZADWWKO.SelectedExactMatchAttribute FROM TZADWWKO.PotentialExactMatchAttribute 
   TZADWWKO.SelectedExactMatchAttribute.wAttributeName = TZADWWKO.PotentialExactMatchER_Attribute.Name 
   
   // Also add the Attribute to the selected list.
   // Make sure that it's the first in the list
   SET CURSOR FIRST TZADWWKO.ESG_FlatLOD_Attribute WITHIN TZADWWKO.AutoDesignWork 
              WHERE TZADWWKO.ESG_FlatLOD_Attribute.ZKey = TZADWWKO.SelectedExactMatchAttribute.ZKey 
   IF TZADWWKO.FlatSelectedSearchAttribute EXISTS
      SET CURSOR FIRST TZADWWKO.FlatSelectedSearchAttribute
      CREATE ENTITY TZADWWKO.FlatSelectedSearchAttribute BEFORE 
   ELSE
      CREATE ENTITY TZADWWKO.FlatSelectedSearchAttribute
   END
   SetMatchingAttributesByName( TZADWWKO, "FlatSelectedSearchAttribute", TZADWWKO, "ESG_FlatListPotentialAttribute", zSET_ALL )
   TZADWWKO.FlatSelectedSearchAttribute.DataType = TZADWWKO.ESG_FlatDomain.DataType 
   INCLUDE TZADWWKO.FlatSearchLOD_Attribute FROM TZADWWKO.ESG_FlatLOD_Attribute 

END

/*************************************************************************************************
**
**    OPERATION: SELECT_FindPotentialAttributes
**
*************************************************************************************************/
DIALOG OPERATION
SELECT_FindPotentialAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TZWINDOWL REGISTERED AS TZWINDOWL
   VIEW TZWINDOW  REGISTERED AS TZWINDOW
   VIEW TZADWWKO2 BASED ON LOD  TZADWWKO
   STRING ( 1 )   szCreateEntityOnlyEntry
   STRING ( 100 ) szTempString
   SHORT   nRC
   
   // Make sure we have position on AutoDesignWindow.
   SET CURSOR FIRST TZWINDOW.AutoDesignWindow  
   
   // Copy selected attributes from ESG_FlatListPotentialAttribute entries to FlatSelectedSearchAttribute entries at the current postiion..
   CreateViewFromView( TZADWWKO2, TZADWWKO )
   FOR EACH TZADWWKO.ESG_FlatListPotentialAttribute 
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute" )
      IF nRC = 1 
         SET CURSOR FIRST TZADWWKO2.FlatSelectedSearchAttribute 
                    WHERE TZADWWKO2.FlatSelectedSearchAttribute.EntityName    = TZADWWKO.ESG_FlatListPotentialAttribute.EntityName  
                      AND TZADWWKO2.FlatSelectedSearchAttribute.AttributeName = TZADWWKO.ESG_FlatListPotentialAttribute.AttributeName 
         IF RESULT < zCURSOR_SET
            CREATE ENTITY TZADWWKO.FlatSelectedSearchAttribute
            SetMatchingAttributesByName( TZADWWKO, "FlatSelectedSearchAttribute", TZADWWKO, "ESG_FlatListPotentialAttribute", zSET_ALL )
            TZADWWKO.FlatSelectedSearchAttribute.DataType = TZADWWKO.ESG_FlatDomain.DataType 
            INCLUDE TZADWWKO.FlatSearchLOD_Attribute FROM TZADWWKO.ESG_FlatLOD_Attribute 
         END
         SetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute", 0 )
      END
   END
   DropView( TZADWWKO2 )

END

/*************************************************************************************************
**
**    OPERATION: REMOVE_FindPotentialAttributes
**
*************************************************************************************************/
DIALOG OPERATION
REMOVE_FindPotentialAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   SHORT nRC

   // Remove any selected Selected entries.
   FOR EACH TZADWWKO.FlatSelectedSearchAttribute
      nRC = GetSelectStateOfEntity( TZADWWKO, "FlatSelectedSearchAttribute" )
      IF nRC = 1
         DELETE ENTITY TZADWWKO.FlatSelectedSearchAttribute NONE
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_FindReturnedCL_Attribs
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_FindReturnedCL_Attribs( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TZWINDOWL REGISTERED AS TZWINDOWL
   VIEW TZWINDOW  REGISTERED AS TZWINDOW
   VIEW TZADWWKO2 BASED ON LOD  TZADWWKO
   STRING ( 1 )   szCreateEntityOnlyEntry
   STRING ( 100 ) szTempString
   INTEGER lMaxPromptLength
   INTEGER lPromptLength
   SHORT   nRC
   
   // Make sure we have position on AutoDesignWindow.
   SET CURSOR FIRST TZWINDOW.AutoDesignWindow  
   
   // Copy selected attributes from ESG_FlatListPotentialAttribute2 entries to ESG_ListLOD_Attribute entries at the current postiion..
   CreateViewFromView( TZADWWKO2, TZADWWKO )
   FOR EACH TZADWWKO.ESG_FlatListPotentialAttribute2
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute2" )
      IF nRC = 1 
         SET CURSOR FIRST TZADWWKO2.FlatSelectedListAttribute 
                    WHERE TZADWWKO2.FlatSelectedListAttribute.EntityName    = TZADWWKO.ESG_FlatListPotentialAttribute2.EntityName  
                      AND TZADWWKO2.FlatSelectedListAttribute.AttributeName = TZADWWKO.ESG_FlatListPotentialAttribute2.AttributeName 
         IF RESULT < zCURSOR_SET
            CREATE ENTITY TZADWWKO.FlatSelectedListAttribute  
            INCLUDE TZADWWKO.FlatListLOD_Attribute FROM TZADWWKO.ESG_FlatLOD_Attribute2 
            TZADWWKO.FlatSelectedListAttribute.EntityName    = TZADWWKO.ESG_FlatLOD_Entity2.Name 
            TZADWWKO.FlatSelectedListAttribute.AttributeName = TZADWWKO.ESG_FlatER_Attribute2.Name 
            // We will use the list title value if it exists. Otherwise, we will use the Prompt value.
            IF TZADWWKO.ESG_FlatListPotentialAttribute2.ListTitleValue != ""
               TZADWWKO.FlatSelectedListAttribute.PromptValue  = TZADWWKO.ESG_FlatListPotentialAttribute2.ListTitleValue 
               TZADWWKO.FlatSelectedListAttribute.PromptLength = TZADWWKO.ESG_FlatListPotentialAttribute2.ListTitleLength 
            ELSE
               TZADWWKO.FlatSelectedListAttribute.PromptValue  = TZADWWKO.ESG_FlatListPotentialAttribute2.PromptValue 
               TZADWWKO.FlatSelectedListAttribute.PromptLength = TZADWWKO.ESG_FlatListPotentialAttribute2.PromptLength 
            END
            TZADWWKO.FlatSelectedListAttribute.ControlType  = TZADWWKO.ESG_FlatListPotentialAttribute2.ControlType 
            TZADWWKO.FlatSelectedListAttribute.ControlWidth = TZADWWKO.ESG_FlatListPotentialAttribute2.ControlWidth 
         END
         SetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute2", 0 )
      END
   END
   DropView( TZADWWKO2 )

END


/*************************************************************************************************
**    
**    OPERATION: REMOVE_FindReturnedCL_Attribs
**    
*************************************************************************************************/
DIALOG OPERATION
REMOVE_FindReturnedCL_Attribs( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   SHORT nRC

   // Remove any selected Selected entries.
   FOR EACH TZADWWKO.FlatSelectedListAttribute 
      nRC = GetSelectStateOfEntity( TZADWWKO, "FlatSelectedListAttribute" )
      IF nRC = 1
         DELETE ENTITY TZADWWKO.FlatSelectedListAttribute NONE
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: AUTODESIGN_CRM_FindSubdialog
**    
*************************************************************************************************/
DIALOG OPERATION
AUTODESIGN_CRM_FindSubdialog( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO

   // The code for this function is an operation in TZADWWKO that is used for both Object Find and
   // CRM Find.
   
   // Make sure that a Contact List Type has been selected.
   IF TZADWWKO.SelectedContactListTypeDomain DOES NOT EXIST OR
      TZADWWKO.SelectedContactListTypeDomain.InternalType = ""

      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "A Contact List Type must be selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   AutodesignFindPages( TZADWWKO, ViewToWindow, "CRM" )
   
END

/*************************************************************************************************
**    
**    OPERATION: AUTODESIGN_ObjectFindSubdialog
**    
*************************************************************************************************/
DIALOG OPERATION
AUTODESIGN_ObjectFindSubdialog( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO

   // The code for this function is an operation in TZADWWKO that is used for both Object Find and
   // CRM Find.
   
   AutodesignFindPages( TZADWWKO, ViewToWindow, "O" )
 
END

/*************************************************************************************************
**    
**    OPERATION: SELECT_ContactListType
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_ContactListType( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   
   // Build the SelectedContactListTypeDomain entity based on the position of ContactListTypeDomain entity.
   IF TZADWWKO.SelectedContactListTypeDomain DOES NOT EXIST
      CREATE ENTITY TZADWWKO.SelectedContactListTypeDomain  
   END
   TZADWWKO.SelectedContactListTypeDomain.DisplayedValue = TZADWWKO.ContactListTypeDomain.DisplayedValue 
   TZADWWKO.SelectedContactListTypeDomain.InternalType   = TZADWWKO.ContactListTypeDomain.InternalType 

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_CRM_ReturnedAttribute
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_CRM_ReturnedAttribute( VIEW ViewToWindow )

   VIEW TZADWWKO    REGISTERED AS TZADWWKO
   VIEW ReturnedLOD BASED ON LOD  TZZOLODO
   
   // Make sure the TZADWWKO.LOD_EntityCL_ItemDisplay entity has already been selected.
   IF TZADWWKO.LOD_EntityCL_ItemDisplay DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "A Returned Entity must be selected first.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   // Include LOD_AttributeCL_ItemDisplay from selected Attribute.
   GET VIEW ReturnedLOD NAMED "TZZOLODO_Desc"
   IF TZADWWKO.LOD_AttributeCL_ItemDisplay EXISTS
      EXCLUDE TZADWWKO.LOD_AttributeCL_ItemDisplay  
   END
   INCLUDE TZADWWKO.LOD_AttributeCL_ItemDisplay FROM ReturnedLOD.LOD_Attribute 

END

/*************************************************************************************************
**    
**    OPERATION: ChangeViewObjRef
**    
*************************************************************************************************/
LOCAL OPERATION  
ChangeViewObjRef( VIEW ViewToWindow,
                  VIEW TZWINDOW  BASED ON LOD  TZWDLGSO,
                  VIEW TZWINDOWL BASED ON LOD  TZWDLGSO,
                  STRING ( 50 ) szViewObjRefName,
                  STRING ( 50 ) szLOD_Name,
                  STRING ( 50 ) szGroupBoxName )
   
   VIEW TZWDVORO BASED ON LOD TZWDVORO
   VIEW GridLOD  BASED ON LOD TZZOLODO
   SHORT nRC

   SET CURSOR FIRST TZWINDOW.ViewObjRef WHERE TZWINDOW.ViewObjRef.Name = szViewObjRefName
   IF RESULT < zCURSOR_SET
      // Activate the Registered View and include it in the Dialog
      nRC = ActivateMetaOI_ByName( ViewToWindow, TZWDVORO, 0, zSOURCE_VOR_META, zSINGLE, szViewObjRefName, 0 )
      IF nRC < 0
         // Activate the lConList LOD.
         nRC = ActivateMetaOI_ByName( ViewToWindow, GridLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
         IF nRC < 0
            IssueError( ViewToWindow,0,0, "Grid LOD couldn't be activated." )
         END
         NAME VIEW GridLOD "GridLOD"
         // Create the ViewObjRef.
         ActivateEmptyMetaOI( ViewToWindow, TZWDVORO, zSOURCE_VOR_META, zSINGLE )
         NAME VIEW TZWDVORO "TZWDVORO_GridObjRef"
         CreateMetaEntity( ViewToWindow, TZWDVORO, "ViewObjRef", zPOS_AFTER )
         TZWDVORO.ViewObjRef.Name = szViewObjRefName 
         TZWDVORO.ViewObjRef.Desc = "Created during CRM Build"
         INCLUDE TZWDVORO.LOD FROM GridLOD.LOD 
         CommitMetaOI( ViewToWindow, TZWDVORO, zSOURCE_VOR_META )
         DropObjectInstance( GridLOD )
      ELSE
         NAME VIEW TZWDVORO "TZWDVORO_GridObjRef"
      END
      INCLUDE TZWINDOW.ViewObjRef FROM TZWDVORO.ViewObjRef 
      DropObjectInstance( TZWDVORO )
   END
  
   // Finally, replace the ViewObjRef in the Grid for GroupBox.
   SET CURSOR FIRST TZWINDOWL.Control WHERE TZWINDOWL.Control.Tag = szGroupBoxName
   // Step down levels to the Grid.
   
   SetViewToSubobject( TZWINDOWL, "CtrlCtrl" )
   SET CURSOR LAST TZWINDOWL.Control     // The Grid will be under the last subGroupBox
   IF TZWINDOWL.ControlDef.Tag = "GroupBox"
      SetViewToSubobject( TZWINDOWL, "CtrlCtrl" )
      SET CURSOR LAST TZWINDOWL.Control     // The Grid will be under the last subGroupBox
      IF TZWINDOWL.ControlDef.Tag = "GroupBox"
         SetViewToSubobject( TZWINDOWL, "CtrlCtrl" )
         SET CURSOR LAST TZWINDOWL.Control     // The Grid will be under the last subGroupBox
         IF TZWINDOWL.ControlDef.Tag = "GroupBox"
            SetViewToSubobject( TZWINDOWL, "CtrlCtrl" )
         END
      END
   END
   
   // Change the ViewObjRef for the Grid itself.
   EXCLUDE TZWINDOWL.CtrlMapView 
   INCLUDE TZWINDOWL.CtrlMapView FROM TZWINDOW.ViewObjRef

   // Change the ViewObjRef for each Grid subcontrol.
   SetViewToSubobject( TZWINDOWL, "CtrlCtrl" )
   FOR EACH TZWINDOWL.Control 
      IF TZWINDOWL.CtrlMap EXISTS
         EXCLUDE TZWINDOWL.CtrlMapView 
         INCLUDE TZWINDOWL.CtrlMapView FROM TZWINDOW.ViewObjRef 
      END 
   END

   // Reset the view back to the top.
   ResetViewFromSubobjectTop( TZWINDOWL )

END

/*************************************************************************************************
**
**    OPERATION: SELECT_UPD_PotentialAttributes
**
*************************************************************************************************/
DIALOG OPERATION
SELECT_UPD_PotentialAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TZADWWKO2 BASED ON LOD  TZADWWKO
   SHORT   nRC
   
   // Add each selected Entity to the list of EntitySubGroup entries at the current position.
   
   CreateViewFromView( TZADWWKO2, TZADWWKO)
   NAME VIEW TZADWWKO2 "TZADWWKO2" 
   
   // On 11/17/2023 DonC switched this code to allow multiple EntitySubGroup entries for the same Entity.
   FOR EACH TZADWWKO.FlatListPotentialEntity 
      nRC = GetSelectStateOfEntity( TZADWWKO, "FlatListPotentialEntity" )
      IF nRC = 1
         //SET CURSOR FIRST TZADWWKO2.ESG_LOD_Entity WITHIN TZADWWKO2.AutoDesignWork 
         //           WHERE TZADWWKO2.ESG_LOD_Entity.ZKey = TZADWWKO.FlatListPotentialLOD_Entity.ZKey 
         //IF RESULT < zCURSOR_SET
            CREATE ENTITY TZADWWKO.EntitySubGroup 
            INCLUDE TZADWWKO.ESG_LOD_Entity FROM TZADWWKO.FlatListPotentialLOD_Entity 
            SetSelectStateOfEntity( TZADWWKO, "FlatListPotentialEntity", 0 )
         //END
      END
   END

   DropView( TZADWWKO2 )

END

/*************************************************************************************************
**
**    OPERATION: REMOVE_UPD_PotentialAttributes
**
*************************************************************************************************/
DIALOG OPERATION
REMOVE_UPD_PotentialAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   SHORT nRC

   // Remove any selected Selected entries.
   FOR EACH TZADWWKO.EntitySubGroup 
      nRC = GetSelectStateOfEntity( TZADWWKO, "EntitySubGroup" )
      IF nRC = 1
         DELETE ENTITY TZADWWKO.EntitySubGroup NONE
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: SET_TypeForSelectedGroups
**    
*************************************************************************************************/
DIALOG OPERATION
SET_TypeForSelectedGroups( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   SHORT nRC

   // Set the specified Group Type for each selected entry.
   // Also make sure that a Type was selected.
   IF TZADWWKO.AutoDesignWork.SelectedGroupType = ""
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "A Type must be selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   FOR EACH TZADWWKO.EntitySubGroup 
      nRC = GetSelectStateOfEntity( TZADWWKO, "EntitySubGroup" )
      IF nRC = 1
         TZADWWKO.EntitySubGroup.GroupType = TZADWWKO.AutoDesignWork.SelectedGroupType 
         SetSelectStateOfEntity( TZADWWKO, "EntitySubGroup", 0 )
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: SELECT_ESGL_ListPotAttributes
**
*************************************************************************************************/
DIALOG OPERATION
SELECT_ESGL_ListPotAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   SHORT   nRC

   // Add each selected ESG_FlatListPotentialAttribute entry as a selected ESG List Attribute.
   // We will add them sequentially to the current ESG_ListLOD_Attribute position 
   
   FOR EACH TZADWWKO.ESG_FlatListPotentialAttribute 
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute" )
      IF nRC = 1
         SET CURSOR FIRST TZADWWKO.ESG_ListLOD_Attribute  
                    WHERE TZADWWKO.ESG_ListLOD_Attribute.ZKey = TZADWWKO.ESG_FlatLOD_Attribute.ZKey
         IF RESULT < zCURSOR_SET
            INCLUDE TZADWWKO.ESG_ListLOD_Attribute FROM TZADWWKO.ESG_FlatLOD_Attribute 
            // We will use the list title value if it exists. Otherwise, we will use the Prompt value.
            IF TZADWWKO.ESG_FlatListPotentialAttribute.ListTitleValue != ""
               TZADWWKO.ESG_ListLOD_Attribute.PromptValue  = TZADWWKO.ESG_FlatListPotentialAttribute.ListTitleValue 
               TZADWWKO.ESG_ListLOD_Attribute.PromptLength = TZADWWKO.ESG_FlatListPotentialAttribute.ListTitleLength 
            ELSE
               TZADWWKO.ESG_ListLOD_Attribute.PromptValue  = TZADWWKO.ESG_FlatListPotentialAttribute.PromptValue 
               TZADWWKO.ESG_ListLOD_Attribute.PromptLength = TZADWWKO.ESG_FlatListPotentialAttribute.PromptLength 
            END
            // ControlType is Text if Entity isn't updateable.
            IF TZADWWKO.ESG_FlatListPotentialAttribute.Create = "Y"
               TZADWWKO.ESG_ListLOD_Attribute.ControlType = TZADWWKO.ESG_FlatListPotentialAttribute.ControlType
            ELSE
               TZADWWKO.ESG_ListLOD_Attribute.ControlType = "Text"
            END
            TZADWWKO.ESG_ListLOD_Attribute.ControlWidth = TZADWWKO.ESG_FlatListPotentialAttribute.ControlWidth 
            SetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute", 0 )
            
            // The CSS_Class values depend on those set up in EntitySubGroup.
            TZADWWKO.ESG_ListLOD_Attribute.CSS_ClassForPrompt  = TZADWWKO.EntitySubGroup.CSS_ClassForPrompt 
            TZADWWKO.ESG_ListLOD_Attribute.CSS_ClassForControl = TZADWWKO.EntitySubGroup.CSS_ClassForControl 
         END
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: REMOVE_ESGL_ListSelAttributes
**
*************************************************************************************************/
DIALOG OPERATION
REMOVE_ESGL_ListSelAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   SHORT nRC

   // Remove any selected List entries.
   FOR EACH TZADWWKO.ESG_ListLOD_Attribute 
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_ListLOD_Attribute" )
      IF nRC = 1 
         EXCLUDE TZADWWKO.ESG_ListLOD_Attribute NONE
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: SELECT_ESGL_DetailPotAttributes
**
*************************************************************************************************/
DIALOG OPERATION
SELECT_ESGL_DetailPotAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   STRING ( 20 ) szGroupType
   SHORT   nRC
   
   // Add each selected ESG_FlatDetailPotentialAttribute entry as a selected ESG List Attribute.
   // We will add them sequentially to the current ESG_ListLOD_Attribute position 
   
   FOR EACH TZADWWKO.ESG_FlatListPotentialAttribute 
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute" )
      IF nRC = 1
         SET CURSOR FIRST TZADWWKO.ESG_DetailLOD_Attribute  
                    WHERE TZADWWKO.ESG_DetailLOD_Attribute.ZKey = TZADWWKO.ESG_FlatLOD_Attribute.ZKey
         IF RESULT < zCURSOR_SET
            INCLUDE TZADWWKO.ESG_DetailLOD_Attribute FROM TZADWWKO.ESG_FlatLOD_Attribute 
             // We will always use the Prompt value for Search.
            TZADWWKO.ESG_DetailLOD_Attribute.PromptValue   = TZADWWKO.ESG_FlatListPotentialAttribute.PromptValue 
            TZADWWKO.ESG_DetailLOD_Attribute.PromptLength  = TZADWWKO.ESG_FlatListPotentialAttribute.PromptLength 
            TZADWWKO.ESG_DetailLOD_Attribute.ControlWidth  = TZADWWKO.ESG_FlatListPotentialAttribute.ControlWidth
            // ControlType is Text if Entity isn't updateable.
            IF TZADWWKO.ESG_FlatListPotentialAttribute.Create = "Y"
               TZADWWKO.ESG_DetailLOD_Attribute.ControlType = TZADWWKO.ESG_FlatListPotentialAttribute.ControlType
            ELSE
               TZADWWKO.ESG_DetailLOD_Attribute.ControlType = "Text"
            END
         END
         SetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute", 0 )
      END
   END
   
   // If the GroupType is "DetailGroupDisplay" OR "DetailGroupInclude", set ControlType to Text.
   szGroupType = TZADWWKO.EntitySubGroup.GroupType 
   IF szGroupType = "DetailGroupDisplay" OR szGroupType = "DetailGroupInclude"
      FOR EACH TZADWWKO.ESG_DetailLOD_Attribute 
         TZADWWKO.ESG_DetailLOD_Attribute.ControlType = "Text" 
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: REMOVE_ESGL_DetailSelAttributes
**
*************************************************************************************************/
DIALOG OPERATION
REMOVE_ESGL_DetailSelAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   SHORT nRC

   // Remove any selected Selected entries.
   FOR EACH TZADWWKO.ESG_DetailLOD_Attribute 
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_DetailLOD_Attribute" )
      IF nRC = 1 
         EXCLUDE TZADWWKO.ESG_DetailLOD_Attribute NONE
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_AD_GroupUpdate
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_AD_GroupUpdate( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW AD_Base   REGISTERED AS AD_Base
   VIEW UpdateLOD BASED ON LOD  TZZOLODO
   STRING ( 30 ) szGroupType
   
   // The window for transfer depends on the SubType of the Group.
   
   szGroupType = TZADWWKO.EntitySubGroup.GroupType
   
   IF szGroupType = "ListGroupOnly" 
      SetWindowActionBehavior( ViewToWindow, zWAB_StartModalSubwindow, "TZADWEBD", "AD_GroupListOnlySpec" )
   ELSE
   IF szGroupType = "ListGroupWDetailPage" OR szGroupType = "ListGroupWUpdatePage"
      SetWindowActionBehavior( ViewToWindow, zWAB_StartModalSubwindow, "TZADWEBD", "AD_GroupListwDetailSpec" )
   ELSE
   IF szGroupType = "DetailGroup" 
      SetWindowActionBehavior( ViewToWindow, zWAB_StartModalSubwindow, "TZADWEBD", "AD_GroupDetailOnlySpec" )
   ELSE
   IF szGroupType = "DetailGroupwInclude"
      SetWindowActionBehavior( ViewToWindow, zWAB_StartModalSubwindow, "TZADWEBD", "AD_GroupDetailwIncludeSpec" )
   ELSE
   IF szGroupType = "DetailGroupwFindInclude"
      SetWindowActionBehavior( ViewToWindow, zWAB_StartModalSubwindow, "TZADWEBD", "AD_GroupDetailwFindIncludeSpec" )
   ELSE
   IF szGroupType = "ListGroupwFindInclude"
      SetWindowActionBehavior( ViewToWindow, zWAB_StartModalSubwindow, "TZADWEBD", "AD_GroupListwFindIncludeSpec" )
   ELSE
   IF szGroupType = "ListGroupwInclude"
      SetWindowActionBehavior( ViewToWindow, zWAB_StartModalSubwindow, "TZADWEBD", "AD_GroupListwIncludeSpec" )
   ELSE
   IF szGroupType = "ListGroupwMGP"
      SetWindowActionBehavior( ViewToWindow, zWAB_StartModalSubwindow, "TZADWEBD", "AD_GroupListwMGP_Spec" )
   ELSE
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "A Valid Type must be selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   END
   END
   END
   END
   END
   END
   END
   
   // Build the list of potential attributes for Group selection.
   FOR EACH TZADWWKO.ESG_FlatListPotentialAttribute
      DELETE ENTITY TZADWWKO.ESG_FlatListPotentialAttribute NONE 
   END
   FOR EACH TZADWWKO.ESG_FlatListPotentialAttribute2
      DELETE ENTITY TZADWWKO.ESG_FlatListPotentialAttribute2 NONE 
   END
   FOR EACH TZADWWKO.ESG_FlatListPotentialAttribute3
      DELETE ENTITY TZADWWKO.ESG_FlatListPotentialAttribute3 NONE 
   END
   // Which version of UpdateLOD we use depends on where we are in the 2 TZADWWKO OI's.
   GET VIEW UpdateLOD NAMED "TZZOLODO_UpdateMGP"
   IF RESULT < 0
      GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
   END
   IF szGroupType = "ListGroupWIncludePage"
      SETUP_ESGL_MainIncludeObject( ViewToWindow )
   ELSE
      IF szGroupType = "ListGroupWUpdatePage" OR szGroupType = "ListGroupWDetailPage"
         IF TZADWWKO.EntitySubGroup.SavedGroupType = ""
            BuildAD_GroupPotAttrList( TZADWWKO, UpdateLOD, TZADWWKO.ESG_LOD_Entity.Name, "" )
         END
      ELSE
         IF szGroupType = "ListGroupwMGP"
            BuildAD_GroupPotAttrList( TZADWWKO, UpdateLOD, TZADWWKO.ESG_LOD_Entity.Name, "" )
         ELSE 
            BuildAD_GroupPotAttrList( TZADWWKO, UpdateLOD, TZADWWKO.ESG_LOD_Entity.Name, "" )
         END
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: BuildAD_GroupPotAttrList
**
*************************************************************************************************/
LOCAL OPERATION
BuildAD_GroupPotAttrList( VIEW TZADWWKO    BASED ON LOD TZADWWKO,
                      VIEW SelectedLOD BASED ON LOD TZZOLODO,
                      STRING ( 32 ) szStartEntityName,
                      STRING ( 1 ) szFlatListNameSuffix )

   VIEW RecursiveLOD BASED ON LOD TZZOLODO
   STRING ( 32 ) szFlatListPotAttributeName
   INTEGER nRC
   
   // First delete any current ESG_FlatListPotentialAttribute entries based on suffix.
   szFlatListPotAttributeName  = "ESG_FlatListPotentialAttribute" + szFlatListNameSuffix
   nRC = SetCursorFirstEntity( TZADWWKO, szFlatListPotAttributeName, "" )
   LOOP WHILE nRC >= zCURSOR_SET
      DeleteEntity( TZADWWKO, szFlatListPotAttributeName, zREPOS_NONE )
      nRC = SetCursorNextEntity( TZADWWKO, szFlatListPotAttributeName, "" )
   END
   
   // Begin the recursive calls to BuildAD_GroupPotAttrListR to copy attributes recursively starting with szStartEntityName.
   CreateViewFromView( RecursiveLOD, SelectedLOD )
   NAME VIEW RecursiveLOD "RecursiveLOD"
   BuildAD_GroupPotAttrListR( TZADWWKO, SelectedLOD, RecursiveLOD, szStartEntityName, szFlatListNameSuffix, 1, 0, "" )
   DropView( RecursiveLOD )

END

/*************************************************************************************************
**
**    OPERATION: BuildAD_GroupPotAttrList
**
*************************************************************************************************/
LOCAL OPERATION
BuildAD_GroupPotAttrListR( VIEW TZADWWKO     BASED ON LOD TZADWWKO,
                           VIEW MainLOD      BASED ON LOD TZZOLODO,
                           VIEW RecursiveLOD BASED ON LOD TZZOLODO,
                           STRING ( 32 ) szStartEntityName,     // The Entity Name at which recursive processing starts
                           STRING ( 1 )  szFlatListNameSuffix,  // ESG_FlatListPotentialAttribute suffix as explained below
                           INTEGER       lCurrentLevel,         // The current recursive level of the LOD_ParentEntity
                           INTEGER       lStartLevel,           // The recursive level at which attributes will be copied
                           STRING ( 50 ) szIndentSpaces )       // Spaces for indenting the name shown in the list. They begin with lStartLevel

   STRING ( 80 ) szIndentEntityName
   STRING ( 32 ) szEntityName
   STRING ( 32 ) szAttributeName
   STRING ( 32 ) szFlatListPotAttributeName
   STRING ( 32 ) szESG_FlatLOD_AttributeName
   STRING ( 90 ) szPromptText
   STRING ( 90 ) szPromptTextSource
   STRING ( 10 ) szControlType

   // Build the ESG_FlatListPotentialAttribute entries from the subobject starting with Entity Name, szStartEntityName, and continuing
   // for all entities with a higher recursive level.
   // Which ESG_FlatListPotentialAttribute subobject to use depends upon the suffix passed of null, "1" or "2".
   
   szEntityName       = RecursiveLOD.LOD_EntityParent.Name 
   szIndentEntityName = RecursiveLOD.LOD_EntityParent.IndentName 
   
   // Look for the Start Entity Name to set lStartLevel and begin copying attributes.
   // The lStartLevel will be zero until we've come across the Start Entity Name.
   IF lStartLevel = 0 AND RecursiveLOD.LOD_EntityParent.Name = szStartEntityName
      lStartLevel = lCurrentLevel
   END
   IF lStartLevel > 0 AND lCurrentLevel >= lStartLevel
   
      szFlatListPotAttributeName  = "ESG_FlatListPotentialAttribute" + szFlatListNameSuffix
      szESG_FlatLOD_AttributeName = "ESG_FlatLOD_Attribute"          + szFlatListNameSuffix
      
      // Position on the LOD_Entity for the current LOD_EntityParent for copying Attributes because the order of the LOD_AttributeRec
      // entities isn't always correct.
      SET CURSOR FIRST MainLOD.LOD_Entity WHERE MainLOD.LOD_Entity.ZKey = RecursiveLOD.LOD_EntityParent.ZKey  
      FOR EACH MainLOD.LOD_Attribute
         CreateEntity( TZADWWKO, szFlatListPotAttributeName, zPOS_AFTER )
         szAttributeName = MainLOD.ER_Attribute.Name
         SetMatchingAttributesByName( TZADWWKO, szFlatListPotAttributeName, MainLOD, "LOD_Entity", zSET_ALL )
         SetAttributeFromString( TZADWWKO, szFlatListPotAttributeName, "EntityName", szEntityName )
         SetAttributeFromString( TZADWWKO, szFlatListPotAttributeName, "AttributeName", szAttributeName )
         SetAttributeFromString( TZADWWKO, szFlatListPotAttributeName, "IndentEntityName", szIndentEntityName )
         IncludeSubobjectFromSubobject( TZADWWKO, szESG_FlatLOD_AttributeName, MainLOD, "LOD_Attribute", zPOS_AFTER )
   
         // Create Control Type based on Update characteristic of Entity and Attribute Domain.
         // A Domain of Y/N will create a Checkbox even if the entity is not updatable.
         IF MainLOD.LOD_EntityParent.Update = "Y"
            ReturnAttrControlType( MainLOD, MainLOD.Domain.Name, MainLOD.Domain.DomainType, szControlType, "Y" )
         ELSE
            ReturnAttrControlType( MainLOD, MainLOD.Domain.Name, MainLOD.Domain.DomainType, szControlType, "" )
         END
         //TZADWWKO.ESG_FlatListPotentialAttribute.ControlType = szControlType
         SetAttributeFromString( TZADWWKO, szFlatListPotAttributeName, "ControlType", szControlType )
         
         // The Data Width will always be set to 30.
         SetAttributeFromInteger( TZADWWKO, szFlatListPotAttributeName, "DataWidth", 5 )
   
         // Use Prompt Values if specified. Otherwise use Attribute Name.
         // If PromptPaintLit is specified, we'll set both PromptValue and ListTitleValue to it and then override ListTitleValue if
         // it is also set.
         IF MainLOD.ER_Attribute.PromptPaintLit != ""
            SetAttributeFromAttribute( TZADWWKO, szFlatListPotAttributeName, "PromptValue", MainLOD, "ER_Attribute", "PromptPaintLit" )
            SetAttributeFromAttribute( TZADWWKO, szFlatListPotAttributeName, "ListTitleValue", MainLOD, "ER_Attribute", "PromptPaintLit" )
         ELSE
            szPromptTextSource = szAttributeName
            InsertSpacesInPrompt( szPromptText, TZADWWKO, szPromptTextSource, 90 )
            SetAttributeFromString( TZADWWKO, szFlatListPotAttributeName, "PromptValue", szPromptText )
         END
         IF MainLOD.ER_Attribute.ListPaintLit != ""
            SetAttributeFromAttribute( TZADWWKO, szFlatListPotAttributeName, "ListTitleValue", MainLOD, "ER_Attribute", "ListPaintLit" )
         ELSE
            // Don't set it here if it was set from PromtValue.
            IF MainLOD.ER_Attribute.PromptPaintLit = ""
               szPromptTextSource = szAttributeName
               InsertSpacesInPrompt( szPromptText, TZADWWKO, szPromptTextSource, 90 )
               SetAttributeFromString( TZADWWKO, szFlatListPotAttributeName, "ListTitleValue", szPromptText )
            END
         END
         SetAttributeFromAttribute( TZADWWKO, szFlatListPotAttributeName, "PromptLength", MainLOD, "ER_Attribute", "PromptPaintLth" )
         SetAttributeFromAttribute( TZADWWKO, szFlatListPotAttributeName, "ListTitleLength", MainLOD, "ER_Attribute", "ListPaintLth" )
      END
   END

   // Process subentities.
   FOR EACH RecursiveLOD.LOD_EntityChild
      SetViewToSubobject( RecursiveLOD, "LOD_EntityChild" )
      BuildAD_GroupPotAttrListR( TZADWWKO, MainLOD, RecursiveLOD, szStartEntityName, szFlatListNameSuffix, lCurrentLevel, lStartLevel, szIndentSpaces )
      ResetViewFromSubobject( RecursiveLOD )
   END

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_AutodesignFindDetailDialog
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_AutodesignFindDetailDialog( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW UpdateLOD BASED ON LOD  TZZOLODO
   
   // Build the FlatListPotentialEntity entries for Autodesign of Update Object.
   // We have one entry in the list for each Entity in the Update Object.
   
   GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
   IF RESULT < 0
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "The Update Object has not been selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   // First delete current entries.
   FOR EACH TZADWWKO.FlatListPotentialEntity 
      DELETE ENTITY TZADWWKO.FlatListPotentialEntity NONE
   END
   
   // Create entry for each LOD_Entity in object.
   FOR EACH UpdateLOD.LOD_Entity 
      CREATE ENTITY TZADWWKO.FlatListPotentialEntity 
      TZADWWKO.FlatListPotentialEntity.EntityName = UpdateLOD.LOD_Entity.Name 
      INCLUDE TZADWWKO.FlatListPotentialLOD_Entity FROM UpdateLOD.LOD_Entity 
      SetMatchingAttributesByName( TZADWWKO, "FlatListPotentialEntity", UpdateLOD, "LOD_Entity", zSET_NULL )
   END
   
   // Set AD_Area and AD_Suffix (which are used in modifying VML & Dialog) from CRM values.
   TZADWWKO.AutodesignSubdialog.AD_AreaName   = TZADWWKO.AutodesignSubdialog.CRM_AreaName 
   TZADWWKO.AutodesignSubdialog.AD_AreaSuffix = TZADWWKO.AutodesignSubdialog.CRM_AreaSuffix 

END


/*************************************************************************************************
**    
**    OPERATION: AUTODESIGN_NewGroup
**    
*************************************************************************************************/
DIALOG OPERATION
AUTODESIGN_NewGroup( VIEW ViewToWindow )

   VIEW TZADWWKO    REGISTERED AS TZADWWKO
   VIEW TZADWWKOSub BASED ON LOD  TZADWWKO
   VIEW TZCONTROL   REGISTERED AS TZCONTROL
   VIEW TZWINDOWL   REGISTERED AS TZWINDOWL
   VIEW TZCONTROL2  BASED ON LOD  TZWDLGSO
   VIEW AD_Base     BASED ON LOD  TZWDLGSO
   VIEW UpdateLOD   BASED ON LOD  TZZOLODO
   STRING ( 50 ) szGroupType
   STRING ( 50 ) szAD_Area
   STRING ( 50 )  szTemplateWindow
   STRING ( 200 ) szMsg
   SHORT nRC
   
   // Reuse the GenEntitySubGroup operation to build the Group and an optional, subpage, depending on the Group Type.
   
   szGroupType = TZADWWKO.EntitySubGroup.GroupType 
   
   // Also activate AD_Base to pick up reusable data values.
   nRC = ActivateAD_BaseL( AD_Base, ViewToWindow )
   IF nRC < 0
      RETURN nRC
   END
   NAME VIEW AD_Base "AD_Base" 
   IF TZADWWKO.AutoDesignWork.SelectedListboxSymbolType = "Icons"
      szTemplateWindow = "ObjectUpdateGroupsIcons" 
   ELSE
      szTemplateWindow = "ObjectUpdateGroups"
   END
   SET CURSOR FIRST AD_Base.Window WHERE AD_Base.Window.Tag = szTemplateWindow
   IF RESULT < zCURSOR_SET
      szMsg = "The template window, " + szTemplateWindow + ", could not be found in AD_Base."
      MessageSend( ViewToWindow, "", "Autodesign Subdialog", szMsg,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   // Check for Update LOD, unless the Group is a DashboardEntry.
   IF szGroupType != "DetailGroupDBE"
      GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
      IF RESULT < 0
         MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                      "The Update Object has not been selected.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END
   END
   
   // Make sure that Mapping wasn't skipped. 
   // Note that we're not making sure all mapping entries have been selected, but just that the User has gone to mapping.
   IF szGroupType = "ListGroupOnly"         OR 
      szGroupType = "ListGroupWDetailPage"  OR 
      szGroupType = "ListGroupWUpdatePage"  OR
      szGroupType = "ListGroupWInclude"     OR 
      szGroupType = "ListGroupwFindInclude" OR 
      szGroupType = "ListGroupwMGP"
      
      // For these options, ESG_ListLOD_Attribute entries must exist.
      SET CURSOR FIRST TZADWWKO.ESG_ListLOD_Attribute 
      IF RESULT < zCURSOR_SET
         MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                      "No mapping entries have been selected.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END 
   ELSE
   IF szGroupType = "DetailGroup" OR szGroupType = "DetailGroupwInclude" OR szGroupType = "DetailGroupwFindInclude" 
      // For these options, ESG_DetailLOD_Attribute entries must exist.
      SET CURSOR FIRST TZADWWKO.ESG_DetailLOD_Attribute 
      IF RESULT < zCURSOR_SET
         MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                      "No mapping entries have been selected.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END
   END
   END
   
   // Accept the current Control in case it is versioned and then delete it, as the GenEntitySubGroup operation
   // will create the necessary Group Control. The current Group Control is only used for positioning.
   AcceptSubobject( TZCONTROL, "Control" )
   DELETE ENTITY TZCONTROL.Control NONE 
   
   // First build the Entity Group on the current page.
   // We will create a copy of TZCONTROL because we want to keep it's current position.
   CreateViewFromView( TZCONTROL2, TZCONTROL )
   NAME VIEW TZCONTROL2 "TZCONTROLAD"
   szGroupType = TZADWWKO.EntitySubGroup.GroupType 
   szAD_Area   = TZADWWKO.EntitySubGroup.GroupAreaName 
   nRC = GenEntitySubGroup( TZADWWKO, TZCONTROL2, TZWINDOWL, AD_Base, szGroupType, szAD_Area )
   IF nRC < 0
      RETURN nRC
   END
   
   DropView( TZCONTROL2 )
   
   // Reposition and Resize all Group Controls.
   ResizeReposGroupBoxes( TZADWWKO, TZWINDOWL )

   // Rename some Controls to avoid duplicate Tags.
   SET CURSOR FIRST TZWINDOWL.Control
   RenameAD_Controls( TZADWWKO, TZWINDOWL ) 
   
   // SUBWINDOWS FOR SELECTED GROUP TYPES
   
   // Next, build the subwindow if there is one for the Group Type.
   IF szGroupType = "ListGroupWUpdatePage" OR szGroupType = "ListGroupWDetailPage"
   
      // GROUP LIST UPDATE/DETAIL PAGE
      
      GenListDetailPage( TZADWWKO, TZWINDOWL, AD_Base, ViewToWindow )

   ELSE
     
   IF szGroupType = "DetailGroupwInclude" OR szGroupType = "DetailGroupwFindInclude" OR 
      szGroupType = "ListGroupwInclude"   OR szGroupType = "ListGroupwFindInclude"
      
      // GROUP LIST OR DETAIL INCLUDE PAGE WITH OR WITHOUT FIND
      
      GenIncludePage( TZADWWKO, TZWINDOWL, AD_Base, ViewToWindow )  
   
   ELSE
   
   IF szGroupType = "ListGroupwMGP"   
      
      // GROUP LIST WITH MULTI-PAGE PAGES
   
      // Rename the current TZADWWKO OI and set TZADWWKOSub to TZADWWKO for use in AUTODESIGN_MPG_Pages.
      SetNameForView( TZADWWKO, "TZADWWKOMain", ViewToWindow, zLEVEL_TASK )
      DropNameForView( TZADWWKO, "TZADWWKO", ViewToWindow, zLEVEL_TASK )
      GET VIEW TZADWWKOSub NAMED "TZADWWKOSub"
      NAME VIEW TZADWWKOSub "TZADWWKO"
      // Also rename the MGP Update LOD as it is used in building the Groups.
      GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
      IF RESULT >= 0
         DropObjectInstance( UpdateLOD )
      END 
      GET VIEW UpdateLOD NAMED "TZZOLODO_UpdateMGP"
      NAME VIEW UpdateLOD "TZZOLODO_Update"

      // Reuse operation for Multi-Group Page
      AUTODESIGN_MPG_Pages( ViewToWindow )
      
      DropObjectInstance( TZADWWKO )
      
   END
   END
   END
   
   GET VIEW AD_Base NAMED "AD_Base"
   IF RESULT >= 0
      DropObjectInstance( AD_Base )
   END
   
   // Finally, refresh the current window to display changes to the Group.
   RepaintWindowControls( ViewToWindow )

END

/*************************************************************************************************
**    
**    OPERATION: AUTODESIGN_MPG_Pages
**    
*************************************************************************************************/
DIALOG OPERATION
AUTODESIGN_MPG_Pages( VIEW ViewToWindow )

   VIEW TZADWWKO    REGISTERED AS TZADWWKO
   VIEW TZADWWKOMn  BASED ON LOD  TZADWWKO
   VIEW TaskLPLR    REGISTERED AS TaskLPLR
   VIEW TZPESRCO    REGISTERED AS TZPESRCO
   VIEW TZWINDOWL   REGISTERED AS TZWINDOWL
   VIEW TZWINDOW    BASED ON LOD  TZWDLGSO
   VIEW TZWINDOW2   BASED ON LOD  TZWDLGSO
   VIEW TZCONTROL   BASED ON LOD  TZWDLGSO
   VIEW AD_Base     REGISTERED AS AD_Base
   VIEW AD_BaseSrc  BASED ON LOD  TZWDLGSO
   VIEW AD_BaseCtl  BASED ON LOD  TZWDLGSO
   VIEW UpdateLOD   BASED ON LOD  TZZOLODO
   VIEW SearchLOD   BASED ON LOD  TZZOLODO
   VIEW ReturnedLOD BASED ON LOD  TZZOLODO
   VIEW TZWDVORO    BASED ON LOD  TZWDVORO
   VIEW AD_BaseUC   BASED ON LOD  TZWDLGSO
   STRING ( 50 )  szWindowName
   STRING ( 50 )  szGroupName
   STRING ( 50 )  szGroupType
   STRING ( 50 )  szAD_Suffix
   STRING ( 50 )  szAD_Area
   STRING ( 50 )  szActionName
   STRING ( 50 )  szOperationName
   STRING ( 50 )  szReturnedEntityName
   STRING ( 50 )  szReturnedObjectName
   STRING ( 50 )  szLOD_ListEntityName
   STRING ( 50 )  szViewName
   STRING ( 50 )  szMappingObject
   STRING ( 50 )  szMappingEntity
   STRING ( 50 )  szMappingAttribute
   STRING ( 50 )  szSearchObjectName
   STRING ( 50 )  szSourceFileName
   STRING ( 50 )  szInclEntS 
   STRING ( 50 )  szInclObjS 
   STRING ( 50 )  szInclEntT 
   STRING ( 50 )  szInclObjT
   STRING ( 50 )  szInclSuff
   STRING ( 50 )  szAD_SchN 
   STRING ( 50 )  szAD_RetO 
   STRING ( 50 )  szAD_RetE 
   STRING ( 50 )  szAD_UpdObj
   STRING ( 50 )  szAD_ID
   STRING ( 50 )  szMainV
   STRING ( 50 )  szMainE
   STRING ( 50 )  szAD_UpdE
   STRING ( 50 )  szControlType
   STRING ( 50 )  szTemplateWindow
   STRING ( 200 ) szMsg
   STRING ( 256 ) szSourceDirectory
   STRING ( 256 ) szOriginalVML
   STRING ( 256 ) szVML_Statement
   STRING ( 256 ) szFindVML
   STRING ( 256 ) szCheckForOperation
   STRING ( 256 ) szCompare
   INTEGER nRC
   INTEGER nRC2
   INTEGER nNextPositionY
   INTEGER nLevel
   INTEGER nFileIn
   INTEGER nFileOut
   INTEGER nLength  
   
   // Autodesign a Window and possible Subwindows based on the EntitySubGroups defined as follows:
   // On the first Window, build a list or detail group for each EntitySubGroup depending on the EntitySubType.
   // Also build a subwindow for those EntitySubType entries that include such a subpage.
   
   // Reactivate AD_Base window to make sure we get the correct templates.
   GET VIEW AD_Base NAMED "AD_Base"
   IF RESULT >= 0
      DropObjectInstance( AD_Base )
   END
   ActivateAD_BaseL( AD_Base, ViewToWindow )
   
   // If View TZWINDOW doesn't exist, create it from TZWINDOWL. TZWINDOW doesn't exist if a Window isn't open.
   GET VIEW TZWINDOW NAMED "TZWINDOW"
   IF RESULT < 0
      CreateViewFromView( TZWINDOW, TZWINDOWL )
      NAME VIEW TZWINDOW "TZWINDOW"
   END
   
   SET CURSOR LAST TZWINDOWL.Window    // Position at end of target Dialog.
   szAD_Suffix = TZADWWKO.AutodesignSubdialog.AD_AreaSuffix 
   szAD_Area   = TZADWWKO.AutodesignSubdialog.AD_AreaName 
   IF szAD_Suffix = "" OR szAD_Area = ""
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "Both an AD Area and an AD Suffix must be selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   // Check for Update LOD, which is the main LOD for the multi-group page for both Update and Detail.
   GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
   IF RESULT < 0
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "The Update Object has not been selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   // Check for mapping data.
   IF TZADWWKO.ESG_ListLOD_Attribute   DOES NOT EXIST AND
      TZADWWKO.ESG_DetailLOD_Attribute DOES NOT EXIST
      
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "List and Detail Attributes must be specified.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   // Make sure the current Dialog has a main SourceFile entry.
   szSourceFileName = TZWINDOW.Dialog.Tag 
   SET CURSOR FIRST TZWINDOW.SourceFile WHERE TZWINDOW.SourceFile.Name = szSourceFileName
   IF RESULT < zCURSOR_SET
      CreateMetaEntity( TZWINDOW, TZWINDOW, "SourceFile", zPOS_AFTER )
      TZWINDOW.SourceFile.Name         = szSourceFileName
      TZWINDOW.SourceFile.Extension    = "VML"
      TZWINDOW.SourceFile.LanguageType = "V"
   END 
   
   // Initialize the main Window based on Page Type.
   IF TZADWWKO.AutoDesignWork.SelectedPageType = "U"
      SET CURSOR FIRST AD_Base.Window WHERE AD_Base.Window.Tag = "ObjectUpdate"
   ELSE
      SET CURSOR FIRST AD_Base.Window WHERE AD_Base.Window.Tag = "ObjectDetail"
   END
   IF RESULT < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Autodesign Window Group",
                   "The Base window named 'ObjectUpdate' doesn't exist in AD_Base.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   SET CURSOR LAST TZWINDOWL.Window  
   nRC = CloneWindow( TZWINDOWL, AD_Base, TaskLPLR, ViewToWindow )
   TraceLineI( "*** CloneWindow RC: ", nRC )
   szWindowName = szAD_Area + "Detail"
   TZWINDOWL.Window.Tag     = szWindowName
   TZWINDOWL.Window.Caption = szWindowName

   // Create view for generating update controls.
   CreateViewFromView( AD_BaseUC, AD_Base )
   SET CURSOR FIRST AD_BaseUC.Window WHERE AD_BaseUC.Window.Tag = "UpdateFields" 
   
   // Add Update Object Registered View to Dialog as necessary.
   SET CURSOR FIRST TZWINDOW.ViewObjRef WHERE TZWINDOW.ViewObjRef.Name = TZADWWKO.W_MetaDefUpdateObject.Name 
   IF RESULT < 0
      // Activate the Registered View and include it in the Dialog. It will have been created when the object was created.
      nRC = ActivateMetaOI_ByName( ViewToWindow, TZWDVORO, 0, zSOURCE_VOR_META, zSINGLE, TZADWWKO.W_MetaDefUpdateObject.Name, 0 )
      NAME VIEW TZWDVORO "UpdateObjectView"
      INCLUDE TZWINDOW.ViewObjRef FROM TZWDVORO.ViewObjRef 
      DropObjectInstance( TZWDVORO )
   END 
   
   // The Clone above creates the Save/Cancel or Return Actions and Operations, but they need to have their names converted.
   FOR EACH TZWINDOWL.Action 
      szActionName = TZWINDOWL.Action.Tag
      zSearchAndReplace( szActionName, 50, "_AD_Area", szAD_Area )
      TZWINDOWL.Action.Tag = szActionName 
   END
   
   // Copy Save/Cancel or Return Operations and tie them to the Action by the same name.
   // Also convert the _AD_Area characters in both source file and Dialog.
   // The Clone should create an Operation Source entry by the same name as the AD_Base dialog.
   CreateViewFromView( AD_BaseSrc, TZWINDOW )
   NAME VIEW AD_BaseSrc "AD_BaseSrc"
   IF TZADWWKO.AutoDesignWork.SelectedPageType = "U"
      SET CURSOR FIRST AD_BaseSrc.SourceFile WHERE AD_BaseSrc.SourceFile.Name = "ObjUpdat"
   ELSE
      SET CURSOR FIRST AD_BaseSrc.SourceFile WHERE AD_BaseSrc.SourceFile.Name = "ObjDtl"
   END
   FOR EACH AD_BaseSrc.Operation 
      szOperationName = AD_BaseSrc.Operation.Name
      zSearchAndReplace( szOperationName, 50, "_AD_Area", szAD_Area )
      SET CURSOR FIRST TZWINDOW.Operation WHERE TZWINDOW.Operation.Name = szOperationName 
      IF RESULT < zCURSOR_SET
         SET CURSOR LAST TZWINDOW.Operation
         CreateMetaEntity( TZWINDOW, TZWINDOW, "Operation", zPOS_AFTER )
         TZWINDOW.Operation.Name = szOperationName
         SetMatchingAttributesByName( TZWINDOW, "Operation", AD_BaseSrc, "Operation", zSET_NULL )
         FOR EACH AD_BaseSrc.Parameter 
            CreateMetaEntity( TZWINDOW, TZWINDOW, "Parameter", zPOS_AFTER )
            SetMatchingAttributesByName( TZWINDOW, "Parameter", AD_BaseSrc, "Parameter", zSET_NULL )
         END
         // If the Operation is for an Action in the new window, exclude the original and include the new.
         SET CURSOR FIRST TZWINDOWL.Action WHERE TZWINDOWL.Action.Tag = szOperationName
         IF RESULT >= zCURSOR_SET
            EXCLUDE TZWINDOWL.ActOper 
            INCLUDE TZWINDOWL.ActOper FROM TZWINDOW.Operation 
         END
      ELSE
         // The operation already exists, so we need to tie it to the Action by the same name, if it exists.
         SET CURSOR FIRST TZWINDOWL.Action WHERE TZWINDOWL.Action.Tag = szOperationName
         IF RESULT >= zCURSOR_SET
            EXCLUDE TZWINDOWL.ActOper 
            INCLUDE TZWINDOWL.ActOper FROM TZWINDOW.Operation 
         END
      END 
   END
   
   // Check if the Operations have already been copied to the main Source File. If not, copy them with the corrected names.
   
   // Check to see if the Operation, "SAVE__AD_Area", exists in the VML File, where _AD_Area is replaced by Area Name.
   // Note that the Operation Name starts in column 1.
   IF TZADWWKO.AutoDesignWork.SelectedPageType = "U"
      szCheckForOperation = "SAVE_" + szAD_Area
   ELSE
      szCheckForOperation = "RETURN_" + szAD_Area
   END
   nLength = zGetStringLen( szCheckForOperation )
   szSourceDirectory = TaskLPLR.LPLR.PgmSrcDir 
   szFindVML = szSourceDirectory + "\" + TZWINDOW.Dialog.Tag + ".VML"
   nFileIn   = SysOpenFile( TZWINDOW, szFindVML, COREFILE_READ )
   nRC2 = -1
   IF nFileIn > 0   // Don't continue if the VML hasn't been created yet.
      nRC = zSysReadLine( TZWINDOW, szVML_Statement, nFileIn, 256 )
      LOOP WHILE nRC = 1 AND nRC2 != 0
         zstrncpy( szCompare, szVML_Statement, nLength )
         nRC2 = zstrcmp( szCompare, szCheckForOperation )
         nRC = zSysReadLine( TZWINDOW, szVML_Statement, nFileIn, 256 )
      END
      SysCloseFile( TZWINDOW, nFileIn, 0 )
   END
   
   IF nRC2 != 0     // Operation was not found.
      // The Operation was not found in the target Source File, so copy the VML
      szAD_UpdObj       = TZADWWKO.W_MetaDefUpdateObject.Name
      szSourceDirectory = TaskLPLR.LPLR.PgmSrcDir
      szFindVML         = szSourceDirectory + "\" + TZWINDOW.Dialog.Tag + ".VML" 
      IF TZADWWKO.AutoDesignWork.SelectedPageType = "U"
         
         
         // If this is the MGP for an original szGroupType = "ListGroupwMGP", then we must use the ObjMGP2 VML
         // source and set up the RelinkSubobject replace variables. We determine this by the existance of the
         // TZADWWKOMain OI, which we will also use for some of the variables.
         // DonC 4/11/2024: I'm not sure the ListGroupwMGP logic is still correct.
         GET VIEW TZADWWKOMn NAMED "TZADWWKOMain"
         IF RESULT < 0
            // Which save VML to use depends on whether or not there is a returned list object. If there is such
            // an object, we need to follow the save with a relink of the returned list object.
            // Also, if the returned list is for CRM, then the object view name is "mConList" + the Area Suffix.
            IF TZADWWKO.W_MetaDefReturnedObject EXISTS
               // There is a return list object.
               szAD_UpdE = UpdateLOD.LOD_EntityParent.Name               // Relink source is root Entity of Update LOD.
               szAD_RetE = TZADWWKO.LOD_EntityReturnedObjectInclude.Name // Returned Entity
               IF TZADWWKO.AutodesignSubdialog.FindType = "CRM"
                  // The returned object is mConList + suffix.
                  szAD_RetO = "mConList" + szAD_Suffix                   // Returned Entity Name
                  szOriginalVML = "c:\lplr\AD_Base\ObjUpdcl.VML"         // Use Contact List VML
               ELSE
                  // The returned list is identified as TZADWWKO.W_MetaDefReturnedObject.
                  szAD_RetO = TZADWWKO.W_MetaDefReturnedObject.Name      // Returned Entity Name
                  szOriginalVML = "c:\lplr\AD_Base\ObjUpdRt.VML"         // Use Returned List VML
               END
            ELSE
               // There is no return list object, so use VML source without Relink.
               szOriginalVML = "c:\lplr\AD_Base\ObjUpdat.VML"
            END
         ELSE
            szOriginalVML = "c:\lplr\AD_Base\ObjMGP2.VML"
            // Check to see if an Activate entity was specifified. If so use it. Otherwise use the List entity.
            IF TZADWWKOMn.ESG_LOD_Entity2 EXISTS    // Check to see if an Activate Entity was specifified.
               szMainE = TZADWWKOMn.ESG_LOD_Entity2.Name
            ELSE
               szMainE = TZADWWKOMn.ESG_LOD_Entity.Name
            END

            szMainV   = TZADWWKOMn.W_MetaDefUpdateView.Name
            szAD_UpdE = UpdateLOD.LOD_EntityParent.Name    // Root Entity of Update LOD.
         END
      ELSE
         szOriginalVML = "c:\lplr\AD_Base\ObjDtl.VML"
      END
      ReturnID_NameForEntity( TZADWWKO, szAD_ID, szAD_UpdE, UpdateLOD )  // Get Identifier Name for UpdateLOD LOD & Entity szAD_UpdE
      
      // Copy the source VML to the end of the Find VML, converting the variable characters in the process.
      nFileIn   = SysOpenFile( TZWINDOW, szOriginalVML, COREFILE_READ ) 
      nFileOut  = SysOpenFile( TZWINDOW, szFindVML, COREFILE_APPEND )
      nRC = zSysReadLine( TZWINDOW, szVML_Statement, nFileIn, 256 )
      LOOP WHILE nRC = 1 
         zSearchAndReplace( szVML_Statement, 256, "_AD_Area",  szAD_Area )    // Area Name
         zSearchAndReplace( szVML_Statement, 256, "_AD_UpdO",  szAD_UpdObj )  // Update Object Name
         zSearchAndReplace( szVML_Statement, 256, "_MainV",    szMainV )      // The Main Object View with original listbox
         zSearchAndReplace( szVML_Statement, 256, "_MainE",    szMainE )      // The Main Object Entity for Activate
         zSearchAndReplace( szVML_Statement, 256, "_AD_RetO",  szAD_RetO )    // The Main Object View with original listbox
         zSearchAndReplace( szVML_Statement, 256, "_AD_RetE",  szAD_RetE )    // The Main Object Entity for Activate
         zSearchAndReplace( szVML_Statement, 256, "_AD_UpdE",  szAD_UpdE )    // The Root Entity of the MGP Update LOD.
         zSearchAndReplace( szVML_Statement, 256, "_AD_Suff",  szAD_Suffix )  // The Root Entity of the MGP Update LOD.
         zSearchAndReplace( szVML_Statement, 256, "_AD_ID",    szAD_ID )      // Update Identifier Name for object and entity above.
         
         SysWriteLine( TZWINDOW, nFileOut, szVML_Statement )
         
         nRC = zSysReadLine( TZWINDOW, szVML_Statement, nFileIn, 256 )
      END
      
      SysCloseFile( TZWINDOW, nFileIn, 0 )
      SysCloseFile( TZWINDOW, nFileOut, 0 )
   END
   
   // The Operation copy above copied the two operations under the original SourceFile.
   // So we just need to delete the ObjUpdat SourceFile and its subordinate Operations.
   DELETE ENTITY TZWINDOWL.SourceFile  
   DropView( AD_BaseSrc )
   
   // MAIN WINDOW GENERATION
   
   // Build each Group based on the SubGroup type and content.
   IF TZADWWKO.AutoDesignWork.SelectedListboxSymbolType = "Icons"
      szTemplateWindow = "ObjectUpdateGroupsIcons" 
   ELSE
      szTemplateWindow = "ObjectUpdateGroups"
   END
   SET CURSOR FIRST AD_Base.Window WHERE AD_Base.Window.Tag = szTemplateWindow
   IF RESULT < zCURSOR_SET
      szMsg = "The template window, " + szTemplateWindow + ", could not be found in AD_Base."
      MessageSend( ViewToWindow, "", "Autodesign Subdialog", szMsg,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   CreateViewFromView( TZCONTROL, TZWINDOWL )    // TZWINDOWL is positioned on the Window being built.
   NAME VIEW TZCONTROL "TZCONTROLAD"
   CreateViewFromView( AD_BaseCtl, AD_Base )
   NAME VIEW  AD_BaseCtl "AD_BaseCtl"
   
   // We are assuming Bootstrap and must step down to the level which contain the SubGroups from GenEntitySubGroup.
   // Position on the last and innermost Group, which will contain the Subgroups.
   // We assume there is always at least one Group
   SET CURSOR LAST TZCONTROL.Control
   nRC = SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
   SET CURSOR LAST TZCONTROL.Control
   IF TZCONTROL.CtrlCtrl EXISTS
     nRC = SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
      SET CURSOR LAST TZCONTROL.Control
      IF TZCONTROL.CtrlCtrl EXISTS
         nRC = SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
         SET CURSOR LAST TZCONTROL.Control
         IF TZCONTROL.CtrlCtrl EXISTS
            nRC = SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
            SET CURSOR LAST TZCONTROL.Control
         END
      END
   END
   SetViewToSubobject( TZCONTROL, "CtrlCtrl" )   // We need to go down one additional level.
   
   FOR EACH TZADWWKO.EntitySubGroup 
      szGroupType = TZADWWKO.EntitySubGroup.GroupType
TraceLineS( "*** szGroupType: ", szGroupType )

      // Use reusable operation, GenEntitySubGroup, to build out the Group.
      nRC = GenEntitySubGroup( TZADWWKO, TZCONTROL, TZWINDOWL, AD_Base, szGroupType, szAD_Area )
      IF nRC < 0
         RETURN nRC
      END
   END
   // Always reset to top Group.
   nRC = ResetViewFromSubobject( TZCONTROL )    // Make sure we reset view to the top.
   LOOP WHILE nRC = 0
      nRC = ResetViewFromSubobject( TZCONTROL )
   END
   
   // Reposition and Resize all Group Controls.
   ResizeReposGroupBoxes( TZADWWKO, TZWINDOWL )

   // Go to rename some Controls to avoid duplicate Tags.
   SET CURSOR FIRST TZWINDOWL.Control
   RenameAD_Controls( TZADWWKO, TZWINDOWL ) 
   
   DropView( TZCONTROL )
   DropView( AD_BaseCtl )
   
   
   // SUBWINDOW GENERATION
   
   // GENERATE SUBORDINATE PAGES BASED ON GROUP TYPE.
   
   // For each EntitySubGroup of type ListGroupWUpdatePage or ListGroupWDetailPage, build a Subwindow.
   FOR EACH TZADWWKO.EntitySubGroup 
      szGroupType = TZADWWKO.EntitySubGroup.GroupType
      IF szGroupType = "ListGroupWUpdatePage" OR szGroupType = "ListGroupWDetailPage"
      
         // GROUP LIST UPDATE/DETAIL PAGE
         
         GenListDetailPage( TZADWWKO, TZWINDOWL, AD_Base, ViewToWindow )

      ELSE
        
      IF szGroupType = "DetailGroupwInclude" OR szGroupType = "DetailGroupwFindInclude" OR 
         szGroupType = "ListGroupwInclude"   OR szGroupType = "ListGroupwFindInclude"
         
         // GROUP LIST OR DETAIL INCLUDE PAGE WITH OR WITHOUT FIND
         
         GenIncludePage( TZADWWKO, TZWINDOWL, AD_Base, ViewToWindow )  
      
      END
      END
   END
   
   // If this is NOT part of a Find autodesgin, drop the work object so that it will be create anew.
   IF TZADWWKO.FlatSelectedSearchAttribute DOES NOT EXIST
      DropObjectInstance( TZADWWKO )
   END
   
   // Drop the UpdateLOD if it exists.
   GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
   IF RESULT < 0
      DropObjectInstance( UpdateLOD )
   END
   
   MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                "Generate MultiGroup pages is complete.",
                zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
   
END

/*************************************************************************************************
**    
**    OPERATION: CANCEL_AutodesignMultiPage
**    
*************************************************************************************************/
DIALOG OPERATION
CANCEL_AutodesignMultiPage( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   
   // Drop the work object so that it will be create anew.
   DropObjectInstance( TZADWWKO )

END

/*************************************************************************************************
**    
**    OPERATION: ReturnAttrControlType
**    
*************************************************************************************************/
LOCAL OPERATION
ReturnAttrControlType( VIEW AnyView,
                       STRING ( 32 ) szDomainName,
                       STRING ( 32 ) szDomainType,
                       STRING ( 10 ) szControlType,
                       STRING ( 1 )  szUpdateFlag )

   // Return the Control Type based on the Domain and whether or not the Update Flag is set.
   // A Domain of Y/N always returns a Checkbox regardless of Update Flag.
   IF szDomainName = "Y/N"
      // Domain is Y/N.
      szControlType   = "CheckBox"
   ELSE
      IF szUpdateFlag = "Y"
         IF szDomainName = "Date" OR szDomainName = "DateTime"
            // A Domain of Date will make the control a Calendar.
            szControlType = "Calendar"
         ELSE
            IF szDomainType = "T"
               // The Domain is a table, so make control a Combobox.
               szControlType = "ComboBox"
            ELSE
               IF szDomainName = "Note"
                  // The Domain is Note, so make control a MLEdit.
                  szControlType = "MLEdit"
               ELSE
                  // If not a table, make control an Editbox.
                  szControlType = "EditBox"
               END
            END
         END
      ELSE
         // The entity is not updatable, so Control Type is "Text"
         szControlType = "Text"
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: SELECT_ESGL_MainInclAttributes
**
*************************************************************************************************/
DIALOG OPERATION
SELECT_ESGL_MainInclAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   SHORT   nRC
   
   // Add each selected potential Include attribute entry as a selected Include attribute.
   // The potential Include attributes are defined in subobject ESG_FlatListPotentialAttribute.
   // The selected Include attributes are defined in subobject ESG_ListLOD_Attribute.
   // We will add them sequentially to the current Include position 
   
   FOR EACH TZADWWKO.ESG_FlatListPotentialAttribute 
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute" )
      IF nRC = 1
         SET CURSOR FIRST TZADWWKO.ESG_ListLOD_Attribute  
                    WHERE TZADWWKO.ESG_ListLOD_Attribute.ZKey = TZADWWKO.ESG_FlatLOD_Attribute.ZKey
         IF RESULT < zCURSOR_SET
            SET CURSOR LAST TZADWWKO.ESG_ListLOD_Attribute
            INCLUDE TZADWWKO.ESG_ListLOD_Attribute FROM TZADWWKO.ESG_FlatLOD_Attribute 
            // We will use the list value if it exists. Otherwise, we will use the Prompt value.
            IF TZADWWKO.ESG_FlatListPotentialAttribute.ListTitleValue != ""
               TZADWWKO.ESG_ListLOD_Attribute.PromptValue  = TZADWWKO.ESG_FlatListPotentialAttribute.ListTitleValue 
               TZADWWKO.ESG_ListLOD_Attribute.PromptLength = TZADWWKO.ESG_FlatListPotentialAttribute.ListTitleLength 
            ELSE
               TZADWWKO.ESG_ListLOD_Attribute.PromptValue  = TZADWWKO.ESG_FlatListPotentialAttribute.PromptValue 
               TZADWWKO.ESG_ListLOD_Attribute.PromptLength = TZADWWKO.ESG_FlatListPotentialAttribute.PromptLength 
            END
            // ControlType is Text if Entity isn't updateable.
            IF TZADWWKO.ESG_FlatListPotentialAttribute.Create = "Y"
               TZADWWKO.ESG_ListLOD_Attribute.ControlType = TZADWWKO.ESG_FlatListPotentialAttribute.ControlType
            ELSE
               TZADWWKO.ESG_ListLOD_Attribute.ControlType = "Text"
            END
            TZADWWKO.ESG_ListLOD_Attribute.ControlWidth = TZADWWKO.ESG_FlatListPotentialAttribute.ControlWidth 
         END
         SetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute", 0 )
      END
   END
   TraceLineS("TEST FOR KJS COMPILE", "")

END

/*************************************************************************************************
**
**    OPERATION: REMOVE_ESGL_IncludeAttributes
**
*************************************************************************************************/
DIALOG OPERATION
REMOVE_ESGL_MainInclAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   SHORT nRC

   // Remove any selected Include entries.
   // The selected Include attributes are defined in subobject ESG_ListLOD_Attribute.
   FOR EACH TZADWWKO.ESG_ListLOD_Attribute 
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_ListLOD_Attribute" )
      IF nRC = 1 
         EXCLUDE TZADWWKO.ESG_ListLOD_Attribute NONE
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: SELECT_ESGL_SearchAttributes
**
*************************************************************************************************/
DIALOG OPERATION
SELECT_ESGL_SearchAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   SHORT   nRC
   
   // Add each selected potential Search attribute entry as a selected Search attribute.
   // The potential Search attributes are defined in subobject ESG_FlatListPotentialAttribute3.
   // The selected Search attributes are defined in subobject ESG_DetailLOD_Attribute.
   // We will add them sequentially to the current Search position 
   
   FOR EACH TZADWWKO.ESG_FlatListPotentialAttribute3 
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute3" )
      IF nRC = 1
         SET CURSOR FIRST TZADWWKO.ESG_SearchLOD_Attribute 
                    WHERE TZADWWKO.ESG_SearchLOD_Attribute.ZKey = TZADWWKO.ESG_FlatLOD_Attribute3.ZKey
         IF RESULT < zCURSOR_SET
            SET CURSOR LAST TZADWWKO.ESG_SearchLOD_Attribute
            INCLUDE TZADWWKO.ESG_SearchLOD_Attribute FROM TZADWWKO.ESG_FlatLOD_Attribute3  
            
            // We will always use the Prompt value for Search.
            TZADWWKO.ESG_SearchLOD_Attribute.PromptValue         = TZADWWKO.ESG_FlatListPotentialAttribute3.PromptValue 
            TZADWWKO.ESG_SearchLOD_Attribute.PromptLength        = TZADWWKO.ESG_FlatListPotentialAttribute3.PromptLength 
            TZADWWKO.ESG_SearchLOD_Attribute.ControlType         = TZADWWKO.ESG_FlatListPotentialAttribute3.ControlType 
            TZADWWKO.ESG_SearchLOD_Attribute.ControlWidth        = TZADWWKO.ESG_FlatListPotentialAttribute3.ControlWidth
         END
         SetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute3", 0 )
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: REMOVE_ESGL_SearchAttributes
**
*************************************************************************************************/
DIALOG OPERATION
REMOVE_ESGL_SearchAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   SHORT nRC

   // Remove any selected Search entries.
   // The selected Search attributes are defined in subobject ESG_SearchLOD_Attribute.
   FOR EACH TZADWWKO.ESG_SearchLOD_Attribute 
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_SearchLOD_Attribute" )
      IF nRC = 1 
         EXCLUDE TZADWWKO.ESG_SearchLOD_Attribute NONE
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: SELECT_ESGL_IncludeAttributes
**
*************************************************************************************************/
DIALOG OPERATION
SELECT_ESGL_IncludeAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   SHORT   nRC
   
   // Add each selected potential Include attribute entry as a selected Include attribute.
   // The potential Include attributes are defined in subobject ESG_FlatListPotentialAttribute2.
   // The selected Include attributes are defined in subobject ESG_List2LOD_Attribute.
   // We will add them sequentially to the current Include position 
   
   FOR EACH TZADWWKO.ESG_FlatListPotentialAttribute2 
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute2" )
      IF nRC = 1
         SET CURSOR FIRST TZADWWKO.ESG_List2LOD_Attribute  
                    WHERE TZADWWKO.ESG_List2LOD_Attribute.ZKey = TZADWWKO.ESG_FlatLOD_Attribute2.ZKey
         IF RESULT < zCURSOR_SET
            SET CURSOR LAST TZADWWKO.ESG_List2LOD_Attribute
            INCLUDE TZADWWKO.ESG_List2LOD_Attribute FROM TZADWWKO.ESG_FlatLOD_Attribute2 
            // We will use the list value if it exists. Otherwise, we will use the Prompt value.
            IF TZADWWKO.ESG_FlatListPotentialAttribute2.ListTitleValue != ""
               TZADWWKO.ESG_List2LOD_Attribute.PromptValue  = TZADWWKO.ESG_FlatListPotentialAttribute2.ListTitleValue 
               TZADWWKO.ESG_List2LOD_Attribute.PromptLength = TZADWWKO.ESG_FlatListPotentialAttribute2.ListTitleLength 
            ELSE
               TZADWWKO.ESG_List2LOD_Attribute.PromptValue  = TZADWWKO.ESG_FlatListPotentialAttribute2.PromptValue 
               TZADWWKO.ESG_List2LOD_Attribute.PromptLength = TZADWWKO.ESG_FlatListPotentialAttribute2.PromptLength 
            END
            TZADWWKO.ESG_List2LOD_Attribute.ControlType  = TZADWWKO.ESG_FlatListPotentialAttribute2.ControlType 
            TZADWWKO.ESG_List2LOD_Attribute.ControlWidth = TZADWWKO.ESG_FlatListPotentialAttribute2.ControlWidth
         END
         SetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute2", 0 )
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: REMOVE_ESGL_IncludeAttributes
**
*************************************************************************************************/
DIALOG OPERATION
REMOVE_ESGL_IncludeAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   SHORT nRC

   // Remove any selected Include entries.
   // The selected Include attributes are defined in subobject ESG_List2LOD_Attribute.
   FOR EACH TZADWWKO.ESG_List2LOD_Attribute 
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_List2LOD_Attribute" )
      IF nRC = 1 
         EXCLUDE TZADWWKO.ESG_List2LOD_Attribute NONE
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: SETUP_ESGL_MainIncludeObject
**    
*************************************************************************************************/
DIALOG OPERATION
SETUP_ESGL_MainIncludeObject( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW UpdateLOD BASED ON LOD  TZZOLODO
   STRING ( 32 ) szLOD_Name
   INTEGER       nRC
   
   // Set up the potential attributes for the Main Include list object.
   
   // Get Main Update object view.
   GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
   IF RESULT < 0
      IF TZADWWKO.W_MetaDefUpdateObject EXISTS
         SELECT_AutodesignGroupObject( ViewToWindow )
      END
   END

   // Build the ESG_FlatListPotentialAttribute entries from the subobject starting with LOD_EntityParent.
   BuildAD_GroupPotAttrList( TZADWWKO, UpdateLOD, TZADWWKO.ESG_LOD_Entity.Name, "" )

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_ESGL_SearchObject
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_ESGL_SearchObject( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW AD_Base   REGISTERED AS AD_Base
   VIEW SearchLOD BASED ON LOD  TZZOLODO
   VIEW TZWDVORO  BASED ON LOD  TZWDVORO
   STRING ( 32 ) szLOD_Name
   STRING ( 32 ) szVOR_Name
   INTEGER       nRC
   
   // For the selected VOR, build the TZADWWKO.ESG_FlatListPotentialAttribute3 entries for each Entity/Attribute in the object.
   
   IF TZADWWKO.ESG_ListSearchW_MetaDef DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "No Search Object View was selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   // Determine the Search LOD from the selected VOR.
   szVOR_Name = TZADWWKO.ESG_ListSearchW_MetaDef.Name
   nRC = ActivateMetaOI_ByName( ViewToWindow, TZWDVORO, 0, zSOURCE_VOR_META, zSINGLE, szVOR_Name, 0 )
   NAME VIEW TZWDVORO "TZWDVOROSearch"
   szLOD_Name = TZWDVORO.LOD.Name 
   TZADWWKO.ESG_ListSearchW_MetaDef.wObjectName = szLOD_Name    // Save the associated LOD Name.
   DropObjectInstance( TZWDVORO )

   // Activate the selected Search Object.
   GET VIEW SearchLOD NAMED "ESGL_SearchLOD"
   IF RESULT >= 0
      DropObjectInstance( SearchLOD )
   END
   nRC = ActivateMetaOI_ByName( ViewToWindow, SearchLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
   NAME VIEW SearchLOD "ESGL_SearchLOD"

   // Build the ESG_FlatListPotentialAttribute entries from the subobject starting with LOD_EntityParent.
   BuildAD_GroupPotAttrList( TZADWWKO, SearchLOD, SearchLOD.LOD_EntityParent.Name, "3" )

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_ESGL_IncludeObject
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_ESGL_IncludeObject( VIEW ViewToWindow )

   VIEW TZADWWKO   REGISTERED AS TZADWWKO
   VIEW IncludeLOD BASED ON LOD  TZZOLODO
   VIEW UpdateLOD  BASED ON LOD  TZZOLODO
   VIEW TZWDVORO   BASED ON LOD  TZWDVORO
   STRING ( 32 ) szLOD_Name
   STRING ( 32 ) szVOR_Name
   STRING ( 50 ) szLOD_NameInclude
   STRING ( 50 ) szLOD_NameUpdate
   INTEGER       nRC
   
   // For the selected VOR, build the TZADWWKO.ESG_FlatListPotentialAttribute2 entries for each Entity/Attribute in the object.
   
   IF TZADWWKO.ESG_ListIncludeW_MetaDef DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "No Select List Object View was selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   // Determine the Include LOD from the selected VOR.
   szVOR_Name = TZADWWKO.ESG_ListIncludeW_MetaDef.Name
   nRC = ActivateMetaOI_ByName( ViewToWindow, TZWDVORO, 0, zSOURCE_VOR_META, zSINGLE, szVOR_Name, 0 )
   NAME VIEW TZWDVORO "TZWDVOROInclude"
   szLOD_Name = TZWDVORO.LOD.Name 
   TZADWWKO.ESG_ListIncludeW_MetaDef.wObjectName = szLOD_Name    // Save the associated LOD Name.
   DropObjectInstance( TZWDVORO )

   // Activate the selected Include Object.
   GET VIEW IncludeLOD NAMED "ESGL_IncludeLOD"
   IF RESULT >= 0
      // Drop any current IncludeLOD view, as well as the object instance if it isn't also the Update LOD.
      szLOD_NameInclude = IncludeLOD.LOD.Name 
      GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
      szLOD_NameUpdate = UpdateLOD.LOD.Name 
      IF szLOD_NameUpdate = szLOD_NameInclude
         // Both views are for same object, so don't drop the include object or we'll drop the update object.
         DropNameForView( IncludeLOD, "ESGL_IncludeLOD", ViewToWindow, zLEVEL_TASK )
      ELSE
         DropObjectInstance( IncludeLOD )
      END
   END
   nRC = ActivateMetaOI_ByName( ViewToWindow, IncludeLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
   NAME VIEW IncludeLOD "ESGL_IncludeLOD"
   TZADWWKO.EntitySubGroup.ReturnedObjectRootEntityName = IncludeLOD.LOD_EntityParent.Name 

   // Build the ESG_FlatListPotentialAttribute entries for the Potential Select List Attributes.
   BuildAD_GroupPotAttrList( TZADWWKO, IncludeLOD, IncludeLOD.LOD_EntityParent.Name, "2" )
   
   // Build the ESG_FlatListPotentialEntity subobject entries for the 3 Entity include select lists.
   // First delete any current entries then rebuild them.
   
   // Select List Entity
   FOR EACH TZADWWKO.ESG_FlatListPotentialEntity 
      DELETE ENTITY TZADWWKO.ESG_FlatListPotentialEntity NONE
   END
   FOR EACH IncludeLOD.LOD_Entity 
      CREATE ENTITY TZADWWKO.ESG_FlatListPotentialEntity 
      TZADWWKO.ESG_FlatListPotentialEntity.EntityName = IncludeLOD.LOD_Entity.Name 
      INCLUDE TZADWWKO.ESG_FlatListPotentialLOD_Entity FROM IncludeLOD.LOD_Entity 
      SetMatchingAttributesByName( TZADWWKO, "ESG_FlatListPotentialEntity", IncludeLOD, "LOD_Entity", zSET_NULL )
   END
   
   // Target Include Entity
   FOR EACH TZADWWKO.ESG_FlatListPotentialEntity2 
      DELETE ENTITY TZADWWKO.ESG_FlatListPotentialEntity2 NONE
   END
   GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
   FOR EACH UpdateLOD.LOD_Entity 
      CREATE ENTITY TZADWWKO.ESG_FlatListPotentialEntity2 
      TZADWWKO.ESG_FlatListPotentialEntity2.EntityName = UpdateLOD.LOD_Entity.Name 
      INCLUDE TZADWWKO.ESG_FlatListPotentialLOD_Entity2 FROM UpdateLOD.LOD_Entity 
      SetMatchingAttributesByName( TZADWWKO, "ESG_FlatListPotentialEntity2", UpdateLOD, "LOD_Entity", zSET_NULL )
   END
   
   // Source Include Entity
   FOR EACH TZADWWKO.ESG_FlatListPotentialEntity3 
      DELETE ENTITY TZADWWKO.ESG_FlatListPotentialEntity3 NONE
   END
   FOR EACH IncludeLOD.LOD_Entity 
      CREATE ENTITY TZADWWKO.ESG_FlatListPotentialEntity3 
      TZADWWKO.ESG_FlatListPotentialEntity3.EntityName = IncludeLOD.LOD_Entity.Name 
      INCLUDE TZADWWKO.ESG_FlatListPotentialLOD_Entity3 FROM IncludeLOD.LOD_Entity 
      SetMatchingAttributesByName( TZADWWKO, "ESG_FlatListPotentialEntity3", IncludeLOD, "LOD_Entity", zSET_NULL )
   END

END

/*************************************************************************************************
**    
**    OPERATION: ACCEPT_GroupListWInclude
**    
*************************************************************************************************/
DIALOG OPERATION
ACCEPT_GroupListWInclude( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TZCONTROL REGISTERED AS TZCONTROL
   VIEW TZWINDOWL REGISTERED AS TZWINDOWL
   VIEW UpdateLOD BASED ON LOD  TZZOLODO
   VIEW AD_Base   BASED ON LOD  TZWDLGSO
   STRING ( 50 ) szGroupType
   INTEGER nRC
   
   // For ListGroupwInclude Type, make sure Include MetaDef entry has been selected.
   IF TZADWWKO.AutoDesignWork.SelectedGroupType = ""
      // Group Type is specified in EntitySubGroup.GroupType.
      szGroupType = TZADWWKO.EntitySubGroup.GroupType 
   ELSE
      // Group Type is specified in AutoDesignWork.SelectedGroupType.
      szGroupType = TZADWWKO.AutoDesignWork.SelectedGroupType 
   END
   IF szGroupType = "ListGroupwInclude"
      IF TZADWWKO.ESG_ListIncludeW_MetaDef DOES NOT EXIST
         MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                      "An Include object must be selected.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END
   ELSE
      // For the others, make sure that both the Search and Include MetaDef entries have been selected.
      IF TZADWWKO.ESG_ListSearchW_MetaDef DOES NOT EXIST OR 
         TZADWWKO.ESG_ListIncludeW_MetaDef DOES NOT EXIST
         
         MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                      "Both a Search and Include object must be selected.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END
   END
   
   // Make sure both Group Area Name and Area Title have been selected because they are required for Bootstrap.
   IF TZADWWKO.EntitySubGroup.GroupAreaName  = "" OR 
      TZADWWKO.EntitySubGroup.GroupAreaTitle = ""
      
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "Both a Group Area Name and Title must be specified.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   AcceptSubobject( TZADWWKO, "EntitySubGroup" )
   
   // The Action/Operation Suffix will be the same as the Group Area Name, at least for now.
   TZADWWKO.EntitySubGroup.IncludeOperationSuffix = TZADWWKO.EntitySubGroup.GroupAreaName 

END

/*************************************************************************************************
**    
**    OPERATION: ACCEPT_GroupDetailWInclude
**    
*************************************************************************************************/
DIALOG OPERATION
ACCEPT_GroupDetailWInclude( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TZCONTROL REGISTERED AS TZCONTROL
   VIEW TZWINDOWL REGISTERED AS TZWINDOWL
   VIEW UpdateLOD BASED ON LOD  TZZOLODO
   VIEW AD_Base   BASED ON LOD  TZWDLGSO
   INTEGER nRC

   // Make sure that both the Search and Include MetaDef entries have been selected.
   IF TZADWWKO.ESG_ListIncludeW_MetaDef DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "An Include object must be selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   // Make sure both Group Area Name and Area Title have been selected because they are required for Bootstrap.
   IF TZADWWKO.EntitySubGroup.GroupAreaName  = "" OR 
      TZADWWKO.EntitySubGroup.GroupAreaTitle = ""
      
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "Both a Group Area Name and Title must be specified.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   AcceptSubobject( TZADWWKO, "EntitySubGroup" )
   
   // Save the Group Type for checks on update of a group.
   TZADWWKO.EntitySubGroup.SavedGroupType = TZADWWKO.EntitySubGroup.GroupType 
   
   // The Action/Operation Suffix will be the same as the Group Area Name, at least for now.
   TZADWWKO.EntitySubGroup.IncludeOperationSuffix = TZADWWKO.EntitySubGroup.GroupAreaName 

END

/*************************************************************************************************
**    
**    OPERATION: CANCEL_AD_GroupSpec
**    
*************************************************************************************************/
DIALOG OPERATION
CANCEL_AD_GroupSpec( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TZCONTROL BASED ON LOD  TZWDLGSO
   
   CancelSubobject( TZADWWKO, "EntitySubGroup" )
   GET VIEW TZCONTROL NAMED "TZCONTROL"
   IF RESULT >= 0
      CancelSubobject( TZCONTROL, "Control" )
   END

END

/*************************************************************************************************
**    
**    OPERATION: ACCEPT_Group
**    
*************************************************************************************************/
DIALOG OPERATION
ACCEPT_Group( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TZCONTROL REGISTERED AS TZCONTROL
   VIEW TZWINDOWL REGISTERED AS TZWINDOWL
   VIEW UpdateLOD BASED ON LOD  TZZOLODO
   VIEW AD_Base   BASED ON LOD  TZWDLGSO
   INTEGER nRC
   
   // Make sure both Group Area Name and Area Title have been selected because they are required for Bootstrap.
   IF TZADWWKO.EntitySubGroup.GroupAreaName  = "" OR 
      TZADWWKO.EntitySubGroup.GroupAreaTitle = ""
      
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "Both a Group Area Name and Title must be specified.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   AcceptSubobject( TZADWWKO, "EntitySubGroup" )
   
   // The Action/Operation Suffix will be the same as the Group Area Name, at least for now.
   TZADWWKO.EntitySubGroup.IncludeOperationSuffix = TZADWWKO.EntitySubGroup.GroupAreaName 

END

/*************************************************************************************************
**    
**    OPERATION: ACCEPT_DashboardGroup
**    
*************************************************************************************************/
DIALOG OPERATION
ACCEPT_DashboardGroup( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TZCONTROL REGISTERED AS TZCONTROL
   VIEW TZWINDOWL REGISTERED AS TZWINDOWL
   VIEW UpdateLOD BASED ON LOD  TZZOLODO
   VIEW AD_Base   BASED ON LOD  TZWDLGSO
   STRING ( 5 ) szSuffix
   INTEGER nRC
   
   // Make sure both Group Area Name and Area Title and Suffix have been entered
   IF TZADWWKO.EntitySubGroup.GroupAreaName          = "" OR 
      TZADWWKO.EntitySubGroup.GroupAreaTitle         = "" OR 
      TZADWWKO.EntitySubGroup.DashboardRunTimeSuffix = ""
      
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "A Group Area Name, Title and Run Time Suffix must all be specified.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   // Make sure the suffix is a number from 1 to 5.
   szSuffix = TZADWWKO.EntitySubGroup.DashboardRunTimeSuffix 
   IF szSuffix != "1" AND   
      szSuffix != "2" AND 
      szSuffix != "3" AND 
      szSuffix != "4" AND 
      szSuffix != "5" AND 
      szSuffix != "6" 
      
      MessageSend( ViewToWindow, "", "Autodesign Subdialog",
                   "The Run DateTime Suffix must be an integer from 1 to 6.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   AcceptSubobject( TZADWWKO, "EntitySubGroup" )
   
   // The Action/Operation Suffix will be the same as the Group Area Name, at least for now.
   TZADWWKO.EntitySubGroup.IncludeOperationSuffix = TZADWWKO.EntitySubGroup.GroupAreaName 

END

/*************************************************************************************************
**    
**    OPERATION: AddRegisteredViewName
**    
*************************************************************************************************/
LOCAL OPERATION
AddRegisteredViewName( VIEW TZWINDOW BASED ON LOD TZWDLGSO,
                       VIEW TZZOLODO BASED ON LOD TZZOLODO,
                       STRING ( 32 ) szObjectViewName )

   VIEW TZWDVORO BASED ON LOD TZWDVORO
   INTEGER nRC
   
   // Activate the Registered View and include it in the Dialog, creating it if necessary.
   nRC = ActivateMetaOI_ByName( TZWINDOW, TZWDVORO, 0, zSOURCE_VOR_META, zSINGLE, szObjectViewName, 0 )
   IF nRC < 0
      // Create the ViewObjRef.
      ActivateEmptyMetaOI( TZWINDOW, TZWDVORO, zSOURCE_VOR_META, zSINGLE )
      NAME VIEW TZWDVORO "TZWDVORO_ToInclude"
      CreateMetaEntity( TZWINDOW, TZWDVORO, "ViewObjRef", zPOS_AFTER )
      TZWDVORO.ViewObjRef.Name = szObjectViewName
      TZWDVORO.ViewObjRef.Desc = "Created during AD Build"
      INCLUDE TZWDVORO.LOD FROM TZZOLODO.LOD 
      CommitMetaOI( TZWINDOW, TZWDVORO, zSOURCE_VOR_META )
   ELSE
      NAME VIEW TZWDVORO "TZWDVORO_ToInclude"
   END
   INCLUDE TZWINDOW.ViewObjRef FROM TZWDVORO.ViewObjRef 
   DropObjectInstance( TZWDVORO )

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildAD_MultiGroupPage
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildAD_MultiGroupPage( VIEW ViewToWindow )

   VIEW TZWINDOWL REGISTERED AS TZWINDOWL
   VIEW TaskLPLR  REGISTERED AS TaskLPLR
   VIEW TZZOLFLO  BASED ON LOD  TZCMLPLO
   VIEW TZADWWKO  BASED ON LOD  TZADWWKO
   VIEW AD_Base   BASED ON LOD  TZWDLGSO
   SHORT nRC

   // Set up work data necessary for autodesigning an AutodesignSubdialog.
   
   // Make sure TZADWWKO and the related autodesign objects exist in memory.
   GET VIEW TZADWWKO NAMED "TZADWWKO"
   IF RESULT < 0
      // The autodesign work objects need to be set up.
      
      // The TZADWWKO itself
      ACTIVATE TZADWWKO EMPTY 
      NAME VIEW TZADWWKO "TZADWWKO"
      CREATE ENTITY TZADWWKO.AutoDesignWork 
      CREATE ENTITY TZADWWKO.AutodesignSubdialog 
      InitializeL_SymbolType( TZADWWKO ) 
      
      // Remove any existing Autodesign entries from TZWINDOWL.
      IF TZWINDOWL.AutoDesignWindow EXISTS
         DELETE ENTITY TZWINDOWL.AutoDesignWindow  
      END
      CREATE ENTITY TZWINDOWL.AutoDesignWindow 
      CREATE ENTITY TZWINDOWL.AutoDesignGroup  
      
      // Also activate AD_Base to pick up reusable data values.
      nRC = ActivateAD_BaseL( AD_Base, ViewToWindow )
      IF nRC < 0
         RETURN nRC
      END
      NAME VIEW AD_Base "AD_Base" 
   END
   
   // Make sure default for main page is update.
   TZADWWKO.AutoDesignWork.SelectedPageType = "U"
   
   // Make sure that the TZZOLFLO object of Meta View entries exists.
   GET VIEW TZZOLFLO NAMED "TZZOLFLO"
   IF RESULT < 0
      CreateViewFromView( TZZOLFLO, TaskLPLR )
      NAME VIEW TZZOLFLO "TZZOLFLO"
      SET CURSOR FIRST TZZOLFLO.W_MetaType WHERE TZZOLFLO.W_MetaType.Type = 9   // 9 is read view of Registered View.
   END

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_MultiPageDetailObject
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_MultiPageDetailObject( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TaskLPLR  REGISTERED AS TaskLPLR
   VIEW UpdateLOD BASED ON LOD  TZZOLODO
   VIEW UpdateVOR BASED ON LOD  TZWDVORO
   STRING ( 50 ) szVOR_Name
   STRING ( 50 ) szLOD_Name
   SHORT nRC
   
   // Just return if nothing was selected.
   IF TZADWWKO.W_MetaDefUpdateView DOES NOT EXIST
      RETURN
   END
   
   // Activate the selected Object View.
   szVOR_Name = TZADWWKO.W_MetaDefUpdateView.Name 
   nRC = ActivateMetaOI_ByName( ViewToWindow, UpdateVOR, 0, zREFER_VOR_META, zSINGLE, szVOR_Name, 0 )
   NAME VIEW UpdateVOR "UpdateObjectViewRef"
   
   // Next Activate the LOD for the View.
   GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
   IF RESULT >= 0
      DropObjectInstance( UpdateLOD )
   END
   szLOD_Name = UpdateVOR.LOD.Name 
   nRC = ActivateMetaOI_ByName( ViewToWindow, UpdateLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
   NAME VIEW UpdateLOD "TZZOLODO_Update"
   DropObjectInstance( UpdateVOR )
   
   // Include the Object Meta, which may be used later.
   SET CURSOR FIRST TaskLPLR.W_MetaType  WHERE TaskLPLR.W_MetaType.Type = 7   // Read view of LOD
   SET CURSOR FIRST TaskLPLR.W_MetaDef   WHERE TaskLPLR.W_MetaDef.Name  = szLOD_Name  
   IF TZADWWKO.W_MetaDefUpdateObject EXISTS 
      EXCLUDE TZADWWKO.W_MetaDefUpdateObject
   END
   INCLUDE TZADWWKO.W_MetaDefUpdateObject FROM TaskLPLR.W_MetaDef 
   
   // Build the FlatListPotentialEntity entries from the update object just activated.
   // We have one entry in the list for each Entity in the Update Object.

   // First delete any current entries then rebuild them.
   FOR EACH TZADWWKO.FlatListPotentialEntity 
      DELETE ENTITY TZADWWKO.FlatListPotentialEntity NONE
   END
   FOR EACH UpdateLOD.LOD_Entity 
      CREATE ENTITY TZADWWKO.FlatListPotentialEntity 
      TZADWWKO.FlatListPotentialEntity.EntityName = UpdateLOD.LOD_Entity.Name 
      INCLUDE TZADWWKO.FlatListPotentialLOD_Entity FROM UpdateLOD.LOD_Entity 
      SetMatchingAttributesByName( TZADWWKO, "FlatListPotentialEntity", UpdateLOD, "LOD_Entity", zSET_NULL )
   END

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_MultiPageMGP_Object
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_MultiPageMGP_Object( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TaskLPLR  REGISTERED AS TaskLPLR
   VIEW UpdateLOD BASED ON LOD  TZZOLODO
   VIEW UpdateVOR BASED ON LOD  TZWDVORO
   STRING ( 50 ) szVOR_Name
   STRING ( 50 ) szLOD_Name
   SHORT nRC
   
   // This is much the same as the SELECT_MultiPageDetailObject above except that it must execute as a 
   // subfunction and thus needs to name the UpdateLOD differently.
   
   // Just return if nothing was selected.
   IF TZADWWKO.W_MetaDefUpdateView DOES NOT EXIST
      RETURN
   END
   
   // Default the suffix for MGP
   TZADWWKO.AutodesignSubdialog.AD_AreaSuffix = "MGP"
   
   // Activate the selected Object View.
   szVOR_Name = TZADWWKO.W_MetaDefUpdateView.Name 
   nRC = ActivateMetaOI_ByName( ViewToWindow, UpdateVOR, 0, zREFER_VOR_META, zSINGLE, szVOR_Name, 0 )
   NAME VIEW UpdateVOR "UpdateObjectViewRef"
   
   // Next Activate the LOD for the View.
   GET VIEW UpdateLOD NAMED "TZZOLODO_UpdateMGP"
   IF RESULT >= 0
      DropObjectInstance( UpdateLOD )
   END
   szLOD_Name = UpdateVOR.LOD.Name 
   nRC = ActivateMetaOI_ByName( ViewToWindow, UpdateLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
   NAME VIEW UpdateLOD "TZZOLODO_UpdateMGP"
   DropObjectInstance( UpdateVOR )
   
   // Include the Object Meta, which may be used later.
   SET CURSOR FIRST TaskLPLR.W_MetaType  WHERE TaskLPLR.W_MetaType.Type = 7   // Read view of LOD
   SET CURSOR FIRST TaskLPLR.W_MetaDef   WHERE TaskLPLR.W_MetaDef.Name  = szLOD_Name  
   IF TZADWWKO.W_MetaDefUpdateObject EXISTS 
      EXCLUDE TZADWWKO.W_MetaDefUpdateObject
   END
   INCLUDE TZADWWKO.W_MetaDefUpdateObject FROM TaskLPLR.W_MetaDef 
   
   // Build the FlatListPotentialEntity entries from the update object just activated.
   // We have one entry in the list for each Entity in the Update Object.

   // First delete any current entries then rebuild them.
   FOR EACH TZADWWKO.FlatListPotentialEntity 
      DELETE ENTITY TZADWWKO.FlatListPotentialEntity NONE
   END
   FOR EACH UpdateLOD.LOD_Entity 
      CREATE ENTITY TZADWWKO.FlatListPotentialEntity 
      TZADWWKO.FlatListPotentialEntity.EntityName = UpdateLOD.LOD_Entity.Name 
      INCLUDE TZADWWKO.FlatListPotentialLOD_Entity FROM UpdateLOD.LOD_Entity 
      SetMatchingAttributesByName( TZADWWKO, "FlatListPotentialEntity", UpdateLOD, "LOD_Entity", zSET_NULL )
   END

END

/*************************************************************************************************
**    
**    OPERATION: OVERRIDE_ControlsForDetail
**    
*************************************************************************************************/
DIALOG OPERATION
OVERRIDE_ControlsForDetail( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   SHORT nRC
   
   // Override the Control Type for each selected Attribute to Text.
   FOR EACH TZADWWKO.ESG_DetailLOD_Attribute 
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_DetailLOD_Attribute" ) 
      IF nRC = 1
         TZADWWKO.ESG_DetailLOD_Attribute.ControlType = TZADWWKO.AutoDesignWork.SelectedControlType 
         SetSelectStateOfEntity( TZADWWKO, "ESG_DetailLOD_Attribute", 0 ) 
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: OVERRIDE_ControlsForList1
**    
*************************************************************************************************/
DIALOG OPERATION
OVERRIDE_ControlsForList1( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   SHORT nRC
   
   // Override the Control Type for each selected Attribute to Text.
   FOR EACH TZADWWKO.ESG_ListLOD_Attribute 
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_ListLOD_Attribute" ) 
      IF nRC = 1
         TZADWWKO.ESG_ListLOD_Attribute.ControlType = TZADWWKO.AutoDesignWork.SelectedControlType 
         SetSelectStateOfEntity( TZADWWKO, "ESG_ListLOD_Attribute", 0 ) 
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildAutodesignGroup
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildAutodesignGroup( VIEW ViewToWindow )

   VIEW TZWINDOWL  REGISTERED AS TZWINDOWL
   VIEW TZCONTROL  REGISTERED AS TZCONTROL
   VIEW TaskLPLR   REGISTERED AS TaskLPLR
   VIEW TZZOLFLO   BASED ON LOD  TZCMLPLO
   VIEW TZADWWKO   BASED ON LOD  TZADWWKO
   VIEW AD_Base    BASED ON LOD  TZWDLGSO
   STRING ( 50 ) szListboxSymbol
   SHORT   nRC


   // Set up work data necessary for autodesigning a new or existing Group
   
   // Force recreation of the work object.
   GET VIEW TZADWWKO NAMED "TZADWWKO"
   IF RESULT >= 0
      szListboxSymbol = TZADWWKO.AutoDesignWork.SelectedListboxSymbolType    // Save the symbol value.
      DropObjectInstance( TZADWWKO )
   END
  
   // Initialize TZADWWKO

   // The TZADWWKO itself
   ACTIVATE TZADWWKO EMPTY 
   NAME VIEW TZADWWKO "TZADWWKO"
   CREATE ENTITY TZADWWKO.AutoDesignWork 
   CREATE ENTITY TZADWWKO.AutodesignSubdialog 
   CREATE ENTITY TZADWWKO.EntitySubGroup 
   InitializeL_SymbolType( TZADWWKO ) 
   TZADWWKO.AutoDesignWork.SelectedListboxSymbolType = szListboxSymbol   // Restore the original symbol value.
   
   // Default state will be resize and reposition top Groups.
   TZADWWKO.AutoDesignWork.RepositionGroupFlag = "Y"

   // Remove any existing Autodesign entries from TZWINDOWL.
   IF TZWINDOWL.AutoDesignWindow EXISTS
      DELETE ENTITY TZWINDOWL.AutoDesignWindow  
   END
   CREATE ENTITY TZWINDOWL.AutoDesignWindow 
   CREATE ENTITY TZWINDOWL.AutoDesignGroup  

   
   // Make sure AD_Base dialog is loaded.
   GET VIEW AD_Base NAMED "AD_Base"
   IF RESULT < 0
      nRC = ActivateAD_BaseL( AD_Base, ViewToWindow )
      IF nRC < 0
         RETURN nRC
      END
      NAME VIEW AD_Base "AD_Base" 
   END
   
   // Make sure that the TZZOLFLO object of Meta ViewObjRef entries exists and is sorted.
   GET VIEW TZZOLFLO NAMED "TZZOLFLO"
   IF RESULT < 0
      CreateViewFromView( TZZOLFLO, TaskLPLR )
      NAME VIEW TZZOLFLO "TZZOLFLO"
      SET CURSOR FIRST TZZOLFLO.W_MetaType WHERE TZZOLFLO.W_MetaType.Type = 9   // 9 is read view of Registered View 
   END
   OrderEntityForView( TZZOLFLO, "W_MetaDef", "Name" )
   SET CURSOR FIRST TZZOLFLO.W_MetaDef  

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildAutodesignSubgroup
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildAutodesignSubgroup( VIEW ViewToWindow )

   VIEW TZWINDOWL  REGISTERED AS TZWINDOWL
   VIEW TZCONTROL  REGISTERED AS TZCONTROL
   VIEW TZCtlHier  BASED ON LOD  TZWDLGSO
   VIEW TZCtlCopy  BASED ON LOD  TZWDLGSO
   VIEW TaskLPLR   REGISTERED AS TaskLPLR
   VIEW TZZOLFLO   BASED ON LOD  TZCMLPLO
   VIEW TZADWWKO   BASED ON LOD  TZADWWKO
   VIEW AD_Base    BASED ON LOD  TZWDLGSO
   VIEW CurrentLOD BASED ON LOD  TZZOLODO
   VIEW CurrentVOR BASED ON LOD  TZWDVORO
   STRING ( 50 ) szReturnedEntityName
   STRING ( 50 ) szControlTag
   STRING ( 1 )  szGroupType
   STRING ( 50 ) szPromptValue
   STRING ( 50 ) szWebCtrlLabelLink
   STRING ( 1 )  szMappingCompleteFlag
   STRING ( 1 )  szContainsGridFlag
   STRING ( 1 )  szDetailFound
   SHORT   nRC
   SHORT   lReturnedLevel
   SHORT   lInitialLevel
   INTEGER RowCount

   // Set up work data necessary for autodesigning an existing Group.
   
   // Force recreation of the work object.
   GET VIEW TZADWWKO NAMED "TZADWWKO"
   IF RESULT >= 0
      DropObjectInstance( TZADWWKO )
   END
   
   // Delete any VOR or LOD from a previous Autodesign Group.
   GET VIEW CurrentVOR NAMED "UpdateObjectViewRef"
   IF RESULT >= 0
      DropObjectInstance( CurrentVOR )
   END
   GET VIEW CurrentLOD NAMED "TZZOLODO_Update"
   IF RESULT >= 0
      DropObjectInstance( CurrentLOD )
   END
  
   // Initialize TZADWWKO

   // The TZADWWKO itself
   ACTIVATE TZADWWKO EMPTY 
   NAME VIEW TZADWWKO "TZADWWKO"
   CREATE ENTITY TZADWWKO.AutoDesignWork 
   CREATE ENTITY TZADWWKO.AutodesignSubdialog 
   CREATE ENTITY TZADWWKO.EntitySubGroup  
   
   // Default state will be resize and reposition top Groups.
   TZADWWKO.AutoDesignWork.RepositionGroupFlag = "Y"

   // Remove any existing Autodesign entries from TZWINDOWL.
   IF TZWINDOWL.AutoDesignWindow EXISTS
      DELETE ENTITY TZWINDOWL.AutoDesignWindow  
   END
   CREATE ENTITY TZWINDOWL.AutoDesignWindow 
   CREATE ENTITY TZWINDOWL.AutoDesignGroup  

   // Make sure AD_Base dialog is loaded.
   GET VIEW AD_Base NAMED "AD_Base"
   IF RESULT < 0
      nRC = ActivateAD_BaseL( AD_Base, ViewToWindow )
      IF nRC < 0
         RETURN nRC
      END
      NAME VIEW AD_Base "AD_Base" 
   END
   
   // Make sure that the TZZOLFLO object of Meta ViewObjRef entries exists.
   GET VIEW TZZOLFLO NAMED "TZZOLFLO"
   IF RESULT < 0
      CreateViewFromView( TZZOLFLO, TaskLPLR )
      NAME VIEW TZZOLFLO "TZZOLFLO"
      SET CURSOR FIRST TZZOLFLO.W_MetaType WHERE TZZOLFLO.W_MetaType.Type = 9   // 9 is read view of Registered View 
   END
   
   // Determine whether the current Group is for a Grid or Detail controls.
   // We also need to set up any current mapping entries.
   
   // We will first process the Group hierarchically to find if there is a Grid subcontrol anywhere.
   TZADWWKO.EntitySubGroup.GroupUpdateFlag = "Y"
   CreateViewFromView( TZCtlHier, TZCONTROL )
   DefineHierarchicalCursor( TZCtlHier, "Control" )
   NAME VIEW TZCtlHier "TZCtlHier"
   szContainsGridFlag = ""
   nRC = SetCursorNextEntityHierarchical( lReturnedLevel, szReturnedEntityName, TZCtlHier )
   lInitialLevel = lReturnedLevel
   LOOP WHILE nRC >= zCURSOR_SET AND lReturnedLevel >= lInitialLevel AND szMappingCompleteFlag = ""
      IF nRC = zCURSOR_SET_RECURSIVECHILD
         SetViewToSubobject( TZCtlHier, "CtrlCtrl" )
      END
      IF szReturnedEntityName = "ControlDef"
         szControlTag = TZCtlHier.ControlDef.Tag 
         IF szControlTag = "Grid"
            szContainsGridFlag = "Y"
         END
      END
      nRC = SetCursorNextEntityHierarchical( lReturnedLevel, szReturnedEntityName, TZCtlHier )
   END
   DropView( TZCtlHier )

   // Since this is an update of existing Group, process the Group hierarchically to process mapping entries.
   // This may be done in either one or two hierarchical loops.
   // If the Group contains a Grid, the mapping entries will be created in the first loop and the second will be skipped.
   // If the Group doesn't contain a Grid, then the 1st loop will only be done to determine the type and the second loop 
   // will be processed to create the mapping entries.
   
   // Process first loop. 
   CreateViewFromView( TZCtlHier, TZCONTROL )
   DefineHierarchicalCursor( TZCtlHier, "Control" )
   NAME VIEW TZCtlHier "TZCtlHier"
   szGroupType           = ""
   szMappingCompleteFlag = ""
   nRC = SetCursorNextEntityHierarchical( lReturnedLevel, szReturnedEntityName, TZCtlHier )
   lInitialLevel = lReturnedLevel
   LOOP WHILE nRC >= zCURSOR_SET AND lReturnedLevel >= lInitialLevel AND szMappingCompleteFlag = ""
      IF nRC = zCURSOR_SET_RECURSIVECHILD
         SetViewToSubobject( TZCtlHier, "CtrlCtrl" )
      END
      IF szReturnedEntityName = "ControlDef"
         szControlTag = TZCtlHier.ControlDef.Tag 
         IF szControlTag = "Grid"
            szGroupType = "G"
         ELSE
            // If we've come across a mapping attribute not for a Grid, we assume it's a Prompt/Detail Pair.
            IF TZCtlHier.CtrlMapLOD_Attribute EXISTS AND szContainsGridFlag = ""
               szGroupType = "P"
            END
         END
         
         // Set up mapping entries for Grid.
         IF szGroupType = "G" 
            TZADWWKO.EntitySubGroup.GroupType = "ListGroupOnly"
            TZADWWKO.EntitySubGroup.GroupUpdateFlag = "Y"
            CreateViewFromView( TZCtlCopy, TZCtlHier )
            NAME VIEW TZCtlCopy "TZCtlCopy"
            SET CURSOR FIRST TZCtlCopy.CtrlMap     // Sometimes there are 2 CtrlMap entries and the first has the mapping. 
            INCLUDE TZADWWKO.ESG_LOD_Entity FROM TZCtlCopy.CtrlMapLOD_Entity 
            SetViewToSubobject( TZCtlCopy, "CtrlCtrl" )
            FOR EACH TZCtlCopy.Control 
               IF TZCtlCopy.CtrlMap EXISTS
                  INCLUDE TZADWWKO.ESG_ListLOD_Attribute FROM TZCtlCopy.CtrlMapLOD_Attribute 
                  TZADWWKO.ESG_ListLOD_Attribute.PromptValue = TZCtlCopy.Control.Text 
                  SET CURSOR FIRST TZCtlCopy.WebControlProperty WHERE TZCtlCopy.WebControlProperty.Name = "Edit"
                  IF RESULT >= zCURSOR_SET
                     TZADWWKO.ESG_ListLOD_Attribute.ControlType = "EditBox"
                  ELSE
                     TZADWWKO.ESG_ListLOD_Attribute.ControlType = "Text"
                  END 
               END
            END
            
            // Activate the current VOR and LOD LOD which are used for potential mapping.
            // Also include Update VOR in TZADWWKO.
            ResetViewFromSubobject( TZCtlCopy )
            SET CURSOR FIRST TZZOLFLO.W_MetaDef WHERE TZZOLFLO.W_MetaDef.Name = TZCtlCopy.CtrlMapView.Name  
            INCLUDE TZADWWKO.W_MetaDefUpdateView FROM TZZOLFLO.W_MetaDef
            nRC = ActivateMetaOI_ByName( ViewToWindow, CurrentVOR, 0, zREFER_VOR_META, zSINGLE, TZADWWKO.W_MetaDefUpdateView.Name, 0 )
            NAME VIEW CurrentVOR "UpdateObjectViewRef"
            nRC = ActivateMetaOI_ByName( ViewToWindow, CurrentLOD, 0, zREFER_LOD_META, zSINGLE, CurrentVOR.LOD.Name, 0 )
            NAME VIEW CurrentLOD "TZZOLODO_Update"
            
            // Activate Grid LOD and build potential list of sttributes.
            BuildAD_GroupPotAttrList( TZADWWKO, CurrentLOD, TZCtlCopy.CtrlMapLOD_Entity.Name, "" )
            
            szMappingCompleteFlag = "Y"
            DropView( TZCtlCopy )
         END 
      END
      nRC = SetCursorNextEntityHierarchical( lReturnedLevel, szReturnedEntityName, TZCtlHier )
   END
   DropView( TZCtlHier )
   
   // Process second loop if mapping is Prompt/Control pairs.
   // The logic is that any Text Control with a WebCtrlLabelLink value will be considered the Prompts and
   // the next Control will be considered to be the mapping Control.
   IF szGroupType = "P" 
      
      CreateViewFromView( TZCtlHier, TZCONTROL )
      DefineHierarchicalCursor( TZCtlHier, "Control" )
      NAME VIEW TZCtlHier "TZCtlHier"
      szMappingCompleteFlag = ""
      nRC = SetCursorNextEntityHierarchical( lReturnedLevel, szReturnedEntityName, TZCtlHier )
      lInitialLevel = lReturnedLevel
      LOOP WHILE nRC >= zCURSOR_SET AND lReturnedLevel >= lInitialLevel AND szMappingCompleteFlag = ""
         IF nRC = zCURSOR_SET_RECURSIVECHILD
            SetViewToSubobject( TZCtlHier, "CtrlCtrl" )
         END
         IF szReturnedEntityName = "ControlDef"
            szControlTag = TZCtlHier.ControlDef.Tag 
            IF szControlTag = "Text"
               szWebCtrlLabelLink = TZCtlHier.Control.WebCtrlLabelLink 
               IF szWebCtrlLabelLink != ""
                  // This Control is the Prompt for the pair.
                  CreateViewFromView( TZCtlCopy, TZCtlHier )
                  NAME VIEW TZCtlCopy "TZCtlCopy"
                  szPromptValue = TZCtlCopy.Control.Text 
                  DropView( TZCtlCopy )
                  
                  // Continue Hier Loop looking for the Detail Control.
                  nRC = SetCursorNextEntityHierarchical( lReturnedLevel, szReturnedEntityName, TZCtlHier )
                  szDetailFound = ""
                  LOOP WHILE nRC >= zCURSOR_SET AND lReturnedLevel >= lInitialLevel AND szDetailFound = ""
                     IF nRC = zCURSOR_SET_RECURSIVECHILD
                        SetViewToSubobject( TZCtlHier, "CtrlCtrl" )
                        
                        // Check if this is a Control with mapping.
                        CreateViewFromView( TZCtlCopy, TZCtlHier )
                        NAME VIEW TZCtlCopy "TZCtlCopy"
                        IF TZCtlCopy.CtrlMap EXISTS
                           szDetailFound = "F"
                           INCLUDE TZADWWKO.ESG_ListLOD_Attribute FROM TZCtlCopy.CtrlMapLOD_Attribute 
                           TZADWWKO.ESG_ListLOD_Attribute.PromptValue = szPromptValue
                           TZADWWKO.ESG_ListLOD_Attribute.ControlType = TZCtlCopy.ControlDef.Tag 
                           
                           // If necessary, activate the current VOR and LOD LOD which are used for potential mapping.
                           // Also include Update VOR in TZADWWKO.
                           GET VIEW CurrentVOR NAMED "UpdateObjectViewRef"
                           IF RESULT < 0
                              SET CURSOR FIRST TZZOLFLO.W_MetaDef WHERE TZZOLFLO.W_MetaDef.Name = TZCtlCopy.CtrlMapView.Name  
                              INCLUDE TZADWWKO.W_MetaDefUpdateView FROM TZZOLFLO.W_MetaDef
                              nRC = ActivateMetaOI_ByName( ViewToWindow, CurrentVOR, 0, zREFER_VOR_META, zSINGLE, TZADWWKO.W_MetaDefUpdateView.Name, 0 )
                              NAME VIEW CurrentVOR "UpdateObjectViewRef"
                              nRC = ActivateMetaOI_ByName( ViewToWindow, CurrentLOD, 0, zREFER_LOD_META, zSINGLE, CurrentVOR.LOD.Name, 0 )
                              NAME VIEW CurrentLOD "TZZOLODO_Update"
                           END
                        END
                        DropView( TZCtlCopy )
                     END
                     nRC = SetCursorNextEntityHierarchical( lReturnedLevel, szReturnedEntityName, TZCtlHier )
                  END 
               END
            END
         END
         nRC = SetCursorNextEntityHierarchical( lReturnedLevel, szReturnedEntityName, TZCtlHier )
      END
      DropView( TZCtlHier )
      
      // Activate Detail LOD and build potential list of sttributes.
      BuildAD_GroupPotAttrList( TZADWWKO, CurrentLOD, CurrentLOD.LOD_EntityParent.Name, "" )
   END
   
   // Set Work Object Group Type.
   IF szGroupType = "P" 
      TZADWWKO.EntitySubGroup.GroupType = "DetailGroup"
   ELSE
      TZADWWKO.EntitySubGroup.GroupType = "ListGroupOnly"
   END

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_AD_GroupSpecification
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_AD_GroupSpecification( VIEW ViewToWindow )

   VIEW TZADWWKO   REGISTERED AS TZADWWKO
   VIEW SearchLOD  BASED ON LOD  TZZOLODO
   VIEW IncludeLOD BASED ON LOD  TZZOLODO
   STRING ( 50 ) szLOD_Name
   SHORT nRC
   
   // The Groupd for Dashboard Entry has no mapping, so we'll skip the initialization code that the other Groups use.
   IF TZADWWKO.EntitySubGroup.GroupType = "DetailGroupDBE"
      CreateTemporalSubobjectVersion( TZADWWKO, "EntitySubGroup" )
      SetWindowActionBehavior( ViewToWindow, zWAB_StartModalSubwindow, "TZADWEBD", "AD_GroupDashboardSpec" )
      RETURN 
   END
   
   // Set up work areas for Groups other than Dashboard Entry.

   // Reuse the operation from Multi-Group Page.
   nRC = GOTO_AD_GroupUpdate( ViewToWindow )
   IF nRC < 0
      RETURN 
   END
   
   CreateTemporalSubobjectVersion( TZADWWKO, "EntitySubGroup" )
   
   // Recreate potential attribute lists for existing object entries.
   IF TZADWWKO.ESG_ListSearchW_MetaDef EXISTS 
      szLOD_Name = TZADWWKO.ESG_ListSearchW_MetaDef.Name 
      nRC = ActivateMetaOI_ByName( ViewToWindow, SearchLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
      NAME VIEW SearchLOD "ESGL_SearchLOD"
   
      // Build the ESG_FlatListPotentialAttribute entries from the subobject starting with LOD_EntityParent.
      BuildAD_GroupPotAttrList( TZADWWKO, SearchLOD, SearchLOD.LOD_EntityParent.Name, "3" )
   END
   IF TZADWWKO.ESG_ListIncludeW_MetaDef EXISTS 
      szLOD_Name = TZADWWKO.ESG_ListIncludeW_MetaDef.Name 
      nRC = ActivateMetaOI_ByName( ViewToWindow, IncludeLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
      NAME VIEW IncludeLOD "ESGL_IncludeLOD"
      TZADWWKO.EntitySubGroup.ReturnedObjectRootEntityName = IncludeLOD.LOD_EntityParent.Name 
   
      // Build the ESG_FlatListPotentialAttribute entries for the Potential Select List Attributes.
      BuildAD_GroupPotAttrList( TZADWWKO, IncludeLOD, IncludeLOD.LOD_EntityParent.Name, "2" )
   END

END

/*************************************************************************************************
** 
**    OPERATION: AUTODESIGN_Group
**
*************************************************************************************************/
DIALOG OPERATION
AUTODESIGN_Group( VIEW ViewToWindow )

   VIEW TZADWWKO   REGISTERED AS TZADWWKO
   VIEW TZWINDOWL  REGISTERED AS TZWINDOWL
   VIEW TZWINDOW   REGISTERED AS TZWINDOW
   VIEW TZCONTROL  REGISTERED AS TZCONTROL
   VIEW TZPESRCO   REGISTERED AS TZPESRCO
   VIEW TaskLPLR   REGISTERED AS TaskLPLR
   VIEW TZCtlHier  BASED ON LOD  TZWDLGSO
   VIEW TZCtlCopy  BASED ON LOD  TZWDLGSO
   VIEW AD_Base    BASED ON LOD  TZWDLGSO
   VIEW AD_BaseCtl BASED ON LOD  TZWDLGSO
   VIEW UpdateLOD  BASED ON LOD  TZZOLODO
   VIEW TZWDVORO   BASED ON LOD  TZWDVORO
   VIEW CurrentLOD BASED ON LOD  TZZOLODO
   VIEW CurrentVOR BASED ON LOD  TZWDVORO
   STRING ( 50 )  szGroupType
   STRING ( 50 )  szGroupName
   STRING ( 50 )  szLOD_ListEntityName
   STRING ( 50 )  szReturnedEntityName
   STRING ( 50 )  szViewName
   STRING ( 1 )   szGridFlag
   STRING ( 500 ) szHeaderText
   INTEGER nRC
   INTEGER GroupSizeX
   INTEGER GroupSizeY
   INTEGER Count
   INTEGER nNextPositionY
   INTEGER OverrideWidth
   SHORT   lReturnedLevel
   SHORT   lInitialLevel
   
   // Generate a list box or group of display/update controls based on the GroupType selected.
   
   // Make sure at least one Attribute was selected.
   IF TZADWWKO.ESG_ListLOD_Attribute DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Autodesign Window Group",
                   "At least one Attribute must be selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   
   // Make sure Group Type is only ListGroupOnly or DetailGroup.
   szGroupType = TZADWWKO.EntitySubGroup.GroupType 
   TraceLineS( "*** Group Type: ", szGroupType )
   IF szGroupType != "ListGroupOnly" AND szGroupType != "DetailGroup" 
      MessageSend( ViewToWindow, "", "Autodesign Window Group",
                   "A Group Type of List Group Only or Detail Group must be selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   
   GET VIEW AD_Base NAMED "AD_Base"
   GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
   
   // Accept the current Control in case it is versioned.
   AcceptSubobject( TZCONTROL, "Control" )
   
   // Make sure the Dialog has a ViewObjRef for the LOD.
   SET CURSOR FIRST TZWINDOW.ViewObjRef WHERE TZWINDOW.ViewObjRef.Name = UpdateLOD.LOD.Name 
   IF RESULT < 0
      // Activate the Registered View and include it in the Dialog. It will have been created when the object was created.
      nRC = ActivateMetaOI_ByName( ViewToWindow, TZWDVORO, 0, zSOURCE_VOR_META, zSINGLE, TZADWWKO.W_MetaDefUpdateObject.Name, 0 )
      NAME VIEW TZWDVORO "UpdateObjectViewRef"
      INCLUDE TZWINDOW.ViewObjRef FROM TZWDVORO.ViewObjRef 
      DropObjectInstance( TZWDVORO )
   END 
   
   IF szGroupType = "DetailGroup"
   
      // Detail Group is made up of Prompt / Detail pairs.
   
      // To reuse operation GenDetailGrpBootstrap, we must convert the ESG_ListLOD_Attribute entries to DetailMappingLOD_Attribute entries.
      FOR EACH TZADWWKO.DetailMappingLOD_Attribute 
         EXCLUDE TZADWWKO.DetailMappingLOD_Attribute  NONE 
      END
      FOR EACH TZADWWKO.ESG_ListLOD_Attribute 
         INCLUDE TZADWWKO.DetailMappingLOD_Attribute FROM TZADWWKO.ESG_ListLOD_Attribute
         SetMatchingAttributesByName( TZADWWKO, "DetailMappingLOD_Attribute", TZADWWKO, "ESG_ListLOD_Attribute", zSET_NULL )
         EXCLUDE TZADWWKO.ESG_ListLOD_Attribute NONE 
      END
      
      // If this is update of an existing Group, position on the card-body subgroup as necessary.
      IF TZADWWKO.EntitySubGroup.GroupUpdateFlag = "Y"
         IF TZCONTROL.Control.CSS_Class = "card"
            // Step down 2 levels.
            SET CURSOR LAST TZCONTROL.CtrlCtrl
            SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
            SET CURSOR LAST TZCONTROL.CtrlCtrl
            SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
         ELSE
            IF TZCONTROL.Control.CSS_Class = "collapse show"
               // Step down 1 level.
               SET CURSOR LAST TZCONTROL.CtrlCtrl
               SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
            END
         END
      ELSE
      
         // For a new Group, copy a Bootstrap foundation Group with subgroups and modify the header.
         SET CURSOR FIRST AD_Base.Window WHERE AD_Base.Window.Tag = "GroupDetailOrListTemplates"
         SET CURSOR FIRST AD_Base.Control WHERE AD_Base.Control.Tag = "GroupDetail" 
         DELETE ENTITY TZCONTROL.Control NONE    // Delete the new Control as it will be replaced by the Clone.
         nRC = CloneControlAD( ViewToWindow, TZCONTROL, TZWINDOWL, AD_Base )  
         
         // Execute operation to convert Header and Area Group Control data.
         // Make sure we're positioned on the Header Text Group.
         SET CURSOR FIRST TZCONTROL.CtrlCtrl 
         SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
         ConvertHeaderText( TZADWWKO, TZCONTROL )
 
         // Step down to Control that will hold the Prompt/Detail pairs.
         SET CURSOR LAST TZCONTROL.Control  
         SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
      END
      
      // Go to build the Prompt / Detail pairs. However, make sure that TZADWWKO.EntitySubGroup.GroupAreaName is wet
      // because it's used for generating names.
      IF TZADWWKO.EntitySubGroup.GroupAreaName = ""
         TZADWWKO.EntitySubGroup.GroupAreaName = TZADWWKO.DetailMappingLOD_Entity.Name 
      END
      GenDetailGrpBootstrap( TZADWWKO, TZCONTROL, TZWINDOWL, "UpdateGroup" )
      
      // Resize and reposition the Group Boxes on the Window
      ResizeReposGroupBoxes( TZADWWKO, TZWINDOWL )
   ELSE
   IF szGroupType = "ListGroupOnly"
      
      // List Group is made up of Grid with subcontrols.
       
      // Initialization is different betwee existing Grid and new Grid
      IF TZADWWKO.EntitySubGroup.GroupUpdateFlag = "Y"
         // If this is an upate of an existing Group, position on the Grid Control.
         CreateViewFromView( TZCtlHier, TZCONTROL )
         DefineHierarchicalCursor( TZCtlHier, "Control" )
         NAME VIEW TZCtlHier "TZCtlHier"
         szGridFlag = ""
         lInitialLevel = 0
         nRC = SetCursorNextEntityHierarchical( lReturnedLevel, szReturnedEntityName, TZCtlHier )
         LOOP WHILE nRC >= zCURSOR_SET AND lReturnedLevel >= lInitialLevel AND szGridFlag = ""
            IF nRC = zCURSOR_SET_RECURSIVECHILD
               SetViewToSubobject( TZCtlHier, "CtrlCtrl" )
               IF TZCtlHier.ControlDef.Tag = "Grid"
                  szGridFlag = "Y"
                  CreateViewFromView( TZCtlCopy, TZCtlHier )
                  NAME VIEW  TZCtlCopy "TZCtlCopy"
               END
            END
            nRC = SetCursorNextEntityHierarchical( lReturnedLevel, szReturnedEntityName, TZCtlHier )
         END
         DropView( TZCtlHier )
         
         // Delete all GridCtrl entries under the Grid except for the first.
         SetViewToSubobject( TZCtlCopy, "CtrlCtrl" )
         Count = 0
         FOR EACH TZCtlCopy.Control 
            Count = Count + 1
            IF Count > 1 AND TZCtlCopy.CtrlMap EXISTS
               DELETE ENTITY TZCtlCopy.Control NONE
            END
         END
         ResetViewFromSubobject( TZCtlCopy )    // Back up to Grid
       
      ELSE
      
         // For a new Group, copy a Bootstrap foundation Group with subgroups and modify the header.
         SET CURSOR FIRST AD_Base.Window WHERE AD_Base.Window.Tag = "GroupDetailOrListTemplates"
         SET CURSOR FIRST AD_Base.Control WHERE AD_Base.Control.Tag = "GroupList" 
         DELETE ENTITY TZCONTROL.Control NONE    // Delete the new Control as it will be replaced by the Clone.
         nRC = CloneControlAD( ViewToWindow, TZCONTROL, TZWINDOWL, AD_Base )  
         
         // Execute operation to convert Header and Area Group Control data.
         // Make sure we're positioned on the Header Text Group.
         SET CURSOR FIRST TZCONTROL.CtrlCtrl 
         SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
         ConvertHeaderText( TZADWWKO, TZCONTROL )
 
         // Step down to Control that will hold the Prompt/Detail pairs.
         ResetViewFromSubobject( TZCONTROL )  // Step back to main Group
      END
      
      // Go to make mapping changes to the Grid. We should be positioned on the Grid Control itself.
      szViewName           = TZADWWKO.W_MetaDefUpdateView.Name 
      szLOD_ListEntityName = TZADWWKO.ESG_LOD_Entity.Name 
      AddListMapping( TZADWWKO, TZCONTROL, TZWINDOW, UpdateLOD, szLOD_ListEntityName, szViewName, "ESG_List" )
      
      // Resize and reposition the Group Boxes on the Window
      ResizeReposGroupBoxes( TZADWWKO, TZWINDOWL )
   END
   END
   
   // Drop object TZADWWKO so it will be created new next time.
   // Also drop other temporary objects.
   DropObjectInstance( TZADWWKO )
   GET VIEW CurrentVOR NAMED "UpdateObjectViewRef"
   IF RESULT >= 0
      DropObjectInstance( CurrentVOR )
   END
   IF RESULT >= 0
      GET VIEW CurrentLOD NAMED "TZZOLODO_Update"
   END
   DropObjectInstance( CurrentLOD )
   
   // Reposition and Resize all Group Controls.
   // Resize should be done above.
   //ResizeReposGroupBoxes( TZADWWKO, TZWINDOWL )
   
   // Rename some Controls to avoid duplicate Tags.
   SET CURSOR FIRST TZWINDOWL.Control
   RenameAD_Controls( TZADWWKO, TZWINDOWL ) 
   
   // Tell the Painter to refresh the control.
   RepaintWindowControls( ViewToWindow )
   
END

/*************************************************************************************************
**    
**    OPERATION: CANCEL_AutoDesignGroup
**    
*************************************************************************************************/
DIALOG OPERATION
CANCEL_AutoDesignGroup( VIEW ViewToWindow )

   VIEW TZADWWKO   REGISTERED AS TZADWWKO
   VIEW TZCONTROL  REGISTERED AS TZCONTROL
   VIEW CurrentLOD    BASED ON LOD  TZZOLODO
   VIEW CurrentVOR BASED ON LOD  TZWDVORO
   
   CancelSubobject( TZCONTROL, "Control" )
   DropObjectInstance( TZADWWKO )
   GET VIEW CurrentVOR NAMED "UpdateObjectViewRef"
   IF RESULT >= 0
      DropObjectInstance( CurrentVOR )
   END
   GET VIEW CurrentLOD NAMED "TZZOLODO_Update"
   IF RESULT >= 0
      DropObjectInstance( CurrentLOD )
   END
   
END

/*************************************************************************************************
**    
**    OPERATION: SELECT_AutodesignGroupObject
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_AutodesignGroupObject( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TaskLPLR  REGISTERED AS TaskLPLR
   VIEW UpdateLOD BASED ON LOD  TZZOLODO
   VIEW UpdateVOR BASED ON LOD  TZWDVORO
   STRING ( 50 ) szVOR_Name
   STRING ( 50 ) szLOD_Name
   SHORT nRC
   
   // Activate the LOD for the selected Object View and name it TZZOLODO_Update. 
   GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
   IF RESULT >= 0
      DropObjectInstance( UpdateLOD )
   END
   
   // Activate the selected Object View.
   szVOR_Name = TZADWWKO.W_MetaDefUpdateView.Name 
   nRC = ActivateMetaOI_ByName( ViewToWindow, UpdateVOR, 0, zREFER_VOR_META, zSINGLE, szVOR_Name, 0 )
   NAME VIEW UpdateVOR "UpdateObjectViewRef"
   
   // Next Activate the LOD for the View.
   szLOD_Name = UpdateVOR.LOD.Name 
   nRC = ActivateMetaOI_ByName( ViewToWindow, UpdateLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
   NAME VIEW UpdateLOD "TZZOLODO_Update"
   
   // Include the Object Meta, which may be used later.
   SET CURSOR FIRST TaskLPLR.W_MetaType  WHERE TaskLPLR.W_MetaType.Type = 7   // Read view of LOD
   SET CURSOR FIRST TaskLPLR.W_MetaDef   WHERE TaskLPLR.W_MetaDef.Name  = UpdateLOD.LOD.Name   
   IF TZADWWKO.W_MetaDefUpdateObject EXISTS 
      EXCLUDE TZADWWKO.W_MetaDefUpdateObject
   END
   INCLUDE TZADWWKO.W_MetaDefUpdateObject FROM TaskLPLR.W_MetaDef 
   
   // Build the list of selectable LOD Entities for a potential list box.
   // We have one entry in the list for each Entity in the Update Object.
   // First remove any current entries then rebuild them.
   FOR EACH TZADWWKO.PotentialLOD_Entity 
      EXCLUDE TZADWWKO.PotentialLOD_Entity NONE 
   END
   FOR EACH UpdateLOD.LOD_Entity 
      INCLUDE TZADWWKO.PotentialLOD_Entity FROM UpdateLOD.LOD_Entity 
   END
   
   // Delete any current potential attributes and then go to build them.
   // All Attributes of the selected object are listed for GroupUpdate but only subordinate attributes for lists.
   IF TZADWWKO.EntitySubGroup.GroupType = "DetailGroupUpdate"
      BuildAD_GroupPotAttrList( TZADWWKO, UpdateLOD, UpdateLOD.LOD_EntityParent.Name, "" )
   ELSE
      IF TZADWWKO.ESG_LOD_Entity EXISTS
         BuildAD_GroupPotAttrList( TZADWWKO, UpdateLOD, TZADWWKO.ESG_LOD_Entity.Name, "" )
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: OPERATION
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_AutodesignGroupTemplate( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   VIEW AD_Base  BASED ON LOD  TZWDLGSO 
   VIEW AD_Base2 BASED ON LOD  TZWDLGSO 
   STRING ( 50 ) szGroupType
   
   // Eliminated 7/17/2023 because it is no longer used.
   // If the Group Type is "DetailGroupUpdate" and the Group selected has a Text/Control pair, set the 
   // CSS_Class specification entries for Prompt and Control from those values.
   /*IF TZADWWKO.EntitySubGroup.GroupType = "DetailGroupUpdate"
      GET VIEW AD_Base NAMED "AD_Base"
      CreateViewFromView(AD_Base2, AD_Base )
      IF AD_Base2.CtrlCtrl EXISTS
         SetViewToSubobject( AD_Base2, "CtrlCtrl" )
         IF AD_Base2.CtrlCtrl EXISTS
            SetViewToSubobject( AD_Base2, "CtrlCtrl" )
            IF AD_Base2.CtrlCtrl EXISTS
               SetViewToSubobject( AD_Base2, "CtrlCtrl" )
            END
         END
      END
      SET CURSOR FIRST AD_Base2.Control WHERE AD_Base2.ControlDef.Tag = "Text" 
      IF RESULT >= zCURSOR_SET
         TZADWWKO.EntitySubGroup.CSS_ClassForPrompt  = AD_Base2.Control.CSS_Class 
         SET CURSOR NEXT AD_Base2.Control
         TZADWWKO.EntitySubGroup.CSS_ClassForControl = AD_Base2.Control.CSS_Class
      END
      DropView( AD_Base2 )
   END*/

END

/*************************************************************************************************
**    
**    OPERATION: SET_PromptCSS_ClassForAttributes
**    
*************************************************************************************************/
DIALOG OPERATION
SET_PromptCSS_ClassForAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   STRING ( 50 ) szCSS_ClassValue
   
   // Set all  to the current value specified.
   szCSS_ClassValue = TZADWWKO.EntitySubGroup.CSS_Class 
   FOR EACH TZADWWKO.ESG_ListLOD_Attribute 
      TZADWWKO.ESG_ListLOD_Attribute.CSS_ClassForPrompt = szCSS_ClassValue
   END

END

/*************************************************************************************************
**    
**    OPERATION: SET_CtrlCSS_ClassForAttributes
**    
*************************************************************************************************/
DIALOG OPERATION
SET_CtrlCSS_ClassForAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   STRING ( 50 ) szCSS_ClassValue
   
   // Set all  to the current value specified.
   szCSS_ClassValue = TZADWWKO.EntitySubGroup.CSS_Class 
   FOR EACH TZADWWKO.ESG_ListLOD_Attribute 
      TZADWWKO.ESG_ListLOD_Attribute.CSS_ClassForControl = szCSS_ClassValue
   END

END

/*************************************************************************************************
**    
**    OPERATION: CloneControlAD
**    
*************************************************************************************************/
LOCAL OPERATION
CloneControlAD( VIEW ViewToWindow,
                VIEW TZCONTROL  BASED ON LOD TZWDLGSO,
                VIEW TZWINDOWL  BASED ON LOD TZWDLGSO,
                VIEW AD_BaseCtl BASED ON LOD TZWDLGSO )

   VIEW TZPESRCO REGISTERED AS TZPESRCO
   INTEGER nRC

   // Clone the Control from AD_BaseCtl into TZCONTROL, without copying any mapping.
   
   // Copy this Control.
   CreateMetaEntity( ViewToWindow, TZCONTROL, "Control", zPOS_AFTER )
   SetMatchingAttributesByName( TZCONTROL,  "Control",
                                AD_BaseCtl, "Control", zSET_NULL )
   SET CURSOR FIRST TZPESRCO.ControlDef WHERE TZPESRCO.ControlDef.Tag = AD_BaseCtl.ControlDef.Tag 
   INCLUDE TZCONTROL.ControlDef FROM TZPESRCO.ControlDef 
   FOR EACH AD_BaseCtl.CtrlMap 
      CreateMetaEntity( ViewToWindow, TZCONTROL, "CtrlMap", zPOS_AFTER )
      SetMatchingAttributesByName( TZCONTROL,  "CtrlMap",
                                   AD_BaseCtl, "CtrlMap", zSET_NULL )
   END
   FOR EACH AD_BaseCtl.WebControlProperty 
      CreateMetaEntity( ViewToWindow, TZCONTROL, "WebControlProperty", zPOS_AFTER )
      SetMatchingAttributesByName( TZCONTROL,  "WebControlProperty",
                                   AD_BaseCtl, "WebControlProperty", zSET_NULL )
   END
   
   // Clone each Event, as long as there is an Action.
   FOR EACH AD_BaseCtl.Event
      IF AD_BaseCtl.EventAct EXISTS AND AD_BaseCtl.EventAct.Tag != ""
         SET CURSOR FIRST TZWINDOWL.Action WHERE TZWINDOWL.Action.Tag = AD_BaseCtl.EventAct.Tag
         IF RESULT < zCURSOR_SET
            CreateMetaEntity( ViewToWindow, TZWINDOWL, "Action", zPOS_AFTER )
            SetMatchingAttributesByName( TZWINDOWL,  "Action",
                                         AD_BaseCtl, "EventAct", zSET_NULL )
         END
         CreateMetaEntity( ViewToWindow, TZCONTROL, "Event", zPOS_AFTER )
         SetMatchingAttributesByName( TZCONTROL,  "Event",
                                      AD_BaseCtl, "Event", zSET_NULL )
         IncludeSubobjectFromSubobject( TZCONTROL, "EventAct",
                                        TZWINDOWL, "Action", zPOS_AFTER )
      END
   END
   
   // Clone subcontrols recursively.
   FOR EACH AD_BaseCtl.CtrlCtrl
      SetViewToSubobject( AD_BaseCtl, "CtrlCtrl" )
      SetViewToSubobject( TZCONTROL, "CtrlCtrl" ) 
      nRC = CloneControlAD( ViewToWindow, TZCONTROL, TZWINDOWL, AD_BaseCtl )
      ResetViewFromSubobject( AD_BaseCtl )
      ResetViewFromSubobject( TZCONTROL )
      IF nRC < 0
         RETURN nRC
      END
   END
   
END

/*************************************************************************************************
**    
**    OPERATION: LIST_AllLOD_FlatAttributes
**    
*************************************************************************************************/
DIALOG OPERATION
LIST_AllLOD_FlatAttributes( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW UpdateLOD BASED ON LOD  TZZOLODO
   
   // Remove current list of ESG_FlatListPotentialAttribute entries and recreate with attributes in LOD.
   GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
   BuildAD_GroupPotAttrList( TZADWWKO, UpdateLOD, UpdateLOD.LOD_EntityParent.Name, "" )

END

/*************************************************************************************************
**    
**    OPERATION: SET_AD_AttributeAsRangeFrom
**    
*************************************************************************************************/
DIALOG OPERATION
SET_AD_AttributeAsRangeFrom( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   
   // Set the two Range values in FlatSelectedSearchAttribute from those in ESG_FlatListPotentialAttribute and
   // indicate the type is "From".
   
   // Make sure that Data Types match between source and target.
   IF TZADWWKO.FlatSelectedSearchAttribute.DataType != TZADWWKO.ESG_FlatDomain.DataType 
      MessageSend( ViewToWindow, "", "Set Range Value",
                   "The Data Types of source and target do not match.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   
   // Make sure that Entity Names match between source and target.
   IF TZADWWKO.FlatSelectedSearchAttribute.EntityName != TZADWWKO.ESG_FlatListPotentialAttribute.EntityName 
      MessageSend( ViewToWindow, "", "Set Range Value",
                   "The Entity Names of source and target do not match.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   
   // Set values in target.
   TZADWWKO.FlatSelectedSearchAttribute.RangeTargetAttributeName = TZADWWKO.ESG_FlatListPotentialAttribute.AttributeName 
   TZADWWKO.FlatSelectedSearchAttribute.RangeFromToType          = "From"

END

/*************************************************************************************************
**    
**    OPERATION: SET_AD_AttributeAsRangeTo
**    
*************************************************************************************************/
DIALOG OPERATION
SET_AD_AttributeAsRangeTo( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   
   // Set the two Range values in FlatSelectedSearchAttribute from those in ESG_FlatListPotentialAttribute and
   // indicate the type is "To".
   
   // Make sure that Data Types match between source and target.
   IF TZADWWKO.FlatSelectedSearchAttribute.DataType != TZADWWKO.ESG_FlatDomain.DataType 
      MessageSend( ViewToWindow, "", "Set Range Value",
                   "The Data Types of source and target do not match.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   
   // Make sure that Entity Names match between source and target.
   IF TZADWWKO.FlatSelectedSearchAttribute.EntityName != TZADWWKO.ESG_FlatListPotentialAttribute.EntityName 
      MessageSend( ViewToWindow, "", "Set Range Value",
                   "The Entity Names of source and target do not match.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   
   // Set values in target.
   TZADWWKO.FlatSelectedSearchAttribute.RangeTargetAttributeName = TZADWWKO.ESG_FlatListPotentialAttribute.AttributeName 
   TZADWWKO.FlatSelectedSearchAttribute.RangeFromToType          = "To"

END

/*************************************************************************************************
**    
**    OPERATION: REMOVE_AD_AttributeAsRange
**    
*************************************************************************************************/
DIALOG OPERATION
REMOVE_AD_AttributeAsRange( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   
   // Remove the Range data from the FlatSelectedSearchAttribute entry.
   TZADWWKO.FlatSelectedSearchAttribute.RangeTargetAttributeName = ""
   TZADWWKO.FlatSelectedSearchAttribute.RangeFromToType          = ""

END

/*************************************************************************************************
**
**    OPERATION: SELECT_FindReturnedListAttribs
**
*************************************************************************************************/
DIALOG OPERATION
SELECT_FindReturnedListAttribs( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TZADWWKO2 BASED ON LOD  TZADWWKO
   SHORT   nRC
   
   // Copy selected attributes from ESG_FlatListPotentialAttribute2 entries to FlatSelectedSearchAttribute entries at the current postiion..
   CreateViewFromView( TZADWWKO2, TZADWWKO )
   FOR EACH TZADWWKO.ESG_FlatListPotentialAttribute2 
      nRC = GetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute2" )
      IF nRC = 1 
         SET CURSOR FIRST TZADWWKO2.FlatSelectedListAttribute 
                    WHERE TZADWWKO2.FlatSelectedListAttribute.EntityName    = TZADWWKO.ESG_FlatListPotentialAttribute2.EntityName  
                      AND TZADWWKO2.FlatSelectedListAttribute.AttributeName = TZADWWKO.ESG_FlatListPotentialAttribute2.AttributeName 
         IF RESULT < zCURSOR_SET
            CREATE ENTITY TZADWWKO.FlatSelectedListAttribute  
            INCLUDE TZADWWKO.FlatListLOD_Attribute FROM TZADWWKO.ESG_FlatLOD_Attribute 
            TZADWWKO.FlatSelectedListAttribute.EntityName    = TZADWWKO.ESG_FlatListPotentialAttribute2.EntityName 
            TZADWWKO.FlatSelectedListAttribute.AttributeName = TZADWWKO.ESG_FlatListPotentialAttribute2.AttributeName 
            // We will use the list title value if it exists. Otherwise, we will use the Prompt value.
            IF TZADWWKO.ESG_FlatListPotentialAttribute2.ListTitleValue != ""
               TZADWWKO.FlatSelectedListAttribute.PromptValue  = TZADWWKO.ESG_FlatListPotentialAttribute2.ListTitleValue 
               TZADWWKO.FlatSelectedListAttribute.PromptLength = TZADWWKO.ESG_FlatListPotentialAttribute2.ListTitleLength 
            ELSE
               TZADWWKO.FlatSelectedListAttribute.PromptValue  = TZADWWKO.ESG_FlatListPotentialAttribute2.PromptValue 
               TZADWWKO.FlatSelectedListAttribute.PromptLength = TZADWWKO.ESG_FlatListPotentialAttribute2.PromptLength 
            END
            TZADWWKO.FlatSelectedListAttribute.ControlType  = TZADWWKO.ESG_FlatListPotentialAttribute2.ControlType 
            TZADWWKO.FlatSelectedListAttribute.ControlWidth = TZADWWKO.ESG_FlatListPotentialAttribute2.ControlWidth 
         END
         SetSelectStateOfEntity( TZADWWKO, "ESG_FlatListPotentialAttribute2", 0 )
      END
   END
   DropView( TZADWWKO2 )

END

/*************************************************************************************************
**
**    OPERATION: REMOVE_FindReturnedListAttribs
**
*************************************************************************************************/
DIALOG OPERATION
REMOVE_FindReturnedListAttribs( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   SHORT nRC

   // Remove any selected Selected entries.
   FOR EACH TZADWWKO.FlatSelectedListAttribute 
      nRC = GetSelectStateOfEntity( TZADWWKO, "FlatSelectedListAttribute" )
      IF nRC = 1
         DELETE ENTITY TZADWWKO.FlatSelectedListAttribute NONE
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: InitializeAD_WorkObjectReg
**    
*************************************************************************************************/
LOCAL OPERATION
InitializeAD_WorkObjectReg( VIEW ViewToWindow )

   VIEW TZWINDOWL REGISTERED AS TZWINDOWL
   VIEW TZCONTROL REGISTERED AS TZCONTROL
   VIEW TaskLPLR  REGISTERED AS TaskLPLR
   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TempCtrl  BASED ON LOD  TZWDLGSO
   VIEW TZZOLFLO  BASED ON LOD  TZCMLPLO
   VIEW UpdateLOD BASED ON LOD  TZZOLODO
   VIEW UpdateVOR BASED ON LOD  TZWDVORO
   STRING ( 20 ) szControlDefTag
   STRING ( 20 ) szControlType
   STRING ( 50 ) szViewName
   STRING ( 50 ) szLOD_Name
   STRING ( 50 ) szTextPrompt
   STRING ( 50 ) szTextCSS_Class
   INTEGER Count
   SHORT   nRC

   // Set up work data for "Regular Autodesign Group".
   // Also build mapping data for any existing Controls.

   // The autodesign work objects need to be set up.
   // Default state will be resize and reposition top Groups.
   TZADWWKO.AutoDesignWork.RepositionGroupFlag = "Y"
   
   // GroupAreaName is set from Text on outmost Control.
   CreateViewFromView( TempCtrl, TZCONTROL )
   NAME VIEW TempCtrl "TempCtrl"
   ResetViewFromSubobject( TempCtrl )
   ResetViewFromSubobject( TempCtrl )
   TZADWWKO.EntitySubGroup.GroupAreaName = TempCtrl.Control.Text 
   DropView( TempCtrl )
   
   // If the current Group has a subcontrol that is not a GroupBox, then set the flag to indicate
   // the Autodesign is a redesign of the Group and set up the object fields and mapping. 
   // Also delete the current controls that do not have Actions for for UpdateGroupOnly.
   TZADWWKO.AutoDesignWork.AutodesignGroupCtrlsExistFlag = ""
   IF TZCONTROL.CtrlCtrl EXISTS
      SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
      szControlDefTag = TZCONTROL.ControlDef.Tag 
      IF szControlDefTag != "GroupBox"
         // The Group has controls, so this is a redesign.
         // If it's a Grid, process accordingly.
         // If it's not a Grid, look for the first Control with mapping.
         IF szControlDefTag = "Grid"
         
            // Initialize data for a Grid.
            TZADWWKO.AutoDesignWork.AutodesignGroupCtrlsExistFlag = "Y"
            TZADWWKO.EntitySubGroup.GroupType                     = "ListGroupOnly"
            TZADWWKO.EntitySubGroup.ReturnedObjectRootEntityName  = TZCONTROL.CtrlMapLOD_Entity.Name 
            TZADWWKO.EntitySubGroup.AutodesignGroupTemplateName   = "Simple Grid"
            CREATE ENTITY TZADWWKO.AutodesignGroupTemplate 
            TZADWWKO.AutodesignGroupTemplate.GroupName = "Simple Grid"
            
            // Activate Object View and LOD.
            szViewName = TZCONTROL.CtrlMapView.Name 
            nRC = ActivateMetaOI_ByName( ViewToWindow, UpdateVOR, 0, zREFER_VOR_META, zSINGLE, szViewName, 0 )
            NAME VIEW UpdateVOR "UpdateObjectViewRef"
            IF TZADWWKO.W_MetaDefUpdateView EXISTS
               EXCLUDE TZADWWKO.W_MetaDefUpdateView  
            END 
            SET CURSOR FIRST TaskLPLR.W_MetaType WHERE TaskLPLR.W_MetaType.Type = 9   // Read view of Registered View
            SET CURSOR FIRST TaskLPLR.W_MetaDef  WHERE TaskLPLR.W_MetaDef.Name  = UpdateVOR.ViewObjRef.Name  
            INCLUDE TZADWWKO.W_MetaDefUpdateView  FROM TaskLPLR.W_MetaDef 
            szLOD_Name = UpdateVOR.LOD.Name 
            nRC = ActivateMetaOI_ByName( ViewToWindow, UpdateLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
            NAME VIEW UpdateLOD "TZZOLODO_Update"
            SET CURSOR FIRST TaskLPLR.W_MetaType  WHERE TaskLPLR.W_MetaType.Type = 7   // Read view of LOD
            SET CURSOR FIRST TaskLPLR.W_MetaDef   WHERE TaskLPLR.W_MetaDef.Name  = UpdateLOD.LOD.Name   
            INCLUDE TZADWWKO.W_MetaDefUpdateObject FROM TaskLPLR.W_MetaDef 
            
            // Build the list of selected attributes for the new Grid and delete Grid subcontrols except for the first and buttons.
            INCLUDE TZADWWKO.ESG_LOD_Entity FROM TZCONTROL.CtrlMapLOD_Entity 
            SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
            Count = 0
            FOR EACH TZCONTROL.Control 
               Count = Count + 1
               IF TZCONTROL.CtrlMapLOD_Attribute EXISTS
                  // Make sure there wasn't a duplicate Subcontrol.
                  SET CURSOR FIRST TZADWWKO.ESG_ListLOD_Attribute WHERE TZADWWKO.ESG_ListLOD_Attribute.PromptValue = TZCONTROL.Control.Text
                  IF RESULT < zCURSOR_SET
                     SET CURSOR LAST TZADWWKO.ESG_ListLOD_Attribute
                     INCLUDE TZADWWKO.ESG_ListLOD_Attribute FROM TZCONTROL.CtrlMapLOD_Attribute 
                     TZADWWKO.ESG_ListLOD_Attribute.PromptValue = TZCONTROL.Control.Text 
                     
                     // ControlType of "" becomes either Text or EditBox Control depending on WebControlProperty.
                     szControlType = TZCONTROL.ControlDef.Tag
                     IF szControlType = "GridEditCtl"
                        SET CURSOR FIRST TZCONTROL.WebControlProperty WHERE TZCONTROL.WebControlProperty.Name = "Edit"
                        IF RESULT >= zCURSOR_SET
                           TZADWWKO.ESG_ListLOD_Attribute.ControlType = "EditBox"
                        ELSE
                           TZADWWKO.ESG_ListLOD_Attribute.ControlType = "Text"
                        END 
                     ELSE
                        TZADWWKO.ESG_ListLOD_Attribute.ControlType = szControlType
                     END
                  END
               END 
            END
            ResetViewFromSubobject( TZCONTROL )
            
            // Build the list of selectable LOD Entities for a potential list box.
            // We have one entry in the list for each Entity in the Update Object.
            // First remove any current entries then rebuild them.
            FOR EACH TZADWWKO.PotentialLOD_Entity 
               EXCLUDE TZADWWKO.PotentialLOD_Entity NONE 
            END
            FOR EACH UpdateLOD.LOD_Entity 
               INCLUDE TZADWWKO.PotentialLOD_Entity FROM UpdateLOD.LOD_Entity 
            END
            
            // Delete any current potential attributes and then go to build them.
            BuildAD_GroupPotAttrList( TZADWWKO, UpdateLOD, UpdateLOD.LOD_EntityParent.Name, "" )
            
         ELSE
         
            // Update/Detail Controls Group
            // The layout of the Group has to be Text field followed by a Control with mapping, though it can be preceded by one or more buttons.
            SET CURSOR FIRST TZCONTROL.Control WHERE TZCONTROL.ControlDef.Tag = "Text"
            IF RESULT < zCURSOR_SET
               IssueError( ViewToWindow,0,0, "The Group layout is not valid. You must Cancel the Autodesign process." ) 
               RETURN
            END 
            
            // Make sure the next Control has mapping.
            SET CURSOR NEXT TZCONTROL.Control 
            IF TZCONTROL.CtrlMapLOD_Attribute DOES NOT EXIST
               IssueError( ViewToWindow,0,0, "The Group layout is not valid. You must Cancel the Autodesign process." ) 
               RETURN
            END
            
            // Set up the Mapping Object from the Control Mapping.
            // Initialize data for Update/Detail Controls.
            TZADWWKO.AutoDesignWork.AutodesignGroupCtrlsExistFlag = "Y"
            TZADWWKO.EntitySubGroup.GroupType                     = "DetailGroupUpdate"
            TZADWWKO.EntitySubGroup.AutodesignGroupTemplateName   = "GroupDetail"
            CREATE ENTITY TZADWWKO.AutodesignGroupTemplate 
            TZADWWKO.AutodesignGroupTemplate.GroupName = "GroupDetail"
            
            // Activate Object View and LOD.
            szViewName = TZCONTROL.CtrlMapView.Name 
            nRC = ActivateMetaOI_ByName( ViewToWindow, UpdateVOR, 0, zREFER_VOR_META, zSINGLE, szViewName, 0 )
            NAME VIEW UpdateVOR "UpdateObjectViewRef"
            IF TZADWWKO.W_MetaDefUpdateView EXISTS
               EXCLUDE TZADWWKO.W_MetaDefUpdateView  
            END 
            SET CURSOR FIRST TaskLPLR.W_MetaType WHERE TaskLPLR.W_MetaType.Type = 9   // Read view of Registered View
            SET CURSOR FIRST TaskLPLR.W_MetaDef  WHERE TaskLPLR.W_MetaDef.Name  = UpdateVOR.ViewObjRef.Name  
            INCLUDE TZADWWKO.W_MetaDefUpdateView  FROM TaskLPLR.W_MetaDef 
            szLOD_Name = UpdateVOR.LOD.Name 
            nRC = ActivateMetaOI_ByName( ViewToWindow, UpdateLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
            NAME VIEW UpdateLOD "TZZOLODO_Update"
            SET CURSOR FIRST TaskLPLR.W_MetaType  WHERE TaskLPLR.W_MetaType.Type = 7   // Read view of LOD
            SET CURSOR FIRST TaskLPLR.W_MetaDef   WHERE TaskLPLR.W_MetaDef.Name  = UpdateLOD.LOD.Name   
            INCLUDE TZADWWKO.W_MetaDefUpdateObject FROM TaskLPLR.W_MetaDef
            
            // Go back to the Text Control.
            SET CURSOR PREVIOUS TZCONTROL.Control 
            
            // Process each pair of Text/Mapping Controls, creating the ESG_ListLOD_Attribute entries.
            RESULT = 0
            LOOP WHILE RESULT >= 0
               szTextPrompt    = TZCONTROL.Control.Text 
               szTextCSS_Class = TZCONTROL.Control.CSS_Class 
               SET CURSOR NEXT TZCONTROL.Control       // Position on Mapping Control
               IF TZCONTROL.CtrlMapLOD_Attribute DOES NOT EXIST
                  IssueError( ViewToWindow,0,0, "The Group layout is not valid. You must Cancel the Autodesign process." ) 
                  RETURN
               END
               INCLUDE TZADWWKO.ESG_ListLOD_Attribute FROM TZCONTROL.CtrlMapLOD_Attribute 
               TZADWWKO.ESG_ListLOD_Attribute.PromptValue         = szTextPrompt
               TZADWWKO.ESG_ListLOD_Attribute.ControlType         = TZCONTROL.ControlDef.Tag
               TZADWWKO.ESG_ListLOD_Attribute.CSS_ClassForPrompt  = szTextCSS_Class
               TZADWWKO.ESG_ListLOD_Attribute.CSS_ClassForControl = TZCONTROL.Control.CSS_Class 
               
               SET CURSOR NEXT TZCONTROL.Control       // Position on next Text Control.
            END 
            
            // Delete any current potential attributes and then go to build them.
            BuildAD_GroupPotAttrList( TZADWWKO, UpdateLOD, UpdateLOD.LOD_EntityParent.Name, "" )    
               
         END
      END
      ResetViewFromSubobject( TZCONTROL )
   END

END

/*************************************************************************************************
**    
**    OPERATION: InitializeAD_WorkObjectBootstrap
**    
*************************************************************************************************/
LOCAL OPERATION
InitializeAD_WorkObjectBootstrap( VIEW ViewToWindow )

   VIEW TZWINDOWL REGISTERED AS TZWINDOWL
   VIEW TZCONTROL REGISTERED AS TZCONTROL
   VIEW TaskLPLR  REGISTERED AS TaskLPLR
   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TempCtrl  BASED ON LOD  TZWDLGSO
   VIEW TempCtrl2 BASED ON LOD  TZWDLGSO
   VIEW TZZOLFLO  BASED ON LOD  TZCMLPLO
   VIEW UpdateLOD BASED ON LOD  TZZOLODO
   VIEW UpdateVOR BASED ON LOD  TZWDVORO
   STRING ( 20 ) szControlDefTag
   STRING ( 20 ) szControlType
   STRING ( 50 ) szViewName
   STRING ( 50 ) szLOD_Name
   STRING ( 50 ) szTextPrompt
   STRING ( 50 ) szTextCSS_Class
   STRING ( 4 )  szSubControlType
   INTEGER Count
   INTEGER RowCount
   INTEGER SubRowCount
   SHORT   nRC

   // Set up work data for "Regular Autodesign Group".
   // Also build mapping data for any existing Controls.

   // The autodesign work objects need to be set up.
   // Default state will be resize and reposition top Groups.
   TZADWWKO.AutoDesignWork.RepositionGroupFlag = "Y"
   
   // Determine type of function as either:
   // 1. New Group
   // 2. Modification of Grid
   // 3. Modification of update/display controls
   // For Bootstrap Autodesign, the function depends partly on the current or parent Group Type as follows:
   // 1. A new Group must be drawn on an "accordion" parent Group.
   // 2. A modification of update/display controls or a Grid must be done on a current Group of Type "card-body".
   
   // Check for modification of Grid or update/display controls.
   CreateViewFromView( TempCtrl, TZCONTROL )
   NAME VIEW TempCtrl "TempCtrl"
   IF TempCtrl.CtrlCtrl EXISTS
      nRC = FindControlTypeWithinGroup( TempCtrl )
      IF nRC = 1
         szSubControlType = "Grp"
         TZADWWKO.AutoDesignWork.AutodesignGroupCtrlsExistFlag = ""
      ELSE
         IF nRC = 2
            szSubControlType = "Grid"
         ELSE
            szSubControlType = "Updt"
         END
      END
   ELSE
      MessageSend( ViewToWindow, "", "Autodesign Group",
                   "When Autodesigning a new Group, the current Group cannot have subgroups.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   DropView( TempCtrl )
   CreateViewFromView( TempCtrl, TZCONTROL )
   NAME VIEW TempCtrl "TempCtrl"
   
   // For Grid and update/display controls, make sure current Group Class is card-body,
   // Otherwise, current Group Class must be "accordion".
   IF szSubControlType = "Grid" OR szSubControlType = "Updt"
      IF TempCtrl.Control.CSS_Class != "card-body"
         MessageSend( ViewToWindow, "", "Autodesign Group",
                      "When modifying an existing Group, the Group Type selected must be of CSS Class, card-body.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
         RETURN -2
      END
   END
   
   // We will continue creating current mapping entries only for Grid and update/display controls.
   IF szSubControlType = "Grid"
      // Set up existing mapping for Grid.
      TZADWWKO.EntitySubGroup.GroupType                     = "ListGroupOnly"
      InitGridSelectAttribs( TZADWWKO, TempCtrl )
   END
   
   IF szSubControlType = "Updt"

      // The layout for Bootstrap assumes the Prompt and target control pairs are set within an outer "row" Group and an
      // inner "col-X" or null Group. The "row" Groups will be counted to determine the row value for initial mapping entries.
      
      // Find the first update/display control to get object mapping information.
      CreateViewFromView( TempCtrl2, TempCtrl )
      NAME VIEW TempCtrl2 "TempCtrl2"
      SetViewToSubobject( TempCtrl2, "CtrlCtrl" )   // Position on Row Group.
      SetViewToSubobject( TempCtrl2, "CtrlCtrl" )   // Position on Pairing Group
      SetViewToSubobject( TempCtrl2, "CtrlCtrl" )   // Position on Prompt Control.
      SET CURSOR NEXT TempCtrl2.Control             // Position on update/display Control with mapping. 
      IF TempCtrl2.CtrlMap DOES NOT EXIST
         MessageSend( ViewToWindow, "", "Autodesign Group",
                      "The update/display mapping entry is missing.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
         RETURN -2
      END
      
      // Set up the Mapping Object from the Control Mapping.
      TZADWWKO.AutoDesignWork.AutodesignGroupCtrlsExistFlag = "Y"
      TZADWWKO.EntitySubGroup.GroupType                     = "DetailGroupBootstrap"
      TZADWWKO.EntitySubGroup.AutodesignGroupTemplateName   = "GroupDetail"
      CREATE ENTITY TZADWWKO.AutodesignGroupTemplate 
      TZADWWKO.AutodesignGroupTemplate.GroupName = "GroupDetail"
      
      // Activate Object View and LOD.
      szViewName = TempCtrl2.CtrlMapView.Name 
      nRC = ActivateMetaOI_ByName( ViewToWindow, UpdateVOR, 0, zREFER_VOR_META, zSINGLE, szViewName, 0 )
      NAME VIEW UpdateVOR "UpdateObjectViewRef"
      IF TZADWWKO.W_MetaDefUpdateView EXISTS
         EXCLUDE TZADWWKO.W_MetaDefUpdateView  
      END 
      SET CURSOR FIRST TaskLPLR.W_MetaType WHERE TaskLPLR.W_MetaType.Type = 9   // Read view of Registered View
      SET CURSOR FIRST TaskLPLR.W_MetaDef  WHERE TaskLPLR.W_MetaDef.Name  = UpdateVOR.ViewObjRef.Name  
      INCLUDE TZADWWKO.W_MetaDefUpdateView  FROM TaskLPLR.W_MetaDef 
      szLOD_Name = UpdateVOR.LOD.Name 
      nRC = ActivateMetaOI_ByName( ViewToWindow, UpdateLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
      NAME VIEW UpdateLOD "TZZOLODO_Update"
      SET CURSOR FIRST TaskLPLR.W_MetaType  WHERE TaskLPLR.W_MetaType.Type = 7   // Read view of LOD
      SET CURSOR FIRST TaskLPLR.W_MetaDef   WHERE TaskLPLR.W_MetaDef.Name  = UpdateLOD.LOD.Name   
      INCLUDE TZADWWKO.W_MetaDefUpdateObject FROM TaskLPLR.W_MetaDef
      
      // Loop through each row Group and then each detail pair Group within the row.
      RowCount = 0
      SetViewToSubobject( TempCtrl, "CtrlCtrl" )
      FOR EACH TempCtrl.Control      // Loop through each Row.
         IF TempCtrl.Control.CSS_Class != "row"
            MessageSend( ViewToWindow, "", "Autodesign Group",
                         "Invalid subcontrol encountered. Row Class expected..",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
            DropView( TempCtrl )
            RETURN -2
         END
         RowCount = RowCount + 1
         
         // Step down to detail pair Groups that contains each Prompt plus Control with mapping.
         SetViewToSubobject( TempCtrl, "CtrlCtrl" )
         SubRowCount = 0
         FOR EACH TempCtrl.Control
            SubRowCount = SubRowCount + 1
            SetViewToSubobject( TempCtrl, "CtrlCtrl" )
            // Prompt
            szTextPrompt = TempCtrl.Control.Text
            SET CURSOR NEXT TempCtrl.Control    // Step to mapping control
            // Mapping Control
            IF TempCtrl.CtrlMapLOD_Attribute DOES NOT EXIST
               IssueError( ViewToWindow,0,0, "The Group layout is not valid. You must Cancel the Autodesign process." ) 
               RETURN
            END
            INCLUDE TZADWWKO.ESG_ListLOD_Attribute FROM TempCtrl.CtrlMapLOD_Attribute 
            TZADWWKO.ESG_ListLOD_Attribute.PromptValue = szTextPrompt
            TZADWWKO.ESG_ListLOD_Attribute.GroupRow    = RowCount
            // Convert Control Type to Calendar if CSS_Class = "form-control datefield".
            IF TempCtrl.Control.CSS_Class = "form-control datefield"
               TZADWWKO.ESG_ListLOD_Attribute.ControlType = "Calendar"
            ELSE
               TZADWWKO.ESG_ListLOD_Attribute.ControlType = TempCtrl.ControlDef.Tag
            END

            ResetViewFromSubobject( TempCtrl )
         END
         ResetViewFromSubobject( TempCtrl )
      END
      ResetViewFromSubobject( TempCtrl )
      
      // Delete any current potential attributes and then go to build them.
      BuildAD_GroupPotAttrList( TZADWWKO, UpdateLOD, UpdateLOD.LOD_EntityParent.Name, "" )
   END
   
   DropView( TempCtrl )
   
END

/*************************************************************************************************
**    
**    OPERATION: FindControlTypeWithinGroup
**    
*************************************************************************************************/
LOCAL OPERATION
FindControlTypeWithinGroup( VIEW TempCtrl BASED ON LOD TZWDLGSO)

   INTEGER nRC

   // Search each subcontrol looking for a Control Type other than Group.
   SetViewToSubobject( TempCtrl, "CtrlCtrl" )
   FOR EACH TempCtrl.Control 
      IF TempCtrl.ControlDef.Tag = "GroupBox"
         IF TempCtrl.CtrlCtrl EXISTS
            nRC = FindControlTypeWithinGroup( TempCtrl )
            IF nRC != 1    // A return code of 1 means no subcontrol was found except for GroupBox.
               RETURN nRC  // Since a Control other than GroupBox was found, return.
            END
         END
      ELSE
         IF TempCtrl.ControlDef.Tag = "Grid"
            RETURN 2    // Returning a 2 is for a Grid.
         ELSE
            RETURN 3    // Returning a 3 is for an update/display control.
         END
      END 
   END
   ResetViewFromSubobject( TempCtrl )

END

/*************************************************************************************************
**    
**    OPERATION: FindGridWithinGroup
**    
*************************************************************************************************/
LOCAL OPERATION
FindGridWithinGroup( VIEW TempCtrl BASED ON LOD TZWDLGSO)

   INTEGER nRC

   // Search each subcontrol looking for a Grid.
   SetViewToSubobject( TempCtrl, "CtrlCtrl" )
   FOR EACH TempCtrl.Control 
      IF TempCtrl.ControlDef.Tag = "GroupBox"
         IF TempCtrl.CtrlCtrl EXISTS
            nRC = FindGridWithinGroup( TempCtrl )
            IF nRC = 2  // A return code of 2 means we've found the Grid
               RETURN nRC  
            END
         END
      ELSE
         IF TempCtrl.ControlDef.Tag = "Grid"
            RETURN 2    // Returning a 2 is for a Grid.
         END
      END 
   END
   ResetViewFromSubobject( TempCtrl )

END

/*************************************************************************************************
**    
**    OPERATION: ActivateAD_BaseL
**    
*************************************************************************************************/
LOCAL OPERATION
ActivateAD_BaseL( VIEW RetAD_BaseView,
                  VIEW ViewToWindow )

   VIEW TaskLPLR  REGISTERED AS TaskLPLR
   STRING ( 300 ) szAutodesignLPLR_Directory
   INTEGER nRC
   
   // Activate correct AD_Base dialog based on Generation type.
   // For now, only activate the Bootstrap AD_Base.
   IF TaskLPLR.LPLR.AutodesignBase = ""
      szAutodesignLPLR_Directory = "C:\LPLR\AD_Base"                // Use default
   ELSE
      szAutodesignLPLR_Directory = TaskLPLR.LPLR.AutodesignBase     // Use specified directory
   END
   szAutodesignLPLR_Directory = szAutodesignLPLR_Directory + "\AD_Base.PWD"
   nRC = ActivateOI_FromFile( RetAD_BaseView, "TZWDLGSO", ViewToWindow, szAutodesignLPLR_Directory, zSINGLE )
   
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Autodesign Window Group",
                   "Unable to activate AD_Base.PWD from AD_Base LPLR.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   NAME VIEW RetAD_BaseView "AD_Base"

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildGroupListSpec
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildGroupListSpec( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   
   // If this is for immediately autodesign the List Group, change the text of the "OK" button to "Generate"..
   IF TZADWWKO.EntitySubGroup.ListGroupGenerateFlag = "Y"
      SetCtrlText( ViewToWindow, "PBOK", "Generate" )
   END

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_ExtensionOptions
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_ExtensionOptions( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   VIEW UserLOD  BASED ON LOD  TZZOLODO
   INTEGER nRC

   // Make sure that the Email and Merge work attributes exist.
   
   // Check Email work attributes in mUser object.
   nRC = ActivateMetaOI_ByName( ViewToWindow, UserLOD, 0, zREFER_LOD_META, zSINGLE, "mUser", 0 )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Autodesign Subdialog", 
                   "Object mUser does not exist.", 
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   NAME VIEW UserLOD "UserLOD"
   SET CURSOR FIRST UserLOD.ER_AttributeRec WITHIN UserLOD.LOD_EntityParent 
              WHERE UserLOD.ER_AttributeRec.Name = "SenderUserEmailAddress"
   IF RESULT >= 0
      SET CURSOR FIRST UserLOD.ER_AttributeRec WITHIN UserLOD.LOD_EntityParent 
                 WHERE UserLOD.ER_AttributeRec.Name = "SenderHostEmailAddress"
   END
   IF RESULT < 0
      MessageSend( ViewToWindow, "", "Autodesign Subdialog", 
                   "Both  attributes 'SenderUserEmailAddress' and 'SenderHostEmailAddress' must be defined in mUser.User object/entity.", 
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END 
   
   // Add Email Types to work object as necessary.
   IF TZADWWKO.SendEmailType DOES NOT EXIST
      CREATE ENTITY TZADWWKO.EmailWork  
      CREATE ENTITY TZADWWKO.SendEmailType    // Empty entry.
      CREATE ENTITY TZADWWKO.SendEmailType
      TZADWWKO.SendEmailType.DisplayName = "Simple Email"
      TZADWWKO.SendEmailType.EmailType   = "SimpleEmail"
      CREATE ENTITY TZADWWKO.SendEmailType
      TZADWWKO.SendEmailType.DisplayName = "Email Merge"
      TZADWWKO.SendEmailType.EmailType   = "EmailMerge"
      CREATE ENTITY TZADWWKO.SendEmailType
      TZADWWKO.SendEmailType.DisplayName = "Email with Attachment"
      TZADWWKO.SendEmailType.EmailType   = "EmailwAttachment"
   END
   
   // Make the AutoDesignWork entity temporal for the subwindow.
   CreateTemporalSubobjectVersion( TZADWWKO, "EmailWork" )
   
   // Position on the correct entry.
   SET CURSOR FIRST TZADWWKO.SendEmailType WHERE TZADWWKO.SendEmailType.EmailType = TZADWWKO.AutoDesignWork.SendEmailType 

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_RecipientEmailAddress
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_RecipientEmailAddress( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   STRING ( 200 ) szEmailAddressViewEntityAttrib
   
   // Set the view.entity.attribute combination for the selected entry.
   szEmailAddressViewEntityAttrib = "mConList." + 
                                     TZADWWKO.ESG_FlatListPotentialAttribute2.EntityName + "." +
                                     TZADWWKO.ESG_FlatListPotentialAttribute2.AttributeName 
   TZADWWKO.AutoDesignWork.RecipientEmailAddressMapping = szEmailAddressViewEntityAttrib

END

/*************************************************************************************************
**    
**    OPERATION: ACCEPT_Extensions
**    
*************************************************************************************************/
DIALOG OPERATION
ACCEPT_Extensions( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO

   // If the Email Type has been selected, make sure that the Recipient Email Address is specified.
   IF TZADWWKO.SendEmailType.DisplayName != ""
      // An email type has been selected.
      IF TZADWWKO.AutoDesignWork.RecipientEmailAddressMapping = ""
         MessageSend( ViewToWindow, "", "Autodesign Subdialog", 
                      "If an Email Type has been selected, a Recipient Email Address value must be specified.", 
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END
   END
   TZADWWKO.AutoDesignWork.SendEmailType = TZADWWKO.SendEmailType.EmailType 
   AcceptSubobject( TZADWWKO, "EmailWork" )

END

/*************************************************************************************************
**    
**    OPERATION: SAVE_AutodesignDefinition
**    
*************************************************************************************************/
DIALOG OPERATION
SAVE_AutodesignDefinition( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   VIEW TaskLPLR REGISTERED AS TaskLPLR
   STRING ( 200 ) szFullFileName
   INTEGER nRC

   // Save the TZADWWKO OI in the current LPLR under the name specified.
   // It will overlay any current file by the same name.
   szFullFileName = TaskLPLR.LPLR.MetaSrcDir + "\" + TZADWWKO.AutoDesignWork.StoredDesignSavedName + ".ADD"
   TraceLineS( "*** AD Def File Name: ", szFullFileName )
   nRC = CommitOI_ToFile( TZADWWKO, szFullFileName, zASCII )
   TraceLineI( "Commit nRC: ", nRC )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Autodesign Def Save", 
                   "An error occurred during Commit and the Autodesign Definition was not saved.", 
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END

END

/*************************************************************************************************
**    
**    OPERATION: ACTIVATE_AutodesignDefinition
**    
*************************************************************************************************/
DIALOG OPERATION
ACTIVATE_AutodesignDefinition( VIEW ViewToWindow )

   VIEW TZADWWKO    REGISTERED AS TZADWWKO
   VIEW TZADWWKON   BASED ON LOD  TZADWWKO
   VIEW TaskLPLR    REGISTERED AS TaskLPLR
   VIEW UpdateLOD   BASED ON LOD  TZZOLODO
   VIEW SearchLOD   BASED ON LOD  TZZOLODO
   VIEW ReturnLOD   BASED ON LOD  TZZOLODO
   VIEW mConListLOD BASED ON LOD  TZZOLODO
   STRING ( 200 ) szFullFileName
   STRING ( 50 )  szLOD_Name
   INTEGER nRC
   INTEGER nFileIn
   
   // Activate the TZADWWKO OI in the current LPLR under the name specified.
   // It will replace any current TZADWWKO OI.
   szFullFileName = TaskLPLR.LPLR.MetaSrcDir + "\" + TZADWWKO.AutoDesignWork.StoredDesignSavedName + ".ADD"
   TraceLineS( "*** AD Def File Name: ", szFullFileName )
   
   // Check to see that the file exists.
   nFileIn = SysOpenFile( ViewToWindow, szFullFileName, COREFILE_READ )
   IF nFileIn >= 0 
      SysCloseFile( ViewToWindow, nFileIn, 0 )
   ELSE
      MessageSend( ViewToWindow, "", "Autodesign Def Save", 
                   "The file specified does not exist in the LPLR.", 
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   END
   
   nRC = ActivateOI_FromFile( TZADWWKON, "TZADWWKO", ViewToWindow, szFullFileName, zSINGLE )
   TraceLineI( "Activate nRC: ", nRC )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Autodesign Def Save", 
                   "An error occurred during Activate and no action has been taken.", 
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
      RETURN -2
   ELSE
      DropObjectInstance( TZADWWKO )
      NAME VIEW TZADWWKON "TZADWWKO"
   END
   
   // If an Update LOD has been selected in the definition, Activate it and name it TZZOLODO_Update. 
   // Drop any current entry.
   GET VIEW UpdateLOD NAMED "TZZOLODO_Update"
   IF RESULT >= 0
      DropObjectInstance( UpdateLOD )
   END
   IF TZADWWKON.W_MetaDefUpdateObject EXISTS AND TZADWWKON.W_MetaDefUpdateObject.Name != ""
      szLOD_Name = TZADWWKON.W_MetaDefUpdateObject.Name 
      nRC = ActivateMetaOI_ByName( ViewToWindow, UpdateLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
      NAME VIEW UpdateLOD "TZZOLODO_Update"
   END
   
TraceLineS( "*** Before Search LOD", "" )
   // If a Search LOD has been selected in the definition, Activate it and name it TZZOLODO1. 
   // Drop any current entry.
   GET VIEW SearchLOD NAMED "TZZOLOD1"
   IF RESULT >= 0
      DropObjectInstance( SearchLOD )
   END
   IF TZADWWKON.W_MetaDefSearchObject EXISTS AND TZADWWKON.W_MetaDefSearchObject.Name != ""
      szLOD_Name = TZADWWKON.W_MetaDefSearchObject.Name 
      nRC = ActivateMetaOI_ByName( ViewToWindow, SearchLOD, 0, zREFER_LOD_META, zSINGLE, szLOD_Name, 0 )
      NAME VIEW SearchLOD "TZZOLOD1"
      NAME VIEW SearchLOD "TZZOLODO_Desc" 
   END
TraceLineS( "*** After Search LOD", "" ) 
   
   // If this is a CRM Find object, Activate mConList. 
   // Drop any current entry.
   IF TZADWWKON.AutodesignSubdialog EXISTS AND TZADWWKON.AutodesignSubdialog.FindType = "CRM"
      GET VIEW mConListLOD NAMED "mConListLOD"
      IF RESULT >= 0
         DropObjectInstance( mConListLOD )
      END
      nRC = ActivateMetaOI_ByName( ViewToWindow, mConListLOD, 0, zREFER_LOD_META, zSINGLE, "mConList", 0 )
      NAME VIEW mConListLOD "mConListLOD"
      
      // Clear any existing TZADWWKO.ESG_FlatListPotentialAttribute2 entries and rebuild them from selected object.
      BuildAD_GroupPotAttrList( TZADWWKON, mConListLOD, "ContactList", "2" )
   END

END

/*************************************************************************************************
**    
**    OPERATION: VALIDATE_DetailAttributeDef
**    
*************************************************************************************************/
DIALOG OPERATION
VALIDATE_DetailAttributeDef( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   
   // Validate the ESG_DetailLOD_Attribute values, particularly the GroupRow and GroupNumber values.
   SET CURSOR FIRST TZADWWKO.ESG_DetailLOD_Attribute WHERE TZADWWKO.ESG_DetailLOD_Attribute.GroupNumber != ""
   IF RESULT >= zCURSOR_SET
      // Type is Group.
      // Make sure all GroupNumbers are set and <= 4 and all GroupRows are null.
      SET CURSOR FIRST TZADWWKO.ESG_DetailLOD_Attribute WHERE TZADWWKO.ESG_DetailLOD_Attribute.GroupRow != ""
      IF RESULT >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Detail Def Return", 
                      "Both Row values and Group values cannot be set.", 
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END
      SET CURSOR FIRST TZADWWKO.ESG_DetailLOD_Attribute WHERE TZADWWKO.ESG_DetailLOD_Attribute.GroupNumber = ""
      IF RESULT >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Detail Def Return", 
                      "If one Group value is set, all need to be set.", 
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END
      SET CURSOR FIRST TZADWWKO.ESG_DetailLOD_Attribute WHERE TZADWWKO.ESG_DetailLOD_Attribute.GroupNumber > 4
      IF RESULT >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Detail Def Return", 
                      "A Group value cannot be greater than 4.", 
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END
      
   ELSE 
      // Type is Row.
      // Make sure all GroupRows are set or null.
      SET CURSOR FIRST TZADWWKO.ESG_DetailLOD_Attribute WHERE TZADWWKO.ESG_DetailLOD_Attribute.GroupRow != ""
      IF RESULT >= zCURSOR_SET
         // One Row value has been set, so make sure they are all set.
         SET CURSOR FIRST TZADWWKO.ESG_DetailLOD_Attribute WHERE TZADWWKO.ESG_DetailLOD_Attribute.GroupRow = ""
         IF RESULT >= zCURSOR_SET
            MessageSend( ViewToWindow, "", "Detail Def Return", 
                         "If one Row value is set, they must all be set.", 
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
            RETURN -2
         END
      END
      
   END

END

/*************************************************************************************************
**    
**    OPERATION: VALIDATE_SearchAttributeDef
**    
*************************************************************************************************/
DIALOG OPERATION
VALIDATE_SearchAttributeDef( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   
   // Validate the FlatSelectedSearchAttribute values, particularly the GroupRow and GroupNumber values.
   SET CURSOR FIRST TZADWWKO.FlatSelectedSearchAttribute  
   SET CURSOR FIRST TZADWWKO.FlatSelectedSearchAttribute WHERE TZADWWKO.FlatSelectedSearchAttribute.GroupNumber != ""
   IF RESULT >= zCURSOR_SET
      // Type is Group.
      // Make sure all GroupNumbers are set and <= 4 and all GroupRows are null.
      SET CURSOR FIRST TZADWWKO.FlatSelectedSearchAttribute WHERE TZADWWKO.FlatSelectedSearchAttribute.GroupRow != ""
      IF RESULT >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Search Def Return", 
                      "Both Row values and Group values cannot be set.", 
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END
      SET CURSOR FIRST TZADWWKO.FlatSelectedSearchAttribute WHERE TZADWWKO.FlatSelectedSearchAttribute.GroupNumber = ""
      IF RESULT >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Search Def Return", 
                      "If one Group value is set, all need to be set.", 
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END
      SET CURSOR FIRST TZADWWKO.FlatSelectedSearchAttribute WHERE TZADWWKO.FlatSelectedSearchAttribute.GroupNumber > 4
      IF RESULT >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Search Def Return", 
                      "A Group value cannot be greater than 4.", 
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END
      
   ELSE 
      // Type is Row.
      // Make sure all GroupRows are set or null.
      SET CURSOR FIRST TZADWWKO.FlatSelectedSearchAttribute WHERE TZADWWKO.FlatSelectedSearchAttribute.GroupRow != ""
      IF RESULT >= zCURSOR_SET
         // One Row value has been set, so make sure they are all set.
         SET CURSOR FIRST TZADWWKO.FlatSelectedSearchAttribute WHERE TZADWWKO.FlatSelectedSearchAttribute.GroupRow = ""
         IF RESULT >= zCURSOR_SET
            MessageSend( ViewToWindow, "", "Search Def Return", 
                         "If one Row value is set, they must all be set.", 
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
            RETURN -2
         END
      END
      
   END

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_AutodesignGroup
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_AutodesignGroup( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   
   // Validate current options.
   // There are currently no functions not active.

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildGroupIncludeSpec
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildGroupIncludeSpec( VIEW ViewToWindow )

   VIEW VOR_Meta BASED ON LOD  TZCMLPLO
   VIEW TaskLPLR REGISTERED AS TaskLPLR

   // Make sure that VOR_Meta is positioned on Registered Named Views for View selection.
   GET VIEW VOR_Meta NAMED "LPLR_VOR_Meta"
   IF RESULT < 0
      CreateViewFromView( VOR_Meta, TaskLPLR )
      NAME VIEW VOR_Meta "LPLR_VOR_Meta"
      SET CURSOR FIRST VOR_Meta.W_MetaType WHERE VOR_Meta.W_MetaType.Type = 9 
   END

END

/*************************************************************************************************
**
**    OPERATION: CHECK_ReorderAttributesSub
**
*************************************************************************************************/
DIALOG OPERATION
CHECK_ReorderAttributesSub( VIEW ViewToWindow )

   VIEW TZADWWKO  REGISTERED AS TZADWWKO
   VIEW TZADWWKO2 BASED ON LOD  TZADWWKO
   INTEGER nRC
   
   // Validate Row and Group values.
   SET CURSOR FIRST TZADWWKO.ESG_SearchLOD_Attribute  
   SET CURSOR FIRST TZADWWKO.ESG_SearchLOD_Attribute WHERE TZADWWKO.ESG_SearchLOD_Attribute.GroupNumber != ""
   IF RESULT >= zCURSOR_SET
      // Type is Group.
      // Make sure all GroupNumbers are set and <= 4 and all GroupRows are null.
      SET CURSOR FIRST TZADWWKO.ESG_SearchLOD_Attribute WHERE TZADWWKO.ESG_SearchLOD_Attribute.GroupRow != ""
      IF RESULT >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Search Def Return", 
                      "Both Row values and Group values cannot be set.", 
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END
      SET CURSOR FIRST TZADWWKO.ESG_SearchLOD_Attribute WHERE TZADWWKO.ESG_SearchLOD_Attribute.GroupNumber = ""
      IF RESULT >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Search Def Return", 
                      "If one Group value is set, all need to be set.", 
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END
      SET CURSOR FIRST TZADWWKO.ESG_SearchLOD_Attribute WHERE TZADWWKO.ESG_SearchLOD_Attribute.GroupNumber > 4
      IF RESULT >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "Search Def Return", 
                      "A Group value cannot be greater than 4.", 
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
         RETURN -2
      END
      
   ELSE 
      // Type is Row.
      // Make sure all GroupRows are set or null.
      SET CURSOR FIRST TZADWWKO.ESG_SearchLOD_Attribute WHERE TZADWWKO.ESG_SearchLOD_Attribute.GroupRow != ""
      IF RESULT >= zCURSOR_SET
         // One Row value has been set, so make sure they are all set.
         SET CURSOR FIRST TZADWWKO.ESG_SearchLOD_Attribute WHERE TZADWWKO.ESG_SearchLOD_Attribute.GroupRow = ""
         IF RESULT >= zCURSOR_SET
            MessageSend( ViewToWindow, "", "Search Def Return", 
                         "If one Row value is set, they must all be set.", 
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0,0 )
            RETURN -2
         END
      END
      
   END

   // Make sure that any Entity entries are properly positioned before their corresponding attributes.
   /*CreateViewFromView( TZADWWKO2, TZADWWKO )
   FOR EACH TZADWWKO.FlatSelectedSearchAttribute 
      IF TZADWWKO.FlatSelectedSearchAttribute.IndentEntityName != ""
         SET CURSOR FIRST TZADWWKO2.FlatSelectedSearchAttribute
                    WHERE TZADWWKO2.FlatSelectedSearchAttribute.EntityName = TZADWWKO.FlatSelectedSearchAttribute.EntityName
         IF TZADWWKO2.FlatSelectedSearchAttribute.IndentEntityName != TZADWWKO.FlatSelectedSearchAttribute.IndentEntityName
            // An Entity entry has been moved, so put it back.
            CREATE ENTITY TZADWWKO2.FlatSelectedSearchAttribute BEFORE
            SetMatchingAttributesByName( TZADWWKO2, "FlatSelectedSearchAttribute", TZADWWKO, "FlatSelectedSearchAttribute", zSET_ALL )
            DELETE ENTITY TZADWWKO.FlatSelectedSearchAttribute
         END
      END
   END*/
   SET CURSOR FIRST TZADWWKO.ESG_SearchLOD_Attribute
   //RefreshWindow( ViewToWindow )
   //DropView( TZADWWKO2 )

END

/*************************************************************************************************
**    
**    OPERATION: REMOVE_AD_AttributeAsRangeSub
**    
*************************************************************************************************/
DIALOG OPERATION
REMOVE_AD_AttributeAsRangeSub( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   
   // Remove the Range data from the FlatSelectedSearchAttribute entry.
   TZADWWKO.ESG_SearchLOD_Attribute.RangeTargetAttributeName = ""
   TZADWWKO.ESG_SearchLOD_Attribute.RangeFromToType          = ""

END

/*************************************************************************************************
**    
**    OPERATION: SET_AD_AttributeAsRangeFromSub
**    
*************************************************************************************************/
DIALOG OPERATION
SET_AD_AttributeAsRangeFromSub( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   
   // Set the two Range values in FlatSelectedSearchAttribute from those in ESG_FlatListPotentialAttribute and
   // indicate the type is "From".
   
   // Make sure that Data Types match between source and target.
   IF TZADWWKO.ESG_SearchDomain.DomainType != TZADWWKO.ESG_FlatDomain3.DomainType 
      MessageSend( ViewToWindow, "", "Set Range Value",
                   "The Data Types of source and target do not match.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   
   // Make sure that Entity Names match between source and target.
   IF TZADWWKO.ESG_SearchLOD_Entity.Name != TZADWWKO.ESG_FlatListPotentialAttribute3.EntityName 
      MessageSend( ViewToWindow, "", "Set Range Value",
                   "The Entity Names of source and target do not match.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   
   // Set values in target.
   TZADWWKO.ESG_SearchLOD_Attribute.RangeTargetAttributeName = TZADWWKO.ESG_FlatListPotentialAttribute3.AttributeName 
   TZADWWKO.ESG_SearchLOD_Attribute.RangeFromToType          = "From"

END

/*************************************************************************************************
**    
**    OPERATION: SET_AD_AttributeAsRangeToSub
**    
*************************************************************************************************/
DIALOG OPERATION
SET_AD_AttributeAsRangeToSub( VIEW ViewToWindow )

   VIEW TZADWWKO REGISTERED AS TZADWWKO
   
   // Set the two Range values in FlatSelectedSearchAttribute from those in ESG_FlatListPotentialAttribute and
   // indicate the type is "To".
   
   // Make sure that Data Types match between source and target.
   IF TZADWWKO.ESG_SearchDomain.DomainType != TZADWWKO.ESG_FlatDomain3.DomainType 
      MessageSend( ViewToWindow, "", "Set Range Value",
                   "The Data Types of source and target do not match.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   
   // Make sure that Entity Names match between source and target.
   IF TZADWWKO.ESG_SearchLOD_Entity.Name != TZADWWKO.ESG_FlatListPotentialAttribute3.EntityName 
      MessageSend( ViewToWindow, "", "Set Range Value",
                   "The Entity Names of source and target do not match.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   
   // Set values in target.
   TZADWWKO.ESG_SearchLOD_Attribute.RangeTargetAttributeName = TZADWWKO.ESG_FlatListPotentialAttribute3.AttributeName 
   TZADWWKO.ESG_SearchLOD_Attribute.RangeFromToType          = "To"

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_MultiGroupSubSpec
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_MultiGroupSubSpec( VIEW ViewToWindow )

   VIEW TZADWWKO    REGISTERED AS TZADWWKO
   VIEW TZADWWKOSub BASED ON LOD  TZADWWKO
   
   // Rename the current TZADWWKO OI and create/update a new/existing sub TZADWWKO object for use in the subwindow.
   SetNameForView( TZADWWKO, "TZADWWKOMain", ViewToWindow, zLEVEL_TASK )
   DropNameForView( TZADWWKO, "TZADWWKO", ViewToWindow, zLEVEL_TASK )
   
   GET VIEW TZADWWKOSub NAMED "TZADWWKOSub"
   IF RESULT >= 0
      // Name existing view TZADWWKO for its use in subwindow and make temporal.
      // If OI doesn't exist, it will be created in postbuild.
      NAME VIEW TZADWWKOSub "TZADWWKO"
      CreateTemporalSubobjectVersion( TZADWWKOSub, "AutoDesignWork" ) 
   END

END

/*************************************************************************************************
**    
**    OPERATION: ACCEPT_AutodesignMultiPageSub
**    
*************************************************************************************************/
DIALOG OPERATION
ACCEPT_AutodesignMultiPageSub( VIEW ViewToWindow )

   VIEW TZADWWKOSub  REGISTERED AS TZADWWKO
   VIEW TZADWWKOMain BASED ON LOD  TZADWWKO
   
   // Make sure that each EntitySubGroup has an Area Name specified.
   FOR EACH TZADWWKOSub.EntitySubGroup 
      IF TZADWWKOSub.EntitySubGroup.GroupAreaName = ""
         MessageSend( ViewToWindow, "", "Set Group Values",
                      "Each Group selected must have an Area Name specified.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
         RETURN -2
      END 
   END
   
   // Accept the TZADWWKO root entity (it's versioned) and rename the 2 views back again.
   AcceptSubobject( TZADWWKOSub, "AutoDesignWork" )
   SetNameForView( TZADWWKOSub, "TZADWWKOSub", ViewToWindow, zLEVEL_TASK )
   GET VIEW TZADWWKOMain NAMED "TZADWWKOMain"
   NAME VIEW TZADWWKOMain "TZADWWKO"
   DropNameForView( TZADWWKOMain, "TZADWWKOMain", ViewToWindow, zLEVEL_TASK )

END

/*************************************************************************************************
**    
**    OPERATION: CANCEL_AutodesignMultiPageSub
**    
*************************************************************************************************/
DIALOG OPERATION
CANCEL_AutodesignMultiPageSub( VIEW ViewToWindow )

   VIEW TZADWWKOSub  REGISTERED AS TZADWWKO
   VIEW TZADWWKOMain BASED ON LOD  TZADWWKO
   
   // Accept the TZADWWKO root entity (it's versioned) and rename the 2 views back again.
   CancelSubobject( TZADWWKOSub, "AutoDesignWork" )
   SetNameForView( TZADWWKOSub, "TZADWWKOSub", ViewToWindow, zLEVEL_TASK )
   GET VIEW TZADWWKOMain NAMED "TZADWWKOMain"
   NAME VIEW TZADWWKOMain "TZADWWKO"
   DropNameForView( TZADWWKOMain, "TZADWWKOMain", ViewToWindow, zLEVEL_TASK )

END
